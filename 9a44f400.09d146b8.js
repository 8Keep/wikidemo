(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{316:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(1),i=n(9),a=(n(0),n(441)),o={id:"spidermonkey",title:"SpiderMonkey"},s={id:"spidermonkey",title:"SpiderMonkey",description:'<div class="warning">',source:"@site/docs/spidermonkey.md",permalink:"/wikidemo/docs/spidermonkey",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/spidermonkey.md",sidebar:"main",previous:{title:"SDK",permalink:"/wikidemo/docs/sdk"},next:{title:"Tasks",permalink:"/wikidemo/docs/tasks"}},l=[{value:"Explanation of SpiderMonkey\u2019s inner workings",id:"explanation-of-spidermonkeys-inner-workings",children:[]},{value:"Field serializer",id:"field-serializer",children:[]}],c={rightToc:l};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("div",{class:"warning"},Object(a.b)("p",null,"This article covers a deprecated API","!"," See\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"jme3/advanced/networking"}),"networking")," for current documentation.\nSee ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"spidermonkey/migration"}),"migration")," for migration instructions.")),Object(a.b)("p",null,"SpiderMonkey is a high performance Java networking engine, aiming to\nprovide game developers a stable and efficient networking system. It\u2019s\nalso perfectly capable of doing anything other than game networking.\nSpiderMonkey is part of jME3 and can be found in the src/networking\ndirectory. ",Object(a.b)("strong",{parentName:"p"},"Author:")," Lars 'Levia' Wesselius+ ",Object(a.b)("strong",{parentName:"p"},"License:")," ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"http://www.opensource.org/licenses/bsd-license.php"}),"New BSD\nlicense"),"+ ",Object(a.b)("strong",{parentName:"p"},"Blog:"),"\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"http://codeninja.me/tag/spidermonkey/"}),"http://codeninja.me/tag/spidermonkey/"),"+ ",Object(a.b)("strong",{parentName:"p"},"Forum:"),"\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"http://jmonkeyengine.org/groups/spidermonkey/forum/"}),"http://jmonkeyengine.org/groups/spidermonkey/forum/"),"+ A tutorial trail\ncan be found below, and below that all different aspects of SpiderMonkey\nare explained. These tutorials are to be updated upon SVN HEAD, so if\nnew features are added in SVN, you should tutorials arriving of them\nsoon."),Object(a.b)("h1",{id:"tutorial-trail"},"Tutorial trail"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"spidermonkey/tutorial/connection"}),"Connections"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"spidermonkey/tutorial/sending_and_receiving_messages"}),"Sending and receiving\nmessages"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"spidermonkey/tutorial/serializing"}),"Serialization"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"spidermonkey/tutorial/compression"}),"Compression"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"spidermonkey/tutorial/services"}),"Services"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"spidermonkey/tutorial/streaming"}),"Streaming")))),Object(a.b)("h2",{id:"explanation-of-spidermonkeys-inner-workings"},"Explanation of SpiderMonkey\u2019s inner workings"),Object(a.b)("h1",{id:"connection-protocols"},"Connection protocols"),Object(a.b)("p",null,"SpiderMonkey supports both TCP and UDP, and is also extendable to\nprovide others. Possible future protocols may be RUDP, UDP Lite, and\nSCTP. SCTP will be added in Java 7, and will therefore probably added to\nSpiderMonkey after it\u2019s released. Please note that the language level of\nSpiderMonkey is 1.5, so it will definitely not be part of the standard\nAPI for a few years."),Object(a.b)("h1",{id:"clients"},"Clients"),Object(a.b)("p",null,"SpiderMonkey creates two connections by default. A TCP connection for a\nreliable connection, and an UDP 'connection' ","[","1","]"," for fast message\nhandling. A problem arises here: these two connections mean that even\nthough there are two connections, there\u2019s only one client to represent\nboth the connections. In SpiderMonkey you don\u2019t have to worry about\nthat. The server has a client manager which deals with this problem.\nUpon connecting, clients have to send a ClientRegistration message to\nlink their TCP and UDP connections together. Upon receiving those two\nmessages, server combines the clients into one, and provides this client\nto you. This means you can call both TCP and UDP methods on the client.\nIf you still want to receive the 'local' client of a connection, you can\ndo so by calling the appropriate messages in the Server class."),Object(a.b)("h1",{id:"serializing"},"Serializing"),Object(a.b)("p",null,"Serializing is an aspect that received a lot of attention. I wanted it\nto be simple for people to register their own messages, but also be able\nto register serializers for their own object types. The system works by\nregistering classes to serializers. Generally, a serializer does not\nexist without a class it can serialize - simply because it doesn\u2019t have\nto: Why have a serializer when there\u2019s nothing to serialize. A lot of\nwork has been put into making it as efficient as possible. What can be\nleft out, is left out, and what can optimized, is optimized."),Object(a.b)("h2",{id:"field-serializer"},"Field serializer"),Object(a.b)("p",null,"The default serializer requires some explanation. This serializer\nserializes all classes that have no (registered) serializer. The field\nserializer works by saving all fields internally, so it can access them\non serialization faster. The fields are taken, and their types are\nchecked. They are put through a serializer again (which serializer\ndepends, of course, on the data type). Then they are ready to be written\nto the buffer. As you can tell, this is quite a simple serializer, and\nshould be used if your message don\u2019t require extra attention. See ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"spidermonkey/tutorial/serializing"}),"this\ntutorial")," if you want to know how\nto register your own messages or serializers."),Object(a.b)("h1",{id:"service-system"},"Service system"),Object(a.b)("p",null,"The service system is in fact a tiny system. It\u2019s meant to solve a\nsmall, but annoying problem. Imagine you have SpiderMonkey as your\nnetworking library, and other people have made extra\u2019s for it.\nExcellent, of course, but they may all require different\ninitialization","!"," Perhaps you have to instantiate one yourself by using\nnew, or maybe another works by calling a factory method; the service\nsystem exists to avoid that problem. All extras should use this system.\nPlease see ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"spidermonkey/tutorial/services"}),"the service tutorial")," on\nhow to use this system."),Object(a.b)("h1",{id:"compression"},"Compression"),Object(a.b)("p",null,"By default SpiderMonkey supports compressing messages. It\u2019s been made to\nwhere you have complete freedom over what messages you wish to compress.\nSee ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"spidermonkey/tutorial/compression"}),"this tutorial")," on how to use\nthese special messages."),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"UDP is connectionless")))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},b=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(n),m=r,u=b["".concat(o,".").concat(m)]||b[m]||d[m]||a;return n?i.a.createElement(u,s({ref:t},c,{components:n})):i.a.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
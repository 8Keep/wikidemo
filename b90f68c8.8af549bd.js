(window.webpackJsonp=window.webpackJsonp||[]).push([[222],{361:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(1),r=a(9),o=(a(0),a(441)),c={},i={id:"jme3/advanced/sky",title:"sky",description:"Here is an example for how you add a static horizon (a background",source:"@site/docs/jme3/advanced/sky.md",permalink:"/wikidemo/docs/jme3/advanced/sky",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/sky.md"},l=[],p={rightToc:l};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,'Here is an example for how you add a static horizon (a background\nlandscape and a sky) to a scene. Having a discernable horizon with a\nsuitable landscape (or space, or ocean, or whatever) in the background\nmakes scenes look more realistic than just a single-colored "sky"\nbackground.'),Object(o.b)("h1",{id:"adding-the-sky"},"Adding the Sky"),Object(o.b)("p",null,"Adding a sky is extremely easy using the ",Object(o.b)("inlineCode",{parentName:"p"},"com.jme3.util.SkyFactory"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'getRootNode().attachChild(SkyFactory.createSky(getAssetManager(), "Textures/Sky/Bright/BrightSky.dds", SkyFactory.EnvMapType.CubeMap));\n')),Object(o.b)("p",null,"To add a sky you need to supply:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The assetManager object to use")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"A cube or sphere map texture of the sky")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Set the map type:\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"%7Blink-javadoc%7D/com/jme3/util/SkyFactory.EnvMapType.html"}),"SkyFactory.EnvMapType"),".\nIn this instance, CubeMap."))),Object(o.b)("p",null,"Internally, the SkyFactory calls the following methods:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"sky.setQueueBucket(Bucket.Sky);")," makes certain the sky is rendered\nin the right order, behind everything else.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"sky.setCullHint(Spatial.CullHint.Never);")," makes certain that the\nsky is never culled.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The SkyFactory uses the internal jME3 material definition\n",Object(o.b)("inlineCode",{parentName:"p"},"Sky.j3md"),". This Material definition works with sphere and cube\nmaps."))),Object(o.b)("h1",{id:"creating-the-textures"},"Creating the Textures"),Object(o.b)("p",null,"As the sky texture we use the sample BrightSky.dds file from\njme3test-test-data."),Object(o.b)("p",null,"How to create a sky textures?"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"There are many tools out there that generate cube and sphere maps.\\\nExamples for landscape texture generators are Terragen or Bryce.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The actual texture size does not matter, as long as you add the Sky\nGeometry to the Sky bucket: Everything in the sky bucket will always\nbe infinitely far away behind everything else, and never intersect\nwith your scene.\\\nOf course the higher the resolution, the better it will look. On the\nother hand, if the graphic is too big, it will slow the game down.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"A box or sphere map is the simplest solution. But you can use any\nNode as sky, even complex sets of geometries and quads with animated\nclouds, blinking stars, city skylines, etc.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"JME3 supports cube maps in PNG, JPG, or (compressed) DDS format."))),Object(o.b)("p",null,"Box or Sphere?"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"If you have access to cube map textures, then use a SkyBox"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"http://1.bp.blogspot.com/_uVsWqMqIGQU/SN0IZEE117I/AAAAAAAAAPs/4lfHx1Erdqg/s1600/skybox"}),"SkyBox\nexamples")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"If you have access to sphere map textures -- specially projected sky\nimages that fit inside a sphere -- then you use a SkySphere or\nSkyDome."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"http://wiki.delphigl.com/index.php/Datei:Skysphere.jpg"}),"SkySphere\nexample"))))),Object(o.b)("p",null,"For more information on Skymap creation see:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/free_skymaps"}),"How to create free skymaps"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/external/blender.html.xml#skybox-baking#"}),"SkyBox baking")))))}b.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return y}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),b=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},s=function(e){var t=b(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=b(a),m=n,y=s["".concat(c,".").concat(m)]||s[m]||u[m]||o;return a?r.a.createElement(y,i({ref:t},p,{components:a})):r.a.createElement(y,i({ref:t},p))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,c=new Array(o);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var p=2;p<o;p++)c[p]=a[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{323:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return b}));var o=a(1),n=a(9),r=(a(0),a(441)),l={},i={id:"jme3/advanced/bloom_and_glow",title:"bloom_and_glow",description:"Bloom is a popular shader effect in 3D games industry. It usually",source:"@site/docs/jme3/advanced/bloom_and_glow.md",permalink:"/wikidemo/docs/jme3/advanced/bloom_and_glow",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/bloom_and_glow.md"},c=[{value:"Creating a glow-map",id:"creating-a-glow-map",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Usage",id:"usage-1",children:[]},{value:"Increasing the blur range and reducing fps cost",id:"increasing-the-blur-range-and-reducing-fps-cost",children:[]},{value:"Using classic bloom combined with a glow map",id:"using-classic-bloom-combined-with-a-glow-map",children:[]},{value:"Making your home brewed material definition support Glow",id:"making-your-home-brewed-material-definition-support-glow",children:[]},{value:"Make a glowing object stop to glow",id:"make-a-glowing-object-stop-to-glow",children:[]}],s={rightToc:c};function b(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Bloom is a popular shader effect in 3D games industry. It usually\nconsist in displaying a glowing halo around light sources or bright\nareas of a scene. In practice, the bright areas are extracted from the\nrendered scene, blurred and finally added up to the render."),Object(r.b)("p",null,"Those images gives an idea of what bloom does. The left image has no\nbloom effect, the right image does.\\\n",Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"/images/jme3/advanced/nobloomsky.png",alt:"No\nbloom"})),Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"/images/jme3/advanced/blomsky.png",alt:"Bloom"}))),Object(r.b)("h1",{id:"bloom-usage"},"Bloom Usage"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Create a FilterPostProcessor")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Create a BloomFilter")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Add the filter to the processor")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Add the processor to the viewPort"))),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"})," FilterPostProcessor fpp=new FilterPostProcessor(assetManager);\n BloomFilter bloom=new BloomFilter();\n fpp.addFilter(bloom);\n viewPort.addProcessor(fpp);\n")),Object(r.b)("p",null,"Here are the parameters that you can tweak :"),Object(r.b)("p",null,"+-----------------+-----------------+-----------------+-----------------+\n| Parameter       | Method          | Default         | Description     |\n+=================+=================+=================+=================+\n| blur scale      | ",Object(r.b)("inlineCode",{parentName:"p"},"setBl          | 1.5f            | the scale of    |\n|                 | urScale(float)")," |                 | the bloom       |\n|                 |                 |                 | effect, but be  |\n|                 |                 |                 | careful, high   |\n|                 |                 |                 | values does     |\n|                 |                 |                 | artifacts       |\n+-----------------+-----------------+-----------------+-----------------+\n| exposure Power  | ",Object(r.b)("inlineCode",{parentName:"p"},"setExposu      | 5.0f            | the glowing     |\n|                 | rePower(float)")," |                 | channel color   |\n|                 |                 |                 | is raised to    |\n|                 |                 |                 | the value power |\n+-----------------+-----------------+-----------------+-----------------+\n| exposure        | ",Object(r.b)("inlineCode",{parentName:"p"},"setExposur     | 0.0f            | the threshold   |\n| cut-off         | eCutOff(float)")," |                 | of color to     |\n|                 |                 |                 | bloom during    |\n|                 |                 |                 | extraction      |\n+-----------------+-----------------+-----------------+-----------------+\n| bloom intensity | ",Object(r.b)("inlineCode",{parentName:"p"},"setBloomIn     | 2.0f            | the resulting   |\n|                 | tensity(float)")," |                 | bloom value is  |\n|                 |                 |                 | multiplied by   |\n|                 |                 |                 | this intensity  |\n+-----------------+-----------------+-----------------+-----------------+"),Object(r.b)("p",null,"You'll probably need to adjust those parameters depending on your scene."),Object(r.b)("h1",{id:"bloom-with-a-glow-map"},"Bloom with a glow map"),Object(r.b)("p",null,"Sometimes, you want to have more control over what glows and does not\nglow. The bloom filter supports a glow map or a glow color."),Object(r.b)("h2",{id:"creating-a-glow-map"},"Creating a glow-map"),Object(r.b)("p",null,"Let's take the hover tank example bundled with JME3 test data.\\\nHere you can see the diffuse map of the tank, and the associated glow\nmap that only contains the parts of the texture that will glow and their\nglowing color:\\\n",Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"/images/jme3/advanced/tank_diffuse_ss.png",alt:"Tank diffuse map"}))," ",Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"/images/jme3/advanced/tank_glow_map_ss.png",alt:"Tank glow\nmap"}))),Object(r.b)("p",null,"Glow maps work with Lighting.j3md, Particles.j3md and Unshaded.j3md\nmaterial definitions. The tank material looks like this :"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"Material My Material : Common/MatDefs/Light/Lighting.j3md {\n     MaterialParameters {\n        SpecularMap : Models/HoverTank/tank_specular.png\n        Shininess : 8\n        NormalMap : Models/HoverTank/tank_normals.png\n        DiffuseMap : Models/HoverTank/tank_diffuse.png\n        GlowMap : Models/HoverTank/tank_glow_map_highres.png\n        UseMaterialColors : true\n        Ambient  : 0.0 0.0 0.0 1.0\n        Diffuse  : 1.0 1.0 1.0 1.0\n        Specular : 1.0 1.0 1.0 1.0\n     }\n}\n")),Object(r.b)("p",null,"The glow map is defined here : ",Object(r.b)("strong",{parentName:"p"},"GlowMap :\nModels/HoverTank/tank","_","glow","_","map","_","highres.png")),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Create a FilterPostProcessor")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Create a BloomFilter with the GlowMode.Objects parameter")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Add the filter to the processor")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Add the processor to the viewPort"))),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"  FilterPostProcessor fpp=new FilterPostProcessor(assetManager);\n  BloomFilter bf=new BloomFilter(BloomFilter.GlowMode.Objects);\n  fpp.addFilter(bf);\n  viewPort.addProcessor(fpp);\n")),Object(r.b)("p",null,"Here is the result :\\\n",Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"/images/jme3/advanced/tanlglow1.png",alt:"Glowing hover tank"}))),Object(r.b)("h1",{id:"bloom-with-a-glow-color"},"Bloom with a glow color"),Object(r.b)("p",null,"Sometimes you need an entire object to glow, not just parts of it. In\nthis case you'll need to use the glow color parameter."),Object(r.b)("h2",{id:"usage-1"},"Usage"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Create a material for your object and set the GlowColor parameter")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Create a FilterPostProcessor")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Create a BloomFilter with the GlowMode.Objects parameter")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Add the filter to the processor")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Add the processor to the viewPort"))),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),'    Material mat = new Material(getAssetManager(), "Common/MatDefs/Misc/Unshaded.j3md");\n    mat.setColor("Color", ColorRGBA.Green);\n    mat.setColor("GlowColor", ColorRGBA.Green);\n    fpp=new FilterPostProcessor(assetManager);\n    bloom= new BloomFilter(BloomFilter.GlowMode.Objects);\n    fpp.addFilter(bloom);\n    viewPort.addProcessor(fpp);\n')),Object(r.b)("p",null,"Here is the result on Oto's plasma ball (before and after) :\\"),Object(r.b)("p",null,Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"/images/jme3/advanced/otonobloom.png",alt:"Oto's plasma ball is just a big\npea"})),Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"/images/jme3/advanced/otoglow.png",alt:"Oto's plasma ball radiates\nincredible power!!!"}))),Object(r.b)("h1",{id:"hints-and-tricks"},"Hints and tricks"),Object(r.b)("h2",{id:"increasing-the-blur-range-and-reducing-fps-cost"},"Increasing the blur range and reducing fps cost"),Object(r.b)("p",null,"The glow render is sampled on a texture that has the same dimensions as\nthe viewport. You can reduce the size of the bloom sampling just by\nusing the setDownSamplingFactor method like this :\\"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"})," BloomFilter bloom=new BloomFilter();\n bloom.setDownSamplingFactor(2.0f);\n")),Object(r.b)("p",null,"In this example the sampling size is divided by 4 (width/2,height/2),\nresulting in less work to blur the scene. The resulting texture is then\nup sampled to the screen size using hardware bilinear filtering. this\nresults in a wider blur range."),Object(r.b)("h2",{id:"using-classic-bloom-combined-with-a-glow-map"},"Using classic bloom combined with a glow map"),Object(r.b)("p",null,"let's say you want a global bloom on your scene, but you have also a\nglowing object on it. You can use only one bloom filter for both effects\nlike that"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),"BloomFilter bloom=new BloomFilter(BloomFilter.GlowMode.SceneAndObjects);\n")),Object(r.b)("p",null,"However, note that both effects will share the same values of attribute,\nand sometimes, it won't be what you need."),Object(r.b)("h2",{id:"making-your-home-brewed-material-definition-support-glow"},"Making your home brewed material definition support Glow"),Object(r.b)("p",null,"Let's say you have made a custom material on your own, and that you want\nit to support glow maps and glow color. In your material definition you\nneed to add those lines in the MaterialParameters section :"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{})," MaterialParameters {\n\n        ....\n\n        // Texture of the glowing parts of the material\n        Texture2D GlowMap\n        // The glow color of the object\n        Color GlowColor\n    }\n")),Object(r.b)("p",null,"Then add the following technique :"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"    Technique Glow {\n\n        LightMode SinglePass\n\n        VertexShader GLSL100:   Common/MatDefs/Misc/SimpleTextured.vert\n        FragmentShader GLSL100: Common/MatDefs/Light/Glow.frag\n\n        WorldParameters {\n            WorldViewProjectionMatrix\n        }\n\n        Defines {\n            HAS_GLOWMAP : GlowMap\n            HAS_GLOWCOLOR : GlowColor\n        }\n    }\n")),Object(r.b)("p",null,"Then you can use this material with the BloomFilter"),Object(r.b)("h2",{id:"make-a-glowing-object-stop-to-glow"},"Make a glowing object stop to glow"),Object(r.b)("p",null,"If you are using a glow map, remove the texture from the material."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),'material.clearTextureParam("GlowMap");\n')),Object(r.b)("p",null,"If you are using a glow color, set it to black"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),'material.setColor("GlowColor",ColorRGBA.Black);\n')))}b.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var o=a(0),n=a.n(o);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=n.a.createContext({}),b=function(e){var t=n.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},p=function(e){var t=b(e.components);return n.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=Object(o.forwardRef)((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(a),d=o,u=p["".concat(l,".").concat(d)]||p[d]||m[d]||r;return a?n.a.createElement(u,i({ref:t},s,{components:a})):n.a.createElement(u,i({ref:t},s))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=a[s];return n.a.createElement.apply(null,l)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);
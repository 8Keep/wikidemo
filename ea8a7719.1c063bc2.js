(window.webpackJsonp=window.webpackJsonp||[]).push([[276],{415:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return c}));var r=t(1),a=t(9),i=(t(0),t(441)),o={},l={id:"jme3/advanced/loading_screen",title:"loading_screen",description:"Nifty Loading Screen (Progress Bar)",source:"@site/docs/jme3/advanced/loading_screen.md",permalink:"/wikidemo/docs/jme3/advanced/loading_screen",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/loading_screen.md"},s=[{value:"Understanding Nifty XML",id:"understanding-nifty-xml",children:[]},{value:"Updating progress bar over a number of frames",id:"updating-progress-bar-over-a-number-of-frames",children:[]},{value:"Using multithreading",id:"using-multithreading",children:[]}],d={rightToc:s};function c(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"nifty-loading-screen-progress-bar"},"Nifty Loading Screen (Progress Bar)"),Object(i.b)("p",null,"This example will use the existing hello terrain as an example. It will\nrequire these 2 images inside Assets/Interface/ (save them as border.png\nand inner.png respectively)."),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/images/jme3/advanced/inner1.png",alt:"inner1.png"}))),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/images/jme3/advanced/border1.png",alt:"border1.png"}))),Object(i.b)("p",null,"You need to add the jme3-niftygui and\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"../../sdk/sample_code.xml#jme3testdata-assets#"}),"jme3-test-data"),"\nlibraries."),Object(i.b)("p",null,"You will need to set your projects source to JDK 8."),Object(i.b)("p",null,"This is the progress bar at 90%:"),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/images/jme3/advanced/loadingscreen.png",alt:"loadingscreen.png"}))),Object(i.b)("p",null,"nifty","_","loading.xml"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-{.xml}"}),'<?xml version="1.0" encoding="UTF-8"?>\n<nifty>\n    <useStyles filename="nifty-default-styles.xml" />\n    <useControls filename="nifty-default-controls.xml" />\n\n    <controlDefinition name = "loadingbar" controller = "jme3test.TestLoadingScreen">\n        <image filename="Interface/border.png" childLayout="absolute"\n               imageMode="resize:15,2,15,15,15,2,15,2,15,2,15,15">\n            <image id="progressbar" x="0" y="0" filename="Interface/inner.png" width="32px"\n              height="100%" imageMode="resize:15,2,15,15,15,2,15,2,15,2,15,15" />\n        </image>\n    </controlDefinition>\n\n    <screen id="start" controller = "jme3test.TestLoadingScreen">\n        <layer id="layer" childLayout="center">\n            <panel id = "panel2" height="30%" width="50%" align="center" valign="center"\n              childLayout="vertical" visibleToMouse="true">\n                <control id="startGame" name="button" backgroundColor="#0000" label="Load Game"\n                  align="center">\n                    <interact onClick="showLoadingMenu()" />\n                </control>\n            </panel>\n        </layer>\n    </screen>\n\n    <screen id="loadlevel" controller = "jme3test.TestLoadingScreen">\n        <layer id="loadinglayer" childLayout="center" backgroundColor="#000000">\n            <panel id = "loadingpanel" childLayout="vertical" align="center" valign="center"\n              height="32px" width="70%">\n                <control name="loadingbar" align="center" valign="center" width="100%"\n                  height="100%" />\n                <control id="loadingtext" name="label" align="center"\n                         text="                                                  "/>\n            </panel>\n        </layer>\n    </screen>\n\n    <screen id="end" controller = "jme3test.TestLoadingScreen">\n    </screen>\n\n</nifty>\n')),Object(i.b)("h2",{id:"understanding-nifty-xml"},"Understanding Nifty XML"),Object(i.b)("p",null,"The progress bar and text is done statically using nifty XML. A custom\ncontrol is created, which represents the progress bar."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-{.xml}"}),'<controlDefinition name = "loadingbar" controller = "jme3test.TestLoadingScreen">\n    <image filename="Interface/border.png" childLayout="absolute"\n           imageMode="resize:15,2,15,15,15,2,15,2,15,2,15,15">\n        <image id="progressbar" x="0" y="0" filename="Interface/inner.png" width="32px"\n          height="100%" imageMode="resize:15,2,15,15,15,2,15,2,15,2,15,15"/>\n    </image>\n</controlDefinition>\n')),Object(i.b)("p",null,"This screen simply displays a button in the middle of the screen, which\ncould be seen as a simple main menu UI."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-{.xml}"}),'<screen id="start" controller = "jme3test.TestLoadingScreen">\n    <layer id="layer" childLayout="center">\n        <panel id = "panel2" height="30%" width="50%" align="center" valign="center"\n          childLayout="vertical" visibleToMouse="true">\n            <control id="startGame" name="button" backgroundColor="#0000" label="Load Game"\n              align="center"> <interact onClick="showLoadingMenu()" />\n            </control>\n        </panel>\n    </layer>\n</screen>\n')),Object(i.b)("p",null,"This screen displays our custom progress bar control with a text\ncontrol."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-{.xml}"}),'<screen id="loadlevel" controller = "jme3test.TestLoadingScreen">\n    <layer id="loadinglayer" childLayout="center" backgroundColor="#000000">\n        <panel id = "loadingpanel" childLayout="vertical" align="center" valign="center"\n          height="32px" width="400px">\n            <control name="loadingbar" align="center" valign="center" width="400px"\n              height="32px" />\n            <control id="loadingtext" name="label" align="center"\n                      text="                                                  "/>\n        </panel>\n    </layer>\n</screen>\n')),Object(i.b)("h1",{id:"creating-the-bindings-to-use-the-nifty-xml"},"Creating the bindings to use the Nifty XML"),Object(i.b)("p",null,"There are 3 main ways to update a progress bar. To understand why these\nmethods are necessary, an understanding of the graphics pipeline is\nneeded."),Object(i.b)("p",null,"Something like this in a single thread will not work:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"load_scene();\nupdate_bar(30%);\nload_characters();\nupdate_bar(60%);\nload_sounds();\nupdate_bar(100%);\n")),Object(i.b)("p",null,"If you do all of this in a single frame, then it is sent to the graphics\ncard only after the whole code block has executed. By this time the bar\nhas reached 100% and the game has already begun -- for the user, the\nprogressbar on the screen would not have visibly changed."),Object(i.b)("p",null,"The 2 main good solutions are:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Updating explicitly over many frames")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Multi-threading"))),Object(i.b)("h2",{id:"updating-progress-bar-over-a-number-of-frames"},"Updating progress bar over a number of frames"),Object(i.b)("p",null,"The idea is to break down the loading of the game into discrete parts."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'package jme3test;\n\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.material.Material;\nimport com.jme3.niftygui.NiftyJmeDisplay;\nimport static com.jme3.niftygui.NiftyJmeDisplay.newNiftyJmeDisplay;\nimport com.jme3.renderer.Camera;\nimport com.jme3.terrain.geomipmap.TerrainLodControl;\nimport com.jme3.terrain.geomipmap.TerrainQuad;\nimport com.jme3.terrain.heightmap.AbstractHeightMap;\nimport com.jme3.terrain.heightmap.ImageBasedHeightMap;\nimport com.jme3.texture.Texture;\nimport com.jme3.texture.Texture.WrapMode;\nimport de.lessvoid.nifty.Nifty;\nimport de.lessvoid.nifty.controls.Controller;\nimport de.lessvoid.nifty.controls.Parameters;\nimport de.lessvoid.nifty.elements.Element;\nimport de.lessvoid.nifty.elements.render.TextRenderer;\nimport de.lessvoid.nifty.input.NiftyInputEvent;\nimport de.lessvoid.nifty.screen.Screen;\nimport de.lessvoid.nifty.screen.ScreenController;\nimport de.lessvoid.nifty.tools.SizeValue;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * This is the TestLoadingScreen Class of your Game. You should only do\n * initialization here. Move your Logic into AppStates or Controls\n *\n * @author normenhansen\n */\npublic class TestLoadingScreen extends SimpleApplication implements\n        ScreenController, Controller {\n\n    private NiftyJmeDisplay niftyDisplay;\n    private Nifty nifty;\n    private Element progressBarElement;\n    private TerrainQuad terrain;\n    private Material mat_terrain;\n    private float frameCount = 0;\n    private boolean load = false;\n    private TextRenderer textRenderer;\n\n    public static void main(String[] args) {\n        TestLoadingScreen app = new TestLoadingScreen();\n        app.start();\n    }\n\n    @Override\n    public void simpleInitApp() {\n        flyCam.setEnabled(false);\n        niftyDisplay = newNiftyJmeDisplay(assetManager,\n                inputManager,\n                audioRenderer,\n                guiViewPort);\n        nifty = niftyDisplay.getNifty();\n\n        nifty.fromXml("Interface/nifty_loading.xml", "start", this);\n\n        guiViewPort.addProcessor(niftyDisplay);\n    }\n\n    @Override\n    public void simpleUpdate(float tpf) {\n\n        if (load) { //loading is done over many frames\n            if (frameCount == 1) {\n                Element element = nifty.getScreen("loadlevel").findElementById(\n                        "loadingtext");\n                textRenderer = element.getRenderer(TextRenderer.class);\n\n                mat_terrain = new Material(assetManager,\n                        "Common/MatDefs/Terrain/Terrain.j3md");\n                mat_terrain.setTexture("Alpha", assetManager.loadTexture(\n                        "Textures/Terrain/splat/alphamap.png"));\n                setProgress(0.2f, "Loading grass");\n\n            } else if (frameCount == 2) {\n                Texture grass = assetManager.loadTexture(\n                        "Textures/Terrain/splat/grass.jpg");\n                grass.setWrap(WrapMode.Repeat);\n                mat_terrain.setTexture("Tex1", grass);\n                mat_terrain.setFloat("Tex1Scale", 64f);\n                setProgress(0.4f, "Loading dirt");\n\n            } else if (frameCount == 3) {\n                Texture dirt = assetManager.loadTexture(\n                        "Textures/Terrain/splat/dirt.jpg");\n\n                dirt.setWrap(WrapMode.Repeat);\n                mat_terrain.setTexture("Tex2", dirt);\n                mat_terrain.setFloat("Tex2Scale", 32f);\n                setProgress(0.5f, "Loading rocks");\n\n            } else if (frameCount == 4) {\n                Texture rock = assetManager.loadTexture(\n                        "Textures/Terrain/splat/road.jpg");\n\n                rock.setWrap(WrapMode.Repeat);\n\n                mat_terrain.setTexture("Tex3", rock);\n                mat_terrain.setFloat("Tex3Scale", 128f);\n                setProgress(0.6f, "Creating terrain");\n\n            } else if (frameCount == 5) {\n                AbstractHeightMap heightmap = null;\n                Texture heightMapImage = assetManager.loadTexture(\n                        "Textures/Terrain/splat/mountains512.png");\n                heightmap = new ImageBasedHeightMap(heightMapImage.getImage());\n\n                heightmap.load();\n                terrain = new TerrainQuad("my terrain", 65, 513, heightmap.\n                        getHeightMap());\n                setProgress(0.8f, "Positioning terrain");\n\n            } else if (frameCount == 6) {\n                terrain.setMaterial(mat_terrain);\n\n                terrain.setLocalTranslation(0, -100, 0);\n                terrain.setLocalScale(2f, 1f, 2f);\n                rootNode.attachChild(terrain);\n                setProgress(0.9f, "Loading cameras");\n\n            } else if (frameCount == 7) {\n                List<Camera> cameras = new ArrayList<>();\n                cameras.add(getCamera());\n                TerrainLodControl control = new TerrainLodControl(terrain,\n                        cameras);\n                terrain.addControl(control);\n                setProgress(1f, "Loading complete");\n\n            } else if (frameCount == 8) {\n                nifty.gotoScreen("end");\n                nifty.exit();\n                guiViewPort.removeProcessor(niftyDisplay);\n                flyCam.setEnabled(true);\n                flyCam.setMoveSpeed(50);\n            }\n\n            frameCount++;\n        }\n    }\n\n    public void setProgress(final float progress, String loadingText) {\n        final int MIN_WIDTH = 32;\n        int pixelWidth = (int) (MIN_WIDTH + (progressBarElement.getParent().\n                getWidth() - MIN_WIDTH) * progress);\n        progressBarElement.setConstraintWidth(new SizeValue(pixelWidth + "px"));\n        progressBarElement.getParent().layoutElements();\n\n        textRenderer.setText(loadingText);\n    }\n\n    public void showLoadingMenu() {\n        nifty.gotoScreen("loadlevel");\n        load = true;\n    }\n\n    @Override\n    public void onStartScreen() {\n    }\n\n    @Override\n    public void onEndScreen() {\n    }\n\n    @Override\n    public void bind(Nifty nifty, Screen screen) {\n        progressBarElement = nifty.getScreen("loadlevel").findElementById(\n                "progressbar");\n    }\n\n    // methods for Controller\n    @Override\n    public boolean inputEvent(final NiftyInputEvent inputEvent) {\n        return false;\n    }\n\n    @Override\n    public void onFocus(boolean getFocus) {\n    }\n\n    @Override\n    public void bind(Nifty nifty, Screen screen, Element elmnt,\n            Parameters prmtrs) {\n        progressBarElement = elmnt.findElementById("progressbar");\n    }\n\n    @Override\n    public void init(Parameters prmtrs) {\n    }\n\n}\n')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Try and add all controls near the end, as their update loops may begin\nexecuting."))),Object(i.b)("h2",{id:"using-multithreading"},"Using multithreading"),Object(i.b)("p",null,"For more info on multithreading: ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"../../jme3/advanced/multithreading"}),"The jME3 Threading\nModel")),Object(i.b)("p",null,"Make sure to change the XML file to point the controller to\nTestLoadingScreen","*","1","*","."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'package jme3test;\n\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.material.Material;\nimport com.jme3.niftygui.NiftyJmeDisplay;\nimport static com.jme3.niftygui.NiftyJmeDisplay.newNiftyJmeDisplay;\nimport com.jme3.renderer.Camera;\nimport com.jme3.terrain.geomipmap.TerrainLodControl;\nimport com.jme3.terrain.geomipmap.TerrainQuad;\nimport com.jme3.terrain.heightmap.AbstractHeightMap;\nimport com.jme3.terrain.heightmap.ImageBasedHeightMap;\nimport com.jme3.texture.Texture;\nimport com.jme3.texture.Texture.WrapMode;\nimport de.lessvoid.nifty.Nifty;\nimport de.lessvoid.nifty.controls.Controller;\nimport de.lessvoid.nifty.controls.Parameters;\nimport de.lessvoid.nifty.elements.Element;\nimport de.lessvoid.nifty.elements.render.TextRenderer;\nimport de.lessvoid.nifty.input.NiftyInputEvent;\nimport de.lessvoid.nifty.screen.Screen;\nimport de.lessvoid.nifty.screen.ScreenController;\nimport de.lessvoid.nifty.tools.SizeValue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class TestLoadingScreen1 extends SimpleApplication implements\n        ScreenController, Controller {\n\n    private NiftyJmeDisplay niftyDisplay;\n    private Nifty nifty;\n    private Element progressBarElement;\n    private TerrainQuad terrain;\n    private Material mat_terrain;\n    private boolean load = false;\n    private ScheduledExecutorService exec = Executors.newScheduledThreadPool(2);\n    private Future loadFuture = null;\n    private TextRenderer textRenderer;\n    private static final Logger LOG = Logger.getLogger(TestLoadingScreen1.class.\n            getName());\n\n    public static void main(String[] args) {\n        TestLoadingScreen1 app = new TestLoadingScreen1();\n        app.start();\n    }\n\n    @Override\n    public void simpleInitApp() {\n        flyCam.setEnabled(false);\n        niftyDisplay = newNiftyJmeDisplay(assetManager,\n                inputManager,\n                audioRenderer,\n                guiViewPort);\n        nifty = niftyDisplay.getNifty();\n\n        nifty.fromXml("Interface/nifty_loading.xml", "start", this);\n\n        guiViewPort.addProcessor(niftyDisplay);\n    }\n\n    @Override\n    public void simpleUpdate(float tpf) {\n        if (load) {\n            if (loadFuture == null) {\n                //if we have not started loading, submit Callable to executor\n                loadFuture = exec.submit(loadingCallable);\n            }\n            //check if the execution on the other thread is done\n            if (loadFuture.isDone()) {\n                //these calls have to be done on the update loop thread,\n                //especially attaching the terrain to the rootNode\n                //after it is attached, it\'s managed by the update loop thread\n                // and may not be modified from any other thread anymore!\n                nifty.gotoScreen("end");\n                nifty.exit();\n                guiViewPort.removeProcessor(niftyDisplay);\n                flyCam.setEnabled(true);\n                flyCam.setMoveSpeed(50);\n                rootNode.attachChild(terrain);\n                load = false;\n            }\n        }\n    }\n    //This is the callable that contains the code that is run on the other\n    //thread.\n    //Since the assetmananger is threadsafe, it can be used to load data from\n    //any thread.\n    //We do *not* attach the objects to the rootNode here!\n    Callable<Void> loadingCallable = new Callable<Void>() {\n\n        @Override\n        public Void call() {\n\n            Element element = nifty.getScreen("loadlevel").findElementById(\n                    "loadingtext");\n            textRenderer = element.getRenderer(TextRenderer.class);\n\n            mat_terrain = new Material(assetManager,\n                    "Common/MatDefs/Terrain/Terrain.j3md");\n            mat_terrain.setTexture("Alpha", assetManager.loadTexture(\n                    "Textures/Terrain/splat/alphamap.png"));\n            //setProgress is thread safe (see below)\n            setProgress(0.2f, "Loading grass");\n\n            Texture grass = assetManager.loadTexture(\n                    "Textures/Terrain/splat/grass.jpg");\n            grass.setWrap(WrapMode.Repeat);\n            mat_terrain.setTexture("Tex1", grass);\n            mat_terrain.setFloat("Tex1Scale", 64f);\n            setProgress(0.4f, "Loading dirt");\n\n            Texture dirt = assetManager.loadTexture(\n                    "Textures/Terrain/splat/dirt.jpg");\n\n            dirt.setWrap(WrapMode.Repeat);\n            mat_terrain.setTexture("Tex2", dirt);\n            mat_terrain.setFloat("Tex2Scale", 32f);\n            setProgress(0.5f, "Loading rocks");\n\n            Texture rock = assetManager.loadTexture(\n                    "Textures/Terrain/splat/road.jpg");\n\n            rock.setWrap(WrapMode.Repeat);\n\n            mat_terrain.setTexture("Tex3", rock);\n            mat_terrain.setFloat("Tex3Scale", 128f);\n            setProgress(0.6f, "Creating terrain");\n\n            AbstractHeightMap heightmap = null;\n            Texture heightMapImage = assetManager.loadTexture(\n                    "Textures/Terrain/splat/mountains512.png");\n            heightmap = new ImageBasedHeightMap(heightMapImage.getImage());\n\n            heightmap.load();\n            terrain = new TerrainQuad("my terrain", 65, 513, heightmap.\n                    getHeightMap());\n            setProgress(0.8f, "Positioning terrain");\n\n            terrain.setMaterial(mat_terrain);\n\n            terrain.setLocalTranslation(0, -100, 0);\n            terrain.setLocalScale(2f, 1f, 2f);\n            setProgress(0.9f, "Loading cameras");\n\n            List<Camera> cameras = new ArrayList<>();\n            cameras.add(getCamera());\n            TerrainLodControl control = new TerrainLodControl(terrain, cameras);\n            terrain.addControl(control);\n            setProgress(1f, "Loading complete");\n\n            return null;\n        }\n    };\n\n    public void setProgress(final float progress, final String loadingText) {\n        //Since this method is called from another thread, we enqueue the\n        //changes to the progressbar to the update loop thread.\n        enqueue(() -> {\n            final int MIN_WIDTH = 32;\n            int pixelWidth = (int) (MIN_WIDTH + (progressBarElement.getParent().\n                    getWidth() - MIN_WIDTH) * progress);\n            progressBarElement.setConstraintWidth(new SizeValue(pixelWidth\n                    + "px"));\n            progressBarElement.getParent().layoutElements();\n\n            textRenderer.setText(loadingText);\n            return null;\n        });\n\n    }\n\n    public void showLoadingMenu() {\n        nifty.gotoScreen("loadlevel");\n        load = true;\n    }\n\n    @Override\n    public void onStartScreen() {\n    }\n\n    @Override\n    public void onEndScreen() {\n    }\n\n    @Override\n    public void bind(Nifty nifty, Screen screen) {\n        progressBarElement = nifty.getScreen("loadlevel").findElementById(\n                "progressbar");\n    }\n\n    // methods for Controller\n    @Override\n    public boolean inputEvent(final NiftyInputEvent inputEvent) {\n        return false;\n    }\n\n    @Override\n    public void onFocus(boolean getFocus) {\n    }\n\n    @Override\n    public void destroy() {\n        super.destroy();\n        shutdownAndAwaitTermination(exec);\n    }\n\n    //standard shutdown process for executor\n    private void shutdownAndAwaitTermination(ExecutorService pool) {\n        pool.shutdown(); // Disable new tasks from being submitted\n        try {\n            // Wait a while for existing tasks to terminate\n            if (!pool.awaitTermination(6, TimeUnit.SECONDS)) {\n                pool.shutdownNow(); // Cancel currently executing tasks\n                // Wait a while for tasks to respond to being cancelled\n                if (!pool.awaitTermination(6, TimeUnit.SECONDS)) {\n                    LOG.log(Level.SEVERE, "Pool did not terminate {0}", pool);\n                }\n            }\n        } catch (InterruptedException ie) {\n            // (Re-)Cancel if current thread also interrupted\n            pool.shutdownNow();\n            // Preserve interrupt status\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    @Override\n    public void bind(Nifty nifty, Screen screen, Element elmnt,\n            Parameters prmtrs) {\n        progressBarElement = elmnt.findElementById("progressbar");\n    }\n\n    @Override\n    public void init(Parameters prmtrs) {\n    }\n\n}\n')))}c.isMDXComponent=!0},441:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return u}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=a.a.createContext({}),c=function(e){var n=a.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l({},n,{},e)),t},p=function(e){var n=c(e.components);return a.a.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},g=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),g=r,u=p["".concat(o,".").concat(g)]||p[g]||m[g]||i;return t?a.a.createElement(u,l({ref:n},d,{components:t})):a.a.createElement(u,l({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);
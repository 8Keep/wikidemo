(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{172:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(1),i=t(9),r=(t(0),t(441)),o={},s={id:"jme3/advanced/swing_canvas",title:"swing_canvas",description:"3D games are typically played full-screen, or in a window that takes",source:"@site/docs/jme3/advanced/swing_canvas.md",permalink:"/wikidemo/docs/jme3/advanced/swing_canvas",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/swing_canvas.md"},c=[{value:"Creating the Canvas",id:"creating-the-canvas",children:[]},{value:"Creating the Swing Frame",id:"creating-the-swing-frame",children:[]}],l={rightToc:c};function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"3D games are typically played full-screen, or in a window that takes\nover the mouse and all inputs. However it is also possible to embed a\njME 3 canvas in a standard Swing application.\\\nThis can be useful when you create some sort of interactive 3D viewer\nwith a user interface that is more complex than just a HUD: For instance\nan interactive scientific demo, a level editor, or a game character\ndesigner."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Advantages:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"You can use Swing components (frame, panels, menus, controls)\nnext to your jME3 game.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"The NetBeans GUI builder is compatible with the jMonkeyEngine;\nyou can use it it to lay out the Swing GUI frame, and then add()\nthe jME canvas into it. Install the GUI builder via Tools \u2192\nPlugins \u2192 Available Plugins.")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Disadvantages:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"You cannot use SimpleApplication's default mouse capturing for\ncamera navigation, but have to come up with a custom solution.")))),Object(r.b)("p",null,"Here is the full\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://code.google.com/p/jmonkeyengine/source/browse/trunk/engine/src/test/jme3test/awt/TestCanvas.java"}),"TestCanvas.java"),"\ncode sample."),Object(r.b)("h1",{id:"extending-simpleapplication"},"Extending SimpleApplication"),Object(r.b)("p",null,"You start out just the same as for any jME3 game: The base application,\nhere SwingCanvasTest, extends ",Object(r.b)("inlineCode",{parentName:"p"},"com.jme3.app.SimpleApplication"),". As\nusual, you use ",Object(r.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," to initialize the scene, and\n",Object(r.b)("inlineCode",{parentName:"p"},"simpleUpdate()")," as event loop.\\\nThe camera's default behaviour in SimpleApplication is to capture the\nmouse, which doesn't make sense in a Swing window. You have to\ndeactivate and replace this behaviour by ",Object(r.b)("inlineCode",{parentName:"p"},"flyCam.setDragToRotate(true);"),"\nwhen you initialize the application:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public void simpleInitApp() {\n  // activate windowed input behaviour\n  flyCam.setDragToRotate(true);\n  // Set up inputs and load your scene as usual\n  ...\n}\n")),Object(r.b)("p",null,"In short: The first thing that is different is the ",Object(r.b)("inlineCode",{parentName:"p"},"main()")," method. We\ndon't call start() on the SwingCanvasTest object as usual. Instead we\ncreate a Runnable() that creates and opens a standard Swing jFrame. In\nthe runnable, we also create our SwingCanvasTest game with special\nsettings, create a Canvas for it, and add that to the jFrame. Then we\ncall startCanvas()."),Object(r.b)("h1",{id:"main-and-runnable"},"Main() and Runnable()"),Object(r.b)("p",null,"The Swing isn't thread-safe and doesn't allow us to keep the jME3 canvas\nup-to-date. This is why we create a runnable for the jME canvas and\nqueue it in the AWT event thread, so it can be invoked \"later in the\nloop, when Swing is ready with updating its own stuff.\\\nIn the SwingCanvasTest's main() method, create a queued runnable(). It\nwill contain the jME canvas and the Swing frame."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  public static void main(String[] args) {\n    java.awt.EventQueue.invokeLater(new Runnable() {\n      public void run() {\n         // ... see below ...\n      }\n    });\n  }\n")),Object(r.b)("p",null,"::: {.important}\nNote that you have to use app.enqueue() when modifying objects in the\nscene from the AWT Event Queue like you have to use\njava.awt.EventQueue.invokeLater() from other threads (e.g. the update\nloop) when changing swing elements. This can get hairy quickly if you\ndon't have a proper threading model planned so you might want to use\nNiftyGUI as it is embedded in the update loop thread and is also\ncross-platform compatible (e.g. android etc.).\n:::"),Object(r.b)("h2",{id:"creating-the-canvas"},"Creating the Canvas"),Object(r.b)("p",null,"Here in the ",Object(r.b)("inlineCode",{parentName:"p"},"run()")," method, we start the jME application, create its\ncanvas, create a Swing frame, and add everything together.\\\nSpecify the com.jme3.system.AppSettings so jME knows the size of the\nSwing panel that we put it into. The application will not ask the user\nfor display settings, you have to specify them in advance."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"AppSettings settings = new AppSettings(true);\nsettings.setWidth(640);\nsettings.setHeight(480);\n")),Object(r.b)("p",null,"We create our canvas application SwingCanvasTest, and give it the\nsettings. We manually create a canvas for this game and configure the\ncom.jme3.system.JmeCanvasContext. The method setSystemListener() makes\nsure that the listener receives events relating to context creation,\nupdate, and destroy."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"SwingCanvasTest canvasApplication = new SwingCanvasTest();\ncanvasApplication.setSettings(settings);\ncanvasApplication.createCanvas(); // create canvas!\nJmeCanvasContext ctx = (JmeCanvasContext) canvasApplication.getContext();\nctx.setSystemListener(canvasApplication);\nDimension dim = new Dimension(640, 480);\nctx.getCanvas().setPreferredSize(dim);\n")),Object(r.b)("p",null,"Note that we have not called start() on the application, as we would\nusually do in the main() method. We will call startCanvas() later\ninstead."),Object(r.b)("h2",{id:"creating-the-swing-frame"},"Creating the Swing Frame"),Object(r.b)("p",null,"Inside the run() method, you create the Swing window as you would\nusually do. Create an empty jFrame and add() components to it, or create\na custom jFrame object in another class file (for example, by using the\nNetBeans GUI builder) and create an instance of it here. Which ever you\ndo, let's call the jFrame ",Object(r.b)("inlineCode",{parentName:"p"},"window"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'JFrame window = new JFrame("Swing Application");\nwindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n')),Object(r.b)("p",null,'We create a standard JPanel inside the JFrame. Give it any Layout you\nwish -- here we use a simple Flow Layout. Where the code sample says\n"Some Swing Component, this is where you add your buttons and controls.\\\nThe important step is to add() the canvas component into the panel, like\nall the other Swing components.'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'JPanel panel = new JPanel(new FlowLayout()); // a panel\n// add all your Swing components ...\npanel.add(new JButton("Some Swing Component"));\n...\n// add the JME canvas\npanel.add(ctx.getCanvas());\n')),Object(r.b)("p",null,"OK, the jFrame and the panel are ready. We add the panel into the\njFrame, and pack everything together. Set the window's visibility to\ntrue make it appear."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"window.add(panel);\nwindow.pack();\nwindow.setVisible(true);\n")),Object(r.b)("p",null,"Remember that we haven't called start() on the jME appliation yet? For\nthe canvas, there is a special ",Object(r.b)("inlineCode",{parentName:"p"},"startCanvas()")," method that you must call\nnow:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"canvasApplication.startCanvas();\n")),Object(r.b)("p",null,"Clean, build, and run!"),Object(r.b)("h1",{id:"navigation"},"Navigation"),Object(r.b)("p",null,"Remember, to navigate in the scene, click and drag (!) the mouse, or\npress the WASD keys. Depending on your game you may even want to define\ncustom inputs to handle navigation in this untypical environment."))}p.isMDXComponent=!0},441:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),p=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s({},n,{},e)),t},u=function(e){var n=p(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,b=u["".concat(o,".").concat(m)]||u[m]||d[m]||r;return t?i.a.createElement(b,s({ref:n},l,{components:t})):i.a.createElement(b,s({ref:n},l))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);
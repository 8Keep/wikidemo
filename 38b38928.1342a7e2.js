(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{211:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(1),r=n(9),o=(n(0),n(441)),c={},i={id:"jme3/advanced/multiple_camera_views",title:"multiple_camera_views",description:"You can split the screen and look into the 3D scene from different",source:"@site/docs/jme3/advanced/multiple_camera_views.md",permalink:"/wikidemo/docs/jme3/advanced/multiple_camera_views",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/multiple_camera_views.md"},s=[{value:"Set up the First View",id:"set-up-the-first-view",children:[]},{value:"Set Up Three More Views",id:"set-up-three-more-views",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"You can split the screen and look into the 3D scene from different\ncamera angles at the same time. E.g. you can have two rootnodes with\ndifferent scene graphs, and two viewPorts, each of which can only see\nits own subset of the scene with its own subset of port-processing\nfilters, so you get two very different views of the scene."),Object(o.b)("p",null,"The packages used in this example are ",Object(o.b)("inlineCode",{parentName:"p"},"com.jme3.renderer.Camera")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"com.jme3.renderer.ViewPort"),". You can get the full sample code here:\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/renderer/TestMultiViews.java"}),"TestMultiViews.java")),Object(o.b)("h1",{id:"how-to-resize-and-position-viewports"},"How to resize and Position ViewPorts"),Object(o.b)("p",null,"The default viewPort is as big as the window. If you have several, they\nmust be of different sizes, either overlapping or adjacent to one\nanother. How do you tell jME which of the ViewPorts should appear where\non the screen, and how big they should be?"),Object(o.b)("p",null,"Imagine the window as a 1.0f x 1.0f rectangle. The default cam's\nviewPort is set to"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"cam.setViewPort(0f, 1f, 0f, 1f);\n")),Object(o.b)("p",null,"This setting makes the ViewPort take up the whole rectangle."),Object(o.b)("p",null,"The four values are read in the following order:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"cam.setViewPort(x1,x2 , y1,y2);\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"X-axis")," from left to right")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Y-axis")," upwards from bottom to top"))),Object(o.b)("p",null,"Here are a few examples:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"cam1.setViewPort( 0.0f , 1.0f   ,   0.0f , 1.0f );\ncam2.setViewPort( 0.5f , 1.0f   ,   0.0f , 0.5f );\n")),Object(o.b)("p",null,"These viewport parameters are, (in this order) the left-right extend,\nand the bottom-top extend of a views's rectangle on the screen."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"0.0 , 1.0       1.0 , 1.0\n       +-----+-----+\n       |cam1       |\n       |           |\n       |     +-----+\n       |     |     |\n       |     |cam2 |\n       +-----+-----+\n0.0 , 0.0       1.0 , 0.0\n")),Object(o.b)("p",null,"Example: Cam2's rectangle is in the bottom right: It extends from mid\n(x1=0.5f) bottom (y1=0.0f), to right (x2=1.0f) mid (y2=0.5f)"),Object(o.b)("p",null,"::: {.important}\nIf you scale the views in a way so that the aspect ratio of a ViewPort\nis different than the window's aspect ratio, then the ViewPort appears\ndistorted. In these cases, you must recreate (not clone) the ViewPort's\ncam object with the right aspect ratio. For example:\n",Object(o.b)("inlineCode",{parentName:"p"},"Camera cam5 = new Camera(100,100);"),"\n:::"),Object(o.b)("h1",{id:"four-time-split-screen"},"Four-Time Split Screen"),Object(o.b)("p",null,"In this example, you create four views (2x2) with the same aspect ratio\nas the window, but each is only half the width and height."),Object(o.b)("h2",{id:"set-up-the-first-view"},"Set up the First View"),Object(o.b)("p",null,"You use the preconfigured Camera ",Object(o.b)("inlineCode",{parentName:"p"},"cam")," and ",Object(o.b)("inlineCode",{parentName:"p"},"viewPort")," from\n",Object(o.b)("inlineCode",{parentName:"p"},"SimpleApplication")," for the first view. It's in the bottom right."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"cam.setViewPort(.5f, 1f, 0f, 0.5f); // Resize the viewPort to half its size, bottom right.\n")),Object(o.b)("p",null,"Optionally, place the main camera in the scene and rotate it in its\nstart position."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"cam.setLocation(new Vector3f(3.32f, 4.48f, 4.28f));\ncam.setRotation(new Quaternion (-0.07f, 0.92f, -0.25f, -0.27f));\n")),Object(o.b)("h2",{id:"set-up-three-more-views"},"Set Up Three More Views"),Object(o.b)("p",null,"Here is the outline for how you create the three other cams and\nviewPorts (",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/renderer/TestMultiViews.java"}),"Full code sample is\nhere"),".)\nIn the code snippet, ",Object(o.b)("inlineCode",{parentName:"p"},"cam_n")," stand for ",Object(o.b)("inlineCode",{parentName:"p"},"cam_2")," - ",Object(o.b)("inlineCode",{parentName:"p"},"cam_4"),", respectively,\nsame for ",Object(o.b)("inlineCode",{parentName:"p"},"view_n"),"."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Clone the first cam to reuse its settings")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Resize and position the cam's viewPort with setViewPort().")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"(Optionally) Move the cameras in the scene and rotate them so they\nface what you want to see.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a ViewPort for each camera")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Reset the camera's enabled statuses")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Attach the Node to be displayed to this ViewPort.\\\nThe camera doesn't have to look at the rootNode, but that is the\nmost common use case."))),Object(o.b)("p",null,"Here is the abstract code sample for camera ",Object(o.b)("inlineCode",{parentName:"p"},"n"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'Camera cam_n    = cam.clone();\ncam_n.setViewPort(...); // resize the viewPort\ncam_n.setLocation(new Vector3f(...));\ncam_n.setRotation(new Quaternion(...));\n\nViewPort view_n = renderManager.createMainView("View of camera #n", cam_n);\nview_n.setClearEnabled(true);\nview_n.attachScene(rootNode);\nview_n.setBackgroundColor(ColorRGBA.Black);\n')),Object(o.b)("p",null,"To visualize what you do, use the following drawing of the viewport\npositions:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"0.0 , 1.0       1.0 , 1.0\n       +-----+-----+\n       |     |     |\n       |cam3 |cam4 |\n       +-----------+\n       |     |     |\n       |cam2 |cam1 |\n       +-----+-----+\n0.0 , 0.0       1.0 , 0.0\n")),Object(o.b)("p",null,"This are the lines of code that set the four cameras to create a\nfour-times split screen."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"cam1.setViewPort( 0.5f , 1.0f  ,  0.0f , 0.5f);\n...\ncam2.setViewPort( 0.0f , 0.5f  ,  0.0f , 0.5f);\n...\ncam3.setViewPort( 0.0f , 0.5f  ,  0.5f , 1.0f);\n...\ncam4.setViewPort( 0.5f , 1.0f  ,  0.5f , 1.0f);\n")),Object(o.b)("h1",{id:"picture-in-picture"},"Picture in Picture"),Object(o.b)("p",null,"The following code snippet sets up two views, one covers the whole\nscreen, and the second is a small view in the top center."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"       +-----+-----+\n       |   |cam|   |\n       |   | 2 |   |\n       +   +---+   +\n       |           |\n       |    cam    |\n       +-----+-----+\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'// Setup first full-window view\ncam.setViewPort(0f, 1f, 0f, 1f);\ncam.setLocation(new Vector3f(3.32f, 4.48f, 4.28f));\ncam.setRotation(new Quaternion(-0.07f, 0.92f, -0.25f, -0.27f));\n\n// Setup second, smaller PiP view\nCamera cam2 = cam.clone();\ncam2.setViewPort(.4f, .6f, 0.8f, 1f);\ncam2.setLocation(new Vector3f(-0.10f, 1.57f, 4.81f));\ncam2.setRotation(new Quaternion(0.00f, 0.99f, -0.04f, 0.02f));\nViewPort viewPort2 = renderManager.createMainView("PiP", cam2);\nviewPort2.setClearFlags(true, true, true);\nviewPort2.attachScene(rootNode);\n')),Object(o.b)("h1",{id:"viewport-settings"},"ViewPort Settings"),Object(o.b)("p",null,"You can customize the camera and the viewPort of each view individually.\nFor example, each view can have a different background color:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"viewPort.setBackgroundColor(ColorRGBA.Blue);\n")),Object(o.b)("p",null,"You have full control to determine which Nodes the camera can see! It\ncan see the full rootNode..."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"viewPort1.attachScene(rootNode);\n")),Object(o.b)("p",null,"... or you can give each camera a special node whose content it can see:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"viewPort2.attachScene(spookyGhostDetectorNode);\n")))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,f=b["".concat(c,".").concat(u)]||b[u]||m[u]||o;return n?r.a.createElement(f,i({ref:t},l,{components:n})):r.a.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{224:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return u}));var o=t(1),r=t(9),a=(t(0),t(441)),i={},l={id:"jme3/contributions/tonegodgui/customcontrols",title:"customcontrols",description:"Creating Custom Controls",source:"@site/docs/jme3/contributions/tonegodgui/customcontrols.md",permalink:"/wikidemo/docs/jme3/contributions/tonegodgui/customcontrols",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/contributions/tonegodgui/customcontrols.md"},s=[{value:"A Reusable Contextual Menu",id:"a-reusable-contextual-menu",children:[{value:"STEP 1: Adding the framework for the new class.",id:"step-1-adding-the-framework-for-the-new-class",children:[]},{value:"STEP 2: Adding a public method for building standard options",id:"step-2-adding-a-public-method-for-building-standard-options",children:[]}]},{value:"Adding Our New Control to the Screen",id:"adding-our-new-control-to-the-screen",children:[]},{value:"Extending the Window Class to Utilize Our Control",id:"extending-the-window-class-to-utilize-our-control",children:[{value:"STEP 1: Extend the window class and add a few methods",id:"step-1-extend-the-window-class-and-add-a-few-methods",children:[]}]}],c={rightToc:s};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"creating-custom-controls"},"Creating Custom Controls"),Object(a.b)("p",null,"In this section, I'm going to walk you through creating a custom control\nand hopefully pass along a few tip and help standardize how controls are\nbuilt. This way (if you feel so inclined) you can share your controls\nwith other and all will know exactly how to use your control."),Object(a.b)("h2",{id:"a-reusable-contextual-menu"},"A Reusable Contextual Menu"),Object(a.b)("p",null,"We're going to be building a reusable contextual right-click menu that\nwill:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"lock and unlock certain features of a standard window/panel")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Allow you to add/remove menu items specific to each window as it is\ncalled."))),Object(a.b)("h3",{id:"step-1-adding-the-framework-for-the-new-class"},"STEP 1: Adding the framework for the new class."),Object(a.b)("p",null,"First, we'll set up the class and add the three standard constructors.\nWe'll be using the default Menu style information. The class will remain\nabstract to leverage the existing callback method of the super class\nMenu."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'public abstract class ContextualMenu extends Menu {\n    public ContextualMenu(Screen screen, String UID, Vector2f position, boolean isScrollable) {\n        this(screen, UID, position,\n            screen.getStyle("Menu").getVector2f("defaultSize"),\n            screen.getStyle("Menu").getVector4f("resizeBorders"),\n            screen.getStyle("Menu").getString("defaultImg"),\n            isScrollable\n        );\n    }\n\n    public ContextualMenu(Screen screen, String UID, Vector2f position, Vector2f dimensions,\n            boolean isScrollable) {\n        this(screen, UID, position, dimensions,\n            screen.getStyle("Menu").getVector4f("resizeBorders"),\n            screen.getStyle("Menu").getString("defaultImg"),\n            isScrollable\n        );\n    }\n    public ContextualMenu(Screen screen, String UID, Vector2f position, Vector2f dimensions,\n            Vector4f resizeBorders, String defaultImg, boolean isScrollable) {\n        // Call the super class to construct our basic menu\n        super(screen, UID, position, dimensions, resizeBorders, defaultImg, false);\n    }\n}\n')),Object(a.b)("h3",{id:"step-2-adding-a-public-method-for-building-standard-options"},"STEP 2: Adding a public method for building standard options"),Object(a.b)("p",null,"This method will be used by calling windows to ensure the menu starts\nwith only the default options. If the particular calling window needs\nextra options, we can add them once this method is called."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'public void resetMenuOptions() {\n    // First, clear the current menuItems\n    getMenuItems().clear();\n    // Now add the default items\n    /** Parameters:\n      * String caption\n      * Object value - We\'ll store a String that gives us a hint as to the menu item function\n      * Menu subMenu - null, because there isn\'t one\n      * boolean isToggleItem - adds a CheckBox to the menu item\n      */\n    addMenuItem("Lock window position", "position", null, true);\n    addMenuItem("Lock window size", "dimensions", null, true);\n    addMenuItem("Lock current alpha setting", "alpha", null, true);\n}\n')),Object(a.b)("h2",{id:"adding-our-new-control-to-the-screen"},"Adding Our New Control to the Screen"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'// Create a single instance of the reusable contextual menu\nContextualMenu rcMenu = new ContextualMenu(screen, "rcMenu", Vector2f.ZERO) {\n    // Override the abstract event method\n    @Override\n    public void onMenuItemClicked(int index, Object value, boolean isToggled) {\n        // Now we will pass this through to our calling window.\n        getCallerElement().setOption((String)value, isToggled);\n    }\n};\nrcMenu.resetMenuOptions();\nscreen.add(rcMenu);\n')),Object(a.b)("h2",{id:"extending-the-window-class-to-utilize-our-control"},"Extending the Window Class to Utilize Our Control"),Object(a.b)("h3",{id:"step-1-extend-the-window-class-and-add-a-few-methods"},"STEP 1: Extend the window class and add a few methods"),Object(a.b)("p",null,"We need to entend the window class in order to add right-click event\nhandling and handle the setOption() method call from our ContextualMenu\nclass."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'public abstract class ContextualWindow extends Window implements MouseButtonListener {\n    // Add the 3 standard contructors from the Window class and rename them\n\n    // implement all abstract methods from the listener and add the following to right mouse button up:\n    @Override\n    public void onRightMouseReleased(MouseButtonEvent evt) {\n        ContextualMenu rcMenu = screen.getElementById("rcMenu");\n        // set the toggle state for each of the options\n        rcMenu.getMenuItem(0).setIsToggled(getIsMovable());\n        rcMenu.getMenuItem(1).setIsToggled(getIsResizable());\n        rcMenu.getMenuItem(2).setIsToggled(getIgnoreGlobalAlpha());\n        // Show the menu\n        rcMenu.showMenu(this, screen.getMouseXY().x, screen.getMouseXY().y);\n    }\n\n    // Add the setOption method tohandle menu item events\n    public void setOption(String value, boolean isToggled) {\n        if (value.equals("position")) {\n            setIsMovable(isToggled);\n        } else if (value.equals("dimensions")) {\n            setIsResizable(isToggled);\n        } else if (value.equals("alpha")) {\n            setIgnoreGlobalAlpha(isToggled);\n        }\n    }\n}\n')))}u.isMDXComponent=!0},441:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return g}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),u=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l({},n,{},e)),t},d=function(e){var n=u(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),p=o,g=d["".concat(i,".").concat(p)]||d[p]||b[p]||a;return t?r.a.createElement(g,l({ref:n},c,{components:t})):r.a.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);
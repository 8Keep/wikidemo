(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{236:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(1),o=n(9),s=(n(0),n(441)),i={},l={id:"jme3/advanced/physics",title:"physics",description:"A physics simulation is used in games and applications where objects are",source:"@site/docs/jme3/advanced/physics.md",permalink:"/wikidemo/docs/jme3/advanced/physics",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/physics.md"},c=[{value:"CollisionShape Code Samples",id:"collisionshape-code-samples",children:[]},{value:"Physics Control Code Samples",id:"physics-control-code-samples",children:[]},{value:"PhysicsSpace Code Samples",id:"physicsspace-code-samples",children:[]},{value:"Kinematic vs Dynamic vs Static",id:"kinematic-vs-dynamic-vs-static",children:[{value:"When Do I Use Kinematic Objects?",id:"when-do-i-use-kinematic-objects",children:[]}]}],r={rightToc:c};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},r,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"A physics simulation is used in games and applications where objects are\nexposed to physical forces: Think of games like pool billiard and car\nracing simulators. Massive objects are pulled by gravity, forces cause\nobjects to gain momentum, friction slows them down, solid objects\ncollide and bounce off one another, etc. Action and Adventure games also\nmake use of physics to implement solid obstacles, falling, and jumping."),Object(s.b)("p",null,"The jMonkeyEngine3 has built-in support for ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"http://jbullet.advel.cz"}),"jBullet\nPhysics")," (based on ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"http://bulletphysics.org"}),"Bullet\nPhysics"),") via the ",Object(s.b)("inlineCode",{parentName:"p"},"com.jme3.bullet")," package.\nThis article focuses mostly on the RigidBodyControl, but also introduces\nyou to others."),Object(s.b)("p",null,"If you are looking for info on how to respond to physics events such as\ncollisions, read about ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/physics_listeners"}),"Physics\nListeners"),"."),Object(s.b)("h1",{id:"technical-overview"},"Technical Overview"),Object(s.b)("p",null,'jME3 has a complete, slightly adapted but fully wrapped Bullet API that\nuses normal jME math objects (Vector3f, Quaternion etc) as input/output\ndata. All normal bullet objects like RigidBodies, Constraints (called\n"Joints in jME3) and the various collision shapes are available, all\nmesh formats can be converted from jME to bullet.'),Object(s.b)("p",null,"The PhysicsSpace object is the central object in bullet and all objects\nhave to be added to it so they are physics-enabled. You can create\nmultiple physics spaces as well to have multiple independent physics\nsimulations or to run simulations in the background that you step at a\ndifferent pace. You can also create a Bullet PhysicsSpace in jME3 with a\n",Object(s.b)("inlineCode",{parentName:"p"},"com.jme3.bullet.BulletAppState")," which runs a PhysicsSpace along the\nupdate loop, which is the easiest way to instantiate a physics space. It\ncan be run in a mode where it runs in parallel to rendering, yet syncs\nto the update loop so you can apply physics changes safely during the\nupdate() calls of Controls and SimpleApplication."),Object(s.b)("p",null,'The base bullet objects are also available as simple to use controls\nthat can be attached to spatials to directly control these by physics\nforces and influences. The RigidBodyControl for example includes a\nsimple constructor that automatically creates a hull collision shape or\na mesh collision shape based on the given input mass and the mesh of the\nspatial it is attached to. This makes enabling physics on a Geometry as\nsimple as "spatial.addControl(new RigidBodyControl(1));'),Object(s.b)("p",null,"Due to some differences in how bullet and jME handle the scene and other\nobjects relations there is some things to remember about the controls\nimplementation:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"The collision shape is not automatically updated when the spatial\nmesh changes"),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"You can update it by reattaching the control or by using the\nCollisionShapeFactory yourself."))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"In bullet the scale parameter is on the collision shape (which\nequals the mesh in jME3) and not on the RigidBody so you cannot\nscale a collision shape without scaling any other RigidBody with\nreference of it"),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"Note that you should share collision shapes in general and that\nj3o files loaded from file do that as well when instantiated\ntwice so this is something to consider."))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"Physics objects remain in the physics space when their spatials\nare detached from the scene graph!")),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"Use PhysicsSpace.remove(physicsObject) or simply\nphysicsControl.setEnabled(false); to remove them from the\nPhysicsSpace"))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"If you apply forces to the physics object in an update() call they\nmight not get applied because internally bullet still runs at 60fps\nwhile your app might run at 120."),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"You can use the PhysicsTickListener interface and register with\nthe physics space and use the preTick() method to be sure that\nyou actually apply the force in the right moment.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"Reading values from the physics objects in the update loop\nshould always yield correct values but they might not change\nover several fames due to the same reason.")))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"Reading or writing from the physics objects during the render phase\nis not recommended as this is when the physics space is stepped and\nwould cause data corruption. This is why the debug display does not\nwork properly in a threaded BulletAppState")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"Bullet always uses world coordinates, there is no such concept as\nnodes so the object will be moved into a world location with no\nregard to its parent spatial."),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"You can configure this behavior using the setApplyPhysicsLocal()\nmethod on physics controls but remember the physics space still\nruns in world coordinates so you can visually detach things that\nwill actually still collide in the physics space.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"To use the local applying to simulate e.g. the internal physics\nsystem of a train passing by, simply create another\nBulletAppState and add all models with physics controls in local\nmode to a node. When you move the node the physics will happen\nall the same but the objects will move along with the node."))))),Object(s.b)("p",null,"When you use this physics simulation, values correspond to the following\nunits:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"1 length unit (1.0f) equals 1 meter,")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"1 weight unit (1.0f) equals 1 kilogram,")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"most torque and rotation values are expressed in radians."))),Object(s.b)("p",null,"Bullet physics runs internally at 60fps by default. This rate is not\ndependent on the actual framerate and it does not lock the framerate at\n60fps. Instead, when the actual fps is higher than the physics framerate\nthe system will display interpolated positions for the physics objects.\nWhen the framerate is lower than the physics framerate, the physics\nspace will be stepped multiple times per frame to make up for the\nmissing calculations."),Object(s.b)("p",null,"Internally, the updating and syncing of the actual physics objects in\nthe BulletAppState happens in the following way:"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"collision callbacks (",Object(s.b)("inlineCode",{parentName:"p"},"BulletAppState.update()"),")")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"user update (",Object(s.b)("inlineCode",{parentName:"p"},"simpleUpdate")," in main loop, ",Object(s.b)("inlineCode",{parentName:"p"},"update()")," in Controls and\nAppStates)")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"physics to scenegraph syncing and applying (",Object(s.b)("inlineCode",{parentName:"p"},"updateLogicalState()"),")")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"stepping physics (before or in parallel to ",Object(s.b)("inlineCode",{parentName:"p"},"Application.render()"),")"))),Object(s.b)("h1",{id:"sample-code"},"Sample Code"),Object(s.b)("p",null,"Full code samples are here:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestBrickWall.java"}),"TestBrickWall.java"))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestQ3.java"}),"TestQ3.java"))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestSimplePhysics.java"}),"TestSimplePhysics.java"))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestWalkingChar.java"}),"TestWalkingChar.java")))),Object(s.b)("h1",{id:"physics-application"},"Physics Application"),Object(s.b)("p",null,"A short overview of how to write a jME application with Physics\ncapabilities:"),Object(s.b)("p",null,"Do the following once per application to gain access to the\n",Object(s.b)("inlineCode",{parentName:"p"},"physicsSpace")," object:"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Make your application extend ",Object(s.b)("inlineCode",{parentName:"p"},"com.jme3.app.SimpleApplication"),".")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Create a BulletAppState field:"),Object(s.b)("pre",{parentName:"li"},Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"private BulletAppState bulletAppState;\n"))),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Initialize your bulletAppState and attach it to the state manager:"),Object(s.b)("pre",{parentName:"li"},Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public void simpleInitApp() {\n    bulletAppState = new BulletAppState();\n    stateManager.attach(bulletAppState);\n")))),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"In your application, you can always access the ",Object(s.b)("inlineCode",{parentName:"p"},"BulletAppState")," via the\nApplicationStateManager:"),Object(s.b)("pre",{parentName:"div"},Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"BulletAppState bas = app.getStateManager().getState(BulletAppState.class);\n")))),Object(s.b)("p",null,"For each Spatial that you want to be physical:"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Create a CollisionShape.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Create the PhysicsControl from the CollisionShape and a mass value.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Add the PhysicsControl to its Spatial.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Add the PhysicsControl to the PhysicsSpace.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Attach the Spatial to the rootNode (as usual).")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"(Optional) Implement the ",Object(s.b)("inlineCode",{parentName:"p"},"PhysicsCollisionListener")," interface to\nrespond to ",Object(s.b)("inlineCode",{parentName:"p"},"PhysicsCollisionEvent"),"s."))),Object(s.b)("p",null,"Let's look at the details:"),Object(s.b)("h1",{id:"create-a-collisionshape"},"Create a CollisionShape"),Object(s.b)("p",null,"A CollisionShape is a simplified shape for which physics are easier to\ncalculate than for the true shape of the model. This simplication\napproach speeds up the simulation greatly."),Object(s.b)("p",null,"Before you can create a Physics Control, you must create a\nCollisionShape from the ",Object(s.b)("inlineCode",{parentName:"p"},"com.jme3.bullet.collision.shapes"),' package.\n(Read the tip under "Physics Controls Code Samples" on how to use\ndefault CollisionShapes for Boxes and Spheres.)'),Object(s.b)("p",null,"+-----------------+---------------------------+------------------------+\n| Non-Mesh        | Usage                     | Examples               |\n| CollisionShape  |                           |                        |\n+=================+===========================+========================+\n| BoxC            | Box-shaped behaviour,     | Oblong or cubic        |\n| ollisionShape() | does not roll.            | objects like bricks,   |\n|                 |                           | crates, furniture.     |\n+-----------------+---------------------------+------------------------+\n| SphereC         | Spherical behaviour, can  | Compact objects like   |\n| ollisionShape() | roll.                     | apples, soccer balls,  |\n|                 |                           | cannon balls, compact  |\n|                 |                           | spaceships.            |\n+-----------------+---------------------------+------------------------+\n| CylinderC       | Tube-shaped and           | Oblong objects like    |\n| ollisionShape() | disc-shaped behaviour,    | pillars.\\              |\n|                 | can roll on one side.     | Disc-shaped objects    |\n|                 |                           | like wheels, plates.   |\n+-----------------+---------------------------+------------------------+\n| CompoundC       | A CompoundCollisionShape  | A car with wheels (1   |\n| ollisionShape() | allows custom             | box + 4 cylinders),    |\n|                 | combinations of shapes.   | etc.                   |\n|                 | Use the ",Object(s.b)("inlineCode",{parentName:"p"},"addChildShape()")," |                        |\n|                 | method on the compound    |                        |\n|                 | object to add other       |                        |\n|                 | shapes to it and position |                        |\n|                 | them relative to one      |                        |\n|                 | another.                  |                        |\n+-----------------+---------------------------+------------------------+\n| CapsuleC        | A built-in compound shape | Persons, animals.      |\n| ollisionShape() | of a vertical cylinder    |                        |\n|                 | with one sphere at the    |                        |\n|                 | top and one sphere at the |                        |\n|                 | bottom. Typically used    |                        |\n|                 | with                      |                        |\n|                 | ","[CharacterCon             |                        |\n|                 | trols]","(../../jme3/advance |                        |\n|                 | d/walking_character): |                        |\n|                 | A cylinder-shaped body    |                        |\n|                 | does not get stuck at     |                        |\n|                 | corners and vertical      |                        |\n|                 | obstacles; the rounded    |                        |\n|                 | top and bottom do not get |                        |\n|                 | stuck on stair steps and  |                        |\n|                 | ground obstacles.         |                        |\n+-----------------+---------------------------+------------------------+\n| SimplexC        | A physical point, line,   | Guardrails             |\n| ollisionShape() | triangle, or rectangle    |                        |\n|                 | Shape, defined by one to  |                        |\n|                 | four points.              |                        |\n+-----------------+---------------------------+------------------------+\n| PlaneC          | A 2D plane. Very fast.    | Flat solid floor or    |\n| ollisionShape() |                           | wall.                  |\n+-----------------+---------------------------+------------------------+"),Object(s.b)("p",null,"All non-mesh CollisionShapes can be used for dynamic, kinematic, as well\nas static Spatials. (Code samples see below)"),Object(s.b)("p",null,"+-----------------+---------------------------+------------------------+\n| Mesh            | Usage                     | Examples               |\n| CollisionShapes |                           |                        |\n+=================+===========================+========================+\n| Mes             | A mesh-accurate shape for | A whole static game    |\n| hCollisionShape | static or kinematic       | level model.           |\n|                 | Spatials. Can have        |                        |\n|                 | complex shapes with       |                        |\n|                 | openings and appendages.\\ |                        |\n|                 | ",Object(s.b)("strong",{parentName:"p"},"Limitations:"),"          |                        |\n|                 | Collisions between two    |                        |\n|                 | mesh-accurate shapes      |                        |\n|                 | cannot be detected, only  |                        |\n|                 | non-mesh shapes can       |                        |\n|                 | collide with this shape.  |                        |\n|                 | This Shape does not work  |                        |\n|                 | with dynamic Spatials.    |                        |\n+-----------------+---------------------------+------------------------+\n| Hul             | A less accurate shape for | A dynamic 3D model.    |\n| lCollisionShape | dynamic Spatials that     |                        |\n|                 | cannot easily be          |                        |\n|                 | represented by a          |                        |\n|                 | CompoundShape.\\           |                        |\n|                 | ",Object(s.b)("strong",{parentName:"p"},"Limitations:")," The      |                        |\n|                 | shape is convex (behaves  |                        |\n|                 | as if you gift-wrapped    |                        |\n|                 | the object), i.e.         |                        |\n|                 | openings, appendages,     |                        |\n|                 | etc, are not individually |                        |\n|                 | represented.              |                        |\n+-----------------+---------------------------+------------------------+\n| GImpac          | A mesh-accurate shape for | Complex dynamic        |\n| tCollisionShape | dynamic Spatials. It uses | objects (like spiders) |\n|                 | <http://gi                | in Virtual Reality or  |\n|                 | mpact.sourceforge.net/>.\\ | scientific             |\n|                 | ",Object(s.b)("strong",{parentName:"p"},"Limitations:")," CPU      | simulations.           |\n|                 | intensive, use sparingly! |                        |\n|                 | We recommend using        |                        |\n|                 | HullCollisionShape (or    |                        |\n|                 | CompoundShape) instead to |                        |\n|                 | improve performance.      |                        |\n|                 | Collisions between two    |                        |\n|                 | mesh-accurate shapes      |                        |\n|                 | cannot be detected, only  |                        |\n|                 | non-mesh shapes can       |                        |\n|                 | collide with this shape.  |                        |\n+-----------------+---------------------------+------------------------+\n| Heightfiel      | A mesh-accurate shape     | Static terrains.       |\n| dCollisionShape | optimized for static      |                        |\n|                 | terrains. This shape is   |                        |\n|                 | much faster than other    |                        |\n|                 | mesh-accurate shapes.\\    |                        |\n|                 | ",Object(s.b)("strong",{parentName:"p"},"Limitations:")," Requires |                        |\n|                 | heightmap data.           |                        |\n|                 | Collisions between two    |                        |\n|                 | mesh-accurate shapes      |                        |\n|                 | cannot be detected, only  |                        |\n|                 | non-mesh shapes can       |                        |\n|                 | collide with this shape.  |                        |\n+-----------------+---------------------------+------------------------+"),Object(s.b)("p",null,"On a CollisionShape, you can apply a few properties"),Object(s.b)("p",null,"+--------------------+-------------------------------+-----------------+\n| CollisionShape     | Property                      | Examples        |\n| Method             |                               |                 |\n+====================+===============================+=================+\n| setScale(new       | You can change the scale of   | Scale a player  |\n| V                  | collisionshapes (whether it   | in the Y axis   |\n| ector3f(2f,2f,2f)) | be, Simple or Mesh). You      | by 2:\\          |\n|                    | cannot change the scale of a  | ",Object(s.b)("inlineCode",{parentName:"p"},"new Vect       |\n|                    | CompoundCollisionShape        | or3f(1f,2f,1f)")," |\n|                    | however. A sphere collision   |                 |\n|                    | shape, will change its radius |                 |\n|                    | based on the X component of   |                 |\n|                    | the vector passed in. You     |                 |\n|                    | must scale a collision shape  |                 |\n|                    | before attaching it to the    |                 |\n|                    | physicsSpace, or you must     |                 |\n|                    | readd it to the physicsSpace  |                 |\n|                    | each time the scale changes.  |                 |\n+--------------------+-------------------------------+-----------------+"),Object(s.b)("p",null,"The mesh-accurate shapes can use a CollisionShapeFactory as constructor\n(code samples see below)."),Object(s.b)("p",null,"::: {.important}\nPick the simplest and most applicable shape for the mesh for what you\nwant to do: If you give a box a sphere collision shape, it will roll; if\nyou give a ball a box collision shape, it will sit on a slope. If the\nshape is too big, the object will seem to float; if the shape is too\nsmall it will seem to sink into the ground. During development and\ndebugging, you can make collision shapes visible by adding the following\nline after the bulletAppState initialization:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// JME sdk 3.0.10  and earlier\nbulletAppState.getPhysicsSpace().enableDebug(assetManager);\n")),Object(s.b)("p",null,"or"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// newer versions\nbulletAppState.setDebugEnabled(true);\n")),Object(s.b)("p",null,":::"),Object(s.b)("h2",{id:"collisionshape-code-samples"},"CollisionShape Code Samples"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"One way of using a constructor and a Geometry's mesh for static\nSpatials:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"MeshCollisionShape level_shape =\n    new MeshCollisionShape(level_geo.getMesh());\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"One way of using a constructor and a Geometry's mesh for dynamic\nSpatials:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"HullCollisionShape shape =\n    new HullCollisionShape(katamari_geo.getMesh());\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Creating a dynamic compound shape for a whole Node and subnodes:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"CompoundCollisionShape myComplexShape =\n    CollisionShapeFactory.createMeshShape((Node) myComplexGeometry );\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Creating a dynamic HullCollisionShape shape (or\nCompoundCollisionShape with HullCollisionShapes as children) for a\nGeometry:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"CollisionShape shape =\n    CollisionShapeFactory.createDynamicMeshShape(spaceCraft);\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"An angular, non-mesh-accurate compound shape:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"CompoundCollisionShape boxShape =\n    CollisionShapeFactory.createBoxShape((Node) crate_geo);\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"A round, non-mesh-accurate compound shape:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"SphereCollisionShape sphereShape =\n    new SphereCollisionShape(1.0f);\n")),Object(s.b)("h1",{id:"create-physicscontrol"},"Create PhysicsControl"),Object(s.b)("p",null,"BulletPhysics are available in jME3 through PhysicsControls classes from\nthe com.jme3.bullet.control package. jME3's PhysicsControl classes\ndirectly extend BulletPhysics objects and are the recommended way to use\nphysics in a jME3 application. PhysicsControls are flexible and can be\nadded to any Spatial to make it act according to physical properties."),Object(s.b)("p",null,"+-------------+---------------------------+---------------------------+\n| Standard    | Usage                     | Examples                  |\n| Phys        |                           |                           |\n| icsControls |                           |                           |\n+=============+===========================+===========================+\n| Rigid       | The most commonly used    | Impacting projectiles,    |\n| BodyControl | PhysicsControl. You can   | moving obstacles like     |\n|             | use it for dynamic        | crates, rolling and       |\n|             | objects (solid objects    | bouncing balls,           |\n|             | that freely affected by   | elevators, flying aircaft |\n|             | collisions, forces, or    | or space ships.\\          |\n|             | gravity), for static      | Solid immobile floors,    |\n|             | objects (solid but not    | walls, static obstacles.  |\n|             | affected by any forces),  |                           |\n|             | or kinematic objects      |                           |\n|             | (remote-controlled solid  |                           |\n|             | objects).                 |                           |\n+-------------+---------------------------+---------------------------+\n| G           | Use for collision and     | A monster's \"aggro        |\n| hostControl | intersection detection    | radius, CharacterControl  |\n|             | between physical objects. | collisions, motion        |\n|             | A GhostControl itself is  | detectors, photo-electric |\n|             | ",Object(s.b)("em",{parentName:"p"},"non-solid")," and           | alarm sensors, poisonous  |\n|             | invisible. GhostControl   | or radioactive            |\n|             | moves with the Spatial it | perimeters, life-draining |\n|             | is attached to. Use       | ghosts, etc.              |\n|             | GhostControls to          |                           |\n|             | ","[implement custom game    |                           |\n|             | intera                    |                           |\n|             | ctions]","(../../jme3/advanc |                           |\n|             | ed/physics_listeners) |                           |\n|             | by adding it to a visible |                           |\n|             | Geometry.                 |                           |\n+-------------+---------------------------+---------------------------+"),Object(s.b)("p",null,"+-------------+---------------------------+---------------------------+\n| Special     | Usage                     | Examples                  |\n| Phys        |                           |                           |\n| icsControls |                           |                           |\n+=============+===========================+===========================+\n| Vehi        | Special Control used for  | Cars, tanks, hover        |\n| cleControl\\ | ",'[\\"terrestrial\\" vehicles | crafts, ships,            |\n| PhysicsV    | with suspension and       | motorcycles...            |\n| ehicleWheel | wheels]',"(../../jme         |                           |\n|             | 3/advanced/vehicles). |                           |\n+-------------+---------------------------+---------------------------+\n| Chara       | Special Control used for  | Upright walking persons,  |\n| cterControl | ","[Walking                  | animals, robots...        |\n|             | Chara                     |                           |\n|             | cter]","(../../jme3/advanced |                           |\n|             | /walking_character)s. |                           |\n+-------------+---------------------------+---------------------------+\n| BetterChara | Special Control used for  | Upright walking persons,  |\n| cterControl | ","[Walking                  | animals, robots. Replaces |\n|             | Chara                     | CharacterControl.         |\n|             | cter]","(../../jme3/advanced |                           |\n|             | /walking_character)s. |                           |\n+-------------+---------------------------+---------------------------+\n| Rag         | Special Control used for  | Falling persons, animals, |\n| DollControl | ",'[collapsing, flailing, or | robots, "Rag dolls        |\n|             | falling                   |                           |\n|             | characters]',"(../../j       |                           |\n|             | me3/advanced/ragdoll) |                           |\n+-------------+---------------------------+---------------------------+"),Object(s.b)("p",null,"Click the links for details on the special PhysicsControls. This article\nis about RigidBodyControl."),Object(s.b)("h2",{id:"physics-control-code-samples"},"Physics Control Code Samples"),Object(s.b)("p",null,"The most commonly used physics control is RigidBodyControl. The\nRigidBodyControl constructor takes up to two parameters: a collision\nshape and a mass (a float in kilograms). The mass parameter also\ndetermines whether the object is dynamic (movable) or static (fixed).\nFor a static object such as a floor or wall, specify zero mass."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"RigidBodyControl myThing_phys =\n    new RigidBodyControl( myThing_shape , 123.0f ); // dynamic\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"RigidBodyControl myDungeon_phys =\n    new RigidBodyControl( myDungeon_shape , 0.0f ); // static\n")),Object(s.b)("p",null,"::: {.important}\nIf you give your floor a non-zero mass, it will fall out of the scene!\n:::"),Object(s.b)("p",null,"The following creates a box Geometry with the correct default\nBoxCollisionShape:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'Box b = new Box(1,1,1);\nGeometry box_geo = new Geometry("Box", b);\nbox_geo.addControl(new RigidBodyControl( 1.0f )); // explicit non-zero mass, implicit BoxCollisionShape\n')),Object(s.b)("p",null,"The following creates a MeshCollisionShape for a whole loaded (static)\nscene:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"...\ngameLevel.addControl(new RigidBodyControl(0.0f)); // explicit zero mass, implicit MeshCollisionShape\n")),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"Spheres and Boxes automatically fall back on the correct default\nCollisionShape if you do not specify a CollisionShape in the\nRigidBodyControl constructor. Complex static objects can fall back on\nMeshCollisionShapes, unless it is a Node, in which case it will become a\nCompoundCollisionShape containing a MeshCollisionShape."))),Object(s.b)("h1",{id:"add-physicscontrol-to-spatial"},"Add PhysicsControl to Spatial"),Object(s.b)("p",null,"For each physical Spatial in the scene:"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Add a PhysicsControl to a Spatial."),Object(s.b)("pre",{parentName:"li"},Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"myThing_geo.addControl(myThing_phys);\n"))),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Remember to also attach the Spatial to the rootNode, as always!"))),Object(s.b)("h1",{id:"add-physicscontrol-to-physicsspace"},"Add PhysicsControl to PhysicsSpace"),Object(s.b)("p",null,"The PhysicsSpace is an object in BulletAppState that is like a rootNode\nfor Physics Controls."),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Just like you add the Geometry to the rootNode, you add its\nPhysicsControl to the PhysicsSpace.")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"bulletAppState.getPhysicsSpace().add(myThing_phys);\nrootNode.attachChild(myThing_geo);\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"When you remove a Geometry from the scene and detach it from the\nrootNode, also remove the PhysicsControl from the PhysicsSpace:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"bulletAppState.getPhysicsSpace().remove(myThing_phys);\nmyThing_geo.removeFromParent();\n")),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"You can either add the ",Object(s.b)("em",{parentName:"p"},"PhysicsControl")," to the PhysicsSpace, or add the\nPhysicsControl to the Geometry and then add the ",Object(s.b)("em",{parentName:"p"},"Geometry")," to the\nPhysicsSpace. jME3 understands both and the outcome is the same."))),Object(s.b)("h1",{id:"changing-the-scale-of-a-physicscontrol"},"Changing the Scale of a PhysicsControl"),Object(s.b)("p",null,"To change the scale of a PhysicsControl you must change the scale of the\ncollisionshape which belongs to it."),Object(s.b)("p",null,"MeshCollisionShapes can have a scale correctly set, but it only works\nwhen being constructed on a geometry (not a node).\nCompoundCollisionShapes cannot be scaled at this time(the type obtained\nwhen creating a CollisionShape from a Node i.e using imported models)."),Object(s.b)("p",null,"When you import a model from blender, it often comes as a Node (even if\nit only contains 1 mesh), which is by de-facto automatically converted\nto a CompoundCollisionShape. So when you try to scale this it won't\nwork! Below illustrates an example, of how to scale an imported model:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'// Doesn\'t scale\n// This modified version contains Node -> Geometry (name = "MonkeyHeadGeom")\nSpatial model = assetManager.loadModel("Models/MonkeyHead.j3o");\nmodel.addControl(new RigidBodyControl(0));\n// Won\'t work as this is now a CompoundCollisionShape containing a MeshCollisionShape\nmodel.getControl(RigidBodyControl.class).getCollisionShape().setScale(new Vector3f(2, 2, 2));\nbulletAppState.getPhysicsSpace().add(model);\n\n// Works fine\nSpatial model = assetManager.loadModel("Models/MonkeyHead.j3o"); // Same Model\n // IMPORTANT : You must navigate to the Geometry for this to work\nGeometry geom = ((Geometry) ((Node) model).getChild("MonkeyHeadGeom"));\ngeom.addControl(new RigidBodyControl(0));\n// Works great (scaling of a MeshCollisionShape)\ngeom.getControl(RigidBodyControl.class).getCollisionShape().setScale(new Vector3f(2, 2, 2));\nbulletAppState.getPhysicsSpace().add(geom);\n')),Object(s.b)("p",null,"With the corresponding output below:"),Object(s.b)("p",null,Object(s.b)("img",Object(a.a)({parentName:"p"},{src:"http://i.imgur.com/Josua.png",alt:"<http://i.imgur.com/fAXlF.png>"})),"\n",Object(s.b)("img",Object(a.a)({parentName:"p"},{src:"http://i.imgur.com/fAXlF.png",alt:"<http://i.imgur.com/fAXlF.png>"}))),Object(s.b)("h2",{id:"physicsspace-code-samples"},"PhysicsSpace Code Samples"),Object(s.b)("p",null,"The PhysicsSpace also manages global physics settings. Typically, you\ncan leave the defaults, and you don't need to change the following\nsettings, but it's good to know what they are for:"),Object(s.b)("p",null,"+-----------------------------------+-----------------------------------+\n| bulletAppState.getPhysicsSpace()  | Usage                             |\n| Method                            |                                   |\n+===================================+===================================+\n| setGravity(new Vector3f(0,        | Specifies the global gravity.     |\n| -9.81f, 0));                      |                                   |\n+-----------------------------------+-----------------------------------+\n| setAccuracy(1f/60f);              | Specifies physics accuracy. The   |\n|                                   | higher the accuracy, the slower   |\n|                                   | the game. Decrease value if       |\n|                                   | objects are passing through one   |\n|                                   | another, or bounce oddly. (e.g.   |\n|                                   | Change value from 1f/60f to       |\n|                                   | something like 1f/80f.)           |\n+-----------------------------------+-----------------------------------+\n| setMaxSubSteps(4);                | Compensates low FPS: Specifies    |\n|                                   | the maximum amount of extra steps |\n|                                   | that will be used to step the     |\n|                                   | physics when the game fps is      |\n|                                   | below the physics fps. This       |\n|                                   | maintains determinism in physics  |\n|                                   | in slow (low-fps) games. For      |\n|                                   | example a maximum number of 2 can |\n|                                   | compensate for framerates as low  |\n|                                   | as 30 fps (physics has a default  |\n|                                   | accuracy of 60 fps). Note that    |\n|                                   | setting this value too high can   |\n|                                   | make the physics drive down its   |\n|                                   | own fps in case its overloaded.   |\n+-----------------------------------+-----------------------------------+\n| setWorldMax(new Vector3f(10000f,  | Specifies the size of the physics |\n| 10000f, 10000f));\\                | space as two opposite corners     |\n| setWorldMin(new Vector3f(-10000f, | (only applies to AXIS","_","SWEEP      |\n| -10000f, -10000f));               | broadphase).                      |\n+-----------------------------------+-----------------------------------+"),Object(s.b)("h1",{id:"specify-physical-properties"},"Specify Physical Properties"),Object(s.b)("p",null,"After you have registered, attached, and added everything, you can\nadjust physical properties or apply forces."),Object(s.b)("p",null,"On a RigidBodyControl, you can set the following physical properties."),Object(s.b)("p",null,"+----------------------+----------------------+-----------------------+\n| RigidBodyControl     | Property             | Examples              |\n| Method               |                      |                       |\n+======================+======================+=======================+\n| setGravity(new       | You can change the   | For planet earth:\\    |\n| Vec                  | gravity of           | ",Object(s.b)("inlineCode",{parentName:"p"},"new Ve               |\n| tor3f(0f,-9.81f,0f)) | individual physics   | ctor3f(0f,-9.81f,0f)")," |\n|                      | objects after they   |                       |\n|                      | were added to the    |                       |\n|                      | PhysicsSpace.        |                       |\n|                      | Gravity is a vector  |                       |\n|                      | pointing from this   |                       |\n|                      | Spatial towards the  |                       |\n|                      | source of gravity.   |                       |\n|                      | The longer the       |                       |\n|                      | vector, the stronger |                       |\n|                      | is gravity.\\         |                       |\n|                      | If gravity is the    |                       |\n|                      | same absolute        |                       |\n|                      | direction for all    |                       |\n|                      | objects (e.g. on a   |                       |\n|                      | planet surface), set |                       |\n|                      | this vector globally |                       |\n|                      | on the PhysicsSpace  |                       |\n|                      | object and not       |                       |\n|                      | individually.\\       |                       |\n|                      | If the center of     |                       |\n|                      | gravity is relative  |                       |\n|                      | (e.g. towards a      |                       |\n|                      | black hole) then     |                       |\n|                      | setGravity() on each |                       |\n|                      | Spatial to           |                       |\n|                      | constantly adjust    |                       |\n|                      | the gravity vectors  |                       |\n|                      | at each tick of      |                       |\n|                      | their update()       |                       |\n|                      | loops.               |                       |\n+----------------------+----------------------+-----------------------+\n| setMass(1f)          | Sets the mass in     | Person: 60f, ball:    |\n|                      | kilogram. Dynamic    | 1.0f\\                 |\n|                      | objects have masses  | Floor: 0.0f (!)       |\n|                      | ",">"," 0.0f. Heavy       |                       |\n|                      | dynamic objects need |                       |\n|                      | more force to be     |                       |\n|                      | moved and light ones |                       |\n|                      | move with small      |                       |\n|                      | amounts of force.\\   |                       |\n|                      | Static immobile      |                       |\n|                      | objects (walls,      |                       |\n|                      | floors, including    |                       |\n|                      | buildings and        |                       |\n|                      | terrains) must have  |                       |\n|                      | a mass of zero!      |                       |\n+----------------------+----------------------+-----------------------+\n| setFriction(1f)      | Friction.\\           | Ice, slides: 0.0f\\    |\n|                      | Slippery objects     | Soil, concrete, rock: |\n|                      | have low friction.   | 1.0f                  |\n|                      | The ground has high  |                       |\n|                      | friction.            |                       |\n+----------------------+----------------------+-----------------------+\n| setRestitution(0.0f) | Bounciness. By       | Brick: 0.0f\\          |\n|                      | default objects are  | Rubber ball: 1.0f     |\n|                      | not bouncy (0.0f).   |                       |\n|                      | For a bouncy rubber  |                       |\n|                      | object set this ",">","   |                       |\n|                      | 0.0f.\\               |                       |\n|                      | Both the object and  |                       |\n|                      | the surface must     |                       |\n|                      | have non-zero        |                       |\n|                      | restitution for      |                       |\n|                      | bouncing to occur.\\  |                       |\n|                      | This setting has an  |                       |\n|                      | impact on            |                       |\n|                      | performance, so use  |                       |\n|                      | it sparingly.        |                       |\n+----------------------+----------------------+-----------------------+\n| set                  | The amount of motion | around 0.5 to 1 ","*","    |\n| CcdMotionThreshold() | in 1 physics tick to | object diameter       |\n|                      | trigger the          |                       |\n|                      | continuous motion    |                       |\n|                      | detection in moving  |                       |\n|                      | objects that push    |                       |\n|                      | one another. Rarely  |                       |\n|                      | used, but necessary  |                       |\n|                      | if your moving       |                       |\n|                      | objects get stuck or |                       |\n|                      | roll through one     |                       |\n|                      | another.             |                       |\n+----------------------+----------------------+-----------------------+"),Object(s.b)("p",null,"On a RigidBodyControl, you can apply the following physical forces:"),Object(s.b)("p",null,"+-----------------------------------+-----------------------------------+\n| RigidBodyControl Method           | Motion                            |\n+===================================+===================================+\n| setPhysicsLocation()              | Positions the objects. Do not use |\n|                                   | setLocalTranslation() for         |\n|                                   | physical objects. Important: Make |\n|                                   | certain not to make               |\n|                                   | CollisionShapes overlap when      |\n|                                   | positioning them.                 |\n+-----------------------------------+-----------------------------------+\n| setPhysicsRotation()              | Rotates the object. Do not use    |\n|                                   | setLocalRotate() for physical     |\n|                                   | objects.                          |\n+-----------------------------------+-----------------------------------+\n| setKinematic(true)                | By default, RigidBodyControls are |\n|                                   | dynamic (kinematic=false) and are |\n|                                   | affected by forces. If you set    |\n|                                   | kinematic=true, the object is no  |\n|                                   | longer affected by forces, but it |\n|                                   | still affects others. A kinematic |\n|                                   | is solid, and must have a mass.\\  |\n|                                   | (See detailed explanation below.) |\n+-----------------------------------+-----------------------------------+"),Object(s.b)("h2",{id:"kinematic-vs-dynamic-vs-static"},"Kinematic vs Dynamic vs Static"),Object(s.b)("p",null,"All physical objects..."),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"must not overlap.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"can detect collisions and report several values about the impact.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"can respond to collisions dynamically, or statically, or\nkinematically."))),Object(s.b)("p",null,'+-----------------+-----------------+-----------------+-----------------+\n| Property        | Static          | Kinematic       | Dynamic         |\n+=================+=================+=================+=================+\n| Examples        | Immobile        | Re              | Interactive     |\n|                 | obstacles:      | mote-controlled | objects:        |\n|                 | Floors, walls,  | solid objects:  | Rolling balls,  |\n|                 | buildings, ...  | Airships,       | movable crates, |\n|                 |                 | meteorites,     | falling         |\n|                 |                 | elevators,      | pillars, zero-g |\n|                 |                 | doors;          | space ship...   |\n|                 |                 | networked or    |                 |\n|                 |                 | re              |                 |\n|                 |                 | mote-controlled |                 |\n|                 |                 | NPCs; invisible |                 |\n|                 |                 | "airhooks for   |                 |\n|                 |                 | hinges and      |                 |\n|                 |                 | joints.         |                 |\n+-----------------+-----------------+-----------------+-----------------+\n| Does it have a  | no, 0.0f        | yes',Object(s.b)("sup",Object(a.a)({parentName:"p"},{id:"fnref-1"}),Object(s.b)("a",Object(a.a)({parentName:"sup"},{href:"#fn-1",className:"footnote-ref"}),"1")),", ",">","0.0f | yes, ",">","0.0f     |\n| mass?           |                 |                 |                 |\n+-----------------+-----------------+-----------------+-----------------+\n| How does it     | never           | setLoca         | setLi           |\n| move?           |                 | lTranslation(); | nearVelocity(); |\n|                 |                 |                 | applyForce();\\  |\n|                 |                 |                 | setW            |\n|                 |                 |                 | alkDirection(); |\n|                 |                 |                 | for             |\n|                 |                 |                 | C               |\n|                 |                 |                 | haracterControl |\n+-----------------+-----------------+-----------------+-----------------+\n| How to place in | setPhys         | setLocal        | setPhys         |\n| scene?          | icsLocation();\\ | Translation();\\ | icsLocation();\\ |\n|                 | setPhy          | setL            | setPhy          |\n|                 | sicsRotation(); | ocalRotation(); | sicsRotation(); |\n+-----------------+-----------------+-----------------+-----------------+\n| Can it move and | no              | yes             | yes             |\n| push others?    |                 |                 |                 |\n+-----------------+-----------------+-----------------+-----------------+\n| Is is affected  | no              | no              | yes             |\n| by forces?\\     |                 |                 |                 |\n| (Falls when it  |                 |                 |                 |\n| mid-air? Can be |                 |                 |                 |\n| pushed by       |                 |                 |                 |\n| others?)        |                 |                 |                 |\n+-----------------+-----------------+-----------------+-----------------+\n| How to activate | setMass(0f);\\   | setMass(1f);\\   | setMass(1f);\\   |\n| this behaviour? | setKi           | setK            | setKi           |\n|                 | nematic(false); | inematic(true); | nematic(false); |\n+-----------------+-----------------+-----------------+-----------------+"),Object(s.b)("h3",{id:"when-do-i-use-kinematic-objects"},"When Do I Use Kinematic Objects?"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},'Kinematics are solid and characters can "stand on them.')),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"When they collide, Kinematics push dynamic objects, but a dynamic\nobject never pushes a Kinematic.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},'You can hang kinematics up "in mid-air and attach other\nPhysicsControls to them using ',Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/hinges_and_joints"}),"hinges and\njoints"),'. Picture them as\n"air hooks for flying aircraft carriers, floating islands in the\nclouds, suspension bridges, swings, chains...')),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},'You can use Kinematics to create mobile remote-controlled physical\nobjects, such as moving elevator platforms, flying blimps/airships.\nYou have full control how Kinematics move, they never "fall or\n"topple over.'))),Object(s.b)("p",null,"::: {.important}\nThe position of a kinematic RigidBodyControl is updated automatically\ndepending on its spatial's translation. You move Spatials with a\nkinematic RigidBodyControl programmatically, that means you write\ntranslation and rotation code in the update loop. You describe the\nmotion of kinematic objects either by using methods such as\n",Object(s.b)("inlineCode",{parentName:"p"},"setLocalTranslation()")," or ",Object(s.b)("inlineCode",{parentName:"p"},"move()"),", or by using a\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/motionpath"}),"MotionPath"),".\n:::"),Object(s.b)("h1",{id:"forces-moving-dynamic-objects"},"Forces: Moving Dynamic Objects"),Object(s.b)("p",null,"Use the following methods to move dynamic physical objects."),Object(s.b)("p",null,"+-----------------------------------+-----------------------------------+\n| PhysicsControl Method             | Motion                            |\n+===================================+===================================+\n| setLinearVelocity(new             | Set the linear speed of this      |\n| Vector3f(0f,0f,1f))               | object.                           |\n+-----------------------------------+-----------------------------------+\n| setAngularVelocity(new            | Set the rotational speed of the   |\n| Vector3f(0f,0f,1f))               | object; the x, y and z component  |\n|                                   | are the speed of rotation around  |\n|                                   | that axis.                        |\n+-----------------------------------+-----------------------------------+\n| applyCentralForce(...)            | Move (push) the object once with  |\n|                                   | a certain moment, expressed as a  |\n|                                   | Vector3f.                         |\n+-----------------------------------+-----------------------------------+\n| applyForce(...)                   | Move (push) the object once with  |\n|                                   | a certain moment, expressed as a  |\n|                                   | Vector3f. Optionally, you can     |\n|                                   | specify where on the object the   |\n|                                   | pushing force hits.               |\n+-----------------------------------+-----------------------------------+\n| applyTorque(...)                  | Rotate (twist) the object once    |\n|                                   | around its axes, expressed as a   |\n|                                   | Vector3f.                         |\n+-----------------------------------+-----------------------------------+\n| applyImpulse(...)                 | An idealised change of momentum.  |\n|                                   | This is the kind of push that you |\n|                                   | would use on a pool billiard      |\n|                                   | ball.                             |\n+-----------------------------------+-----------------------------------+\n| applyTorqueImpulse(...)           | An idealised change of momentum.  |\n|                                   | This is the kind of push that you |\n|                                   | would use on a pool billiard      |\n|                                   | ball.                             |\n+-----------------------------------+-----------------------------------+\n| clearForces()                     | Cancels out all forces (force,    |\n|                                   | torque) etc and stops the motion. |\n+-----------------------------------+-----------------------------------+"),Object(s.b)("p",null,'::: {.important}\nIt is technically possible to position PhysicsControls using\nsetLocalTranslation(), e.g. to place them in their start position in the\nscene. However you must be very careful not to cause an "impossible\nstate where one physical object overlaps with another! Within the game,\nyou typically use the setters shown here exclusively.\n:::'),Object(s.b)("p",null,"PhysicsControls also support the following advanced features:"),Object(s.b)("p",null,"+-----------------------------------+-----------------------------------+\n| PhysicsControl Method             | Property                          |\n+===================================+===================================+\n| setCollisionShape(collisionShape) | Changes the collision shape after |\n|                                   | creation.                         |\n+-----------------------------------+-----------------------------------+\n| setCollideWithGroups()\\           | Collision Groups are integer bit  |\n| setCollisionGroup()\\              | masks -- enums are available in   |\n| addCollid                         | the CollisionObject. All physics  |\n| eWithGroup(COLLISION","_","GROUP","_","01)\\ | objects are by default in         |\n| removeColli                       | COLLISION","_","GROUP","_","01. Two objects |\n| deWithGroup(COLLISION","_","GROUP","_",'01) | collide when the                  |\n|                                   | collideWithGroups set of one      |\n|                                   | contains the Collision Group of   |\n|                                   | the other. Use this to improve    |\n|                                   | performance by grouping objects   |\n|                                   | that will never collide in        |\n|                                   | different groups (the the engine  |\n|                                   | saves times because it does not   |\n|                                   | need to check on them).           |\n+-----------------------------------+-----------------------------------+\n| setDamping(float, float)          | The first value is the linear     |\n|                                   | threshold and the second the      |\n|                                   | angular. This simulates dampening |\n|                                   | of forces, for example for        |\n|                                   | underwater scenes.                |\n+-----------------------------------+-----------------------------------+\n| setAngularFactor(1f)              | Set the amount of rotation that   |\n|                                   | will be applied. A value of zero  |\n|                                   | will cancel all rotational force  |\n|                                   | outcome. (?)                      |\n+-----------------------------------+-----------------------------------+\n| setSleepingThreshold(float,float) | Sets the sleeping thresholds      |\n|                                   | which define when the object gets |\n|                                   | deactivated to save resources.    |\n|                                   | The first value is the linear     |\n|                                   | threshold and the second the      |\n|                                   | angular. Low values keep the      |\n|                                   | object active when it barely      |\n|                                   | moves (slow precise performance), |\n|                                   | high values put the object to     |\n|                                   | sleep immediately (imprecise fast |\n|                                   | performance). (?)                 |\n+-----------------------------------+-----------------------------------+\n| setCcdMotionThreshold(0f)         | Sets the amount of motion that    |\n|                                   | has to happen in one physics tick |\n|                                   | to trigger the continuous motion  |\n|                                   | detection in moving objects that  |\n|                                   | push one another. This avoids the |\n|                                   | problem of fast objects moving    |\n|                                   | through other objects. Set to     |\n|                                   | zero to disable (default).        |\n+-----------------------------------+-----------------------------------+\n| setCcdSweptSphereRadius(.5f)      | Bullet does not use the full      |\n|                                   | collision shape for continuous    |\n|                                   | collision detection, instead it   |\n|                                   | uses a "swept sphere shape to     |\n|                                   | approximate a motion, which can   |\n|                                   | be imprecise and cause strange    |\n|                                   | behaviors such as objects passing |\n|                                   | through one another or getting    |\n|                                   | stuck. Only relevant for fast     |\n|                                   | moving dynamic bodies.            |\n+-----------------------------------+-----------------------------------+'),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"You can ",Object(s.b)("inlineCode",{parentName:"p"},"setApplyPhysicsLocal(true)")," for an object to make it move\nrelatively to its local physics space. You would do that if you need a\nphysics space that moves with a node (e.g. a spaceship with artificial\ngravity surrounded by zero-g space). By default, it's set to false, and\nall movement is relative to the world."))),Object(s.b)("h1",{id:"best-practices"},"Best Practices"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"Multiple Objects Too Slow?"),' Do not overuse PhysicsControls.\nAlthough PhysicsControls are put to "sleep" when they are not\nmoving, creating a world solely out of dynamic physics objects will\nquickly bring you to the limits of your computer\'s capabilities.\\\n',Object(s.b)("strong",{parentName:"p"},"Solution:")," Improve performance by replacing some physical\nSpatials with non-physical Spatials. Use the non-physical ones for\nnon-solid things for which you do not need to detect collisions --\nfoliage, plants, effects, ghosts, all remote or unreachable objects.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"Complex Shape Too Slow?")," Breaking the level into manageable\npieces helps the engine improve performance: The less CPU-intensive\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Sweep_and_prune"}),"broadphase")," filters\nout parts of the scene that are out of reach. It only calculates the\ncollisions for objects that are actually close to the action.\\\n",Object(s.b)("strong",{parentName:"p"},"Solution:")," A huge static city or terrain model should never be\nloaded as one huge mesh. Divide the scene into multiple physics\nobjects, with each its own CollisionShape. Choose the most simple\nCollisionShape possible; use mesh-accurate shapes only for the few\ncases where precision is more important than speed. For example, you\ncan use the very fast ",Object(s.b)("inlineCode",{parentName:"p"},"PlaneCollisionShape")," for flat streets, floors\nand the outside edge of the scene, if you keep these pieces\nseparate.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"Eject?"),' If you have physical nodes jittering wildy and being\nejected "for no apparent reason, it means you have created an\nimpossible state -- solid objects overlapping. This can happen when\nyou position solid spatials too close to other solid spatials, e.g.\nwhen moving them with setLocalTranslation().\\\n',Object(s.b)("strong",{parentName:"p"},"Solution:")," Use the debug mode to make CollisionShapes visible and\nverify that CollisionShapes do not overlap."))),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"bulletAppState.getPhysicsSpace().enableDebug(assetManager);\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"Buggy?")," If you get weird behaviour, such as physical nodes\npassing through one another, or getting stuck for no reason.\\\n",Object(s.b)("strong",{parentName:"p"},"Solution:")," Look at the physics space accessors and change the\nacuracy and other parameters.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"Need more interactivity?")," You can actively ",Object(s.b)("em",{parentName:"p"},"control")," a physical\ngame by triggering forces. You may also want to be able ",Object(s.b)("em",{parentName:"p"},"respond")," to\ncollisions, e.g. by substracting health, awarding points, or by\nplaying a sound.\\\n",Object(s.b)("strong",{parentName:"p"},"Solution:")," To specify how the game responds to collisions, you\nuse ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/physics_listeners"}),"Physics Listeners"),"."))),Object(s.b)("div",{className:"footnotes"},Object(s.b)("hr",{parentName:"div"}),Object(s.b)("ol",{parentName:"div"},Object(s.b)("li",Object(a.a)({parentName:"ol"},{id:"fn-1"}),"Inertia is calculated for kinematic objects, and you need mass to\ndo that.",Object(s.b)("a",Object(a.a)({parentName:"li"},{href:"#fnref-1",className:"footnote-backref"}),"\u21a9")))))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return d}));var a=n(0),o=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var r=o.a.createContext({}),p=function(e){var t=o.a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},h=function(e){var t=p(e.components);return o.a.createElement(r.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,r=c(e,["components","mdxType","originalType","parentName"]),h=p(n),m=a,d=h["".concat(i,".").concat(m)]||h[m]||b[m]||s;return n?o.a.createElement(d,l({ref:t},r,{components:n})):o.a.createElement(d,l({ref:t},r))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var r=2;r<s;r++)i[r]=n[r];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
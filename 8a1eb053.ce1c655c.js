(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{297:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return l})),t.d(a,"metadata",(function(){return p})),t.d(a,"rightToc",(function(){return o})),t.d(a,"default",(function(){return b}));var n=t(1),r=t(9),i=(t(0),t(441)),l={},p={id:"jme3/advanced/terrain",title:"terrain",description:"Overview",source:"@site/docs/jme3/advanced/terrain.md",permalink:"/wikidemo/docs/jme3/advanced/terrain",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/terrain.md"},o=[{value:"Current Features:",id:"current-features",children:[]},{value:"Planned Features:",id:"planned-features",children:[]}],s={rightToc:o};function b(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"overview"},"Overview"),Object(i.b)("p",null,"TerraMonkey is a GeoMipMapping quad tree of terrain tiles that supports\nreal time editing and texture splatting. That's a mouth full! Lets look\nat each part:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"GeoMipMapping:")," a method of changing the level of detail (LOD) of\ngeometry tiles based on how far away they are from the camera.\nBetween the edges of two tiles, it will seam those edges together so\nyou don't get gaps or holes. For an in-depth read on how it works,\nread ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.flipcode.com/archives/article_geomipmaps.pdf"}),"Fast Terrain Rendering Using Geometrical\nMipMapping"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Quad Tree:")," The entire terrain structure is made up of\nTerrainPatches (these hold the actual meshes) as leaves in a quad\ntree (TerrainQuad). TerrainQuads are subdivided by 4 until they\nreach minimum size, then a TerrainPatch is created, and that is\nwhere the actual geometry mesh lives. This allows for fast culling\nof the terrain that you can't see.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Splatting:")," The ability to paint multiple textures onto your\nterrain. What differs here from JME2 is that this is all done in a\nshader, no more render passes. So it performs much faster.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Real-time editing:")," ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/terrain_editor"}),"TerraMonkey terrains are editable in\njMonkeyEngine SDK"),", and you are able\nto modify them in real time, for example by raising and lowering the\nterrain."))),Object(i.b)("h2",{id:"current-features"},"Current Features:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Support for 16 splat textures. You use a custom combination of\nDiffuse, Normal, Specular, and Glow Maps.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"GeoMipMapping: LodControl optimizes the level of detail")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Terrain can be randomized or generated from a heightmap")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"jMonkeyEngine SDK terrain editor")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Streaming ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/endless_terraingrid"}),"terrain\ngrid")," (i.e. infinite\nterrain)"))),Object(i.b)("h2",{id:"planned-features"},"Planned Features:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Hydraulic erosion and procedural texture generation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Holes: caves, cliffs"))),Object(i.b)("h1",{id:"sample-code"},"Sample Code"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/terrain/TerrainTest.java"}),"TerrainTest.java"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/terrain/TerrainTestAdvanced.java"}),"TerrainTestAdvanced.java"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/terrain/TerrainTestCollision.java"}),"TerrainTestCollision.java"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/terrain/TerrainTestModifyHeight.java"}),"TerrainTestModifyHeight.java"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/terrain/TerrainTestReadWrite.java"}),"TerrainTestReadWrite.java")))),Object(i.b)("h1",{id:"geo-mip-mapping"},"Geo Mip Mapping"),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/jme3/advanced/terrain-lod-high-medium-low.png",alt:"The wiremesh of a terrain with visible differences in levels of detail\n(LOD)"}))),Object(i.b)("p",null,"You have seen GeoMipMapping implemented in games before. This is where\nthe farther away terrain has fewer polygons, and as you move closer,\nmore polygons fill in. The whole terrain is divided into a grid of\npatches, and each one has its own level of detail (LOD). The\nGeoMipMapping algorithm looks at each patch, and its neighbours, to\ndetermine how to render the geometry. It will seam the edges between two\npatches with different LOD."),Object(i.b)("p",null,'GeoMipMapping often leads to "popping where you see the terrain switch\nfrom one LOD to another. TerraMonkey has been designed so you can swap\nout different LOD calculation algorithms based on what will look best\nfor your game. You can do this with the LodCalculator interface.'),Object(i.b)("p",null,"GeoMipMapping in TerraMonkey has been split into several parts: the\nterrain quad tree, and the LODGeomap. The geomap deals with the actual\nLOD and seaming algorithm. So if you want a different data structure for\nyour terrain system, you can re-use this piece of code. The quad tree\n(TerrainQuad and TerrainPatch) provide a means to organize the\nLODGeomaps, notify them of their neighbour's LOD change, and to update\nthe geometry when the LOD does change. To change the LOD it does this by\nchanging the index buffer of the triangle strip, so the whole geometry\ndoesn't have to be re-loaded onto the video card. If you are eager for\nmore detail on how GeoMipMapping works read: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.flipcode.com/archives/article_geomipmaps.pdf"}),"Fast Terrain Rendering\nUsing Geometrical\nMipMapping"),"."),Object(i.b)("h1",{id:"terrain-quad-tree"},"Terrain Quad Tree"),Object(i.b)("p",null,"TerraMonkey is a quad tree. Each node is a TerrainQuad, and each leaf is\na TerrainPatch. A TerrainQuad has either 4 child TerrainQuads, or 4\nchild TerrainPatches. The TerrainPatch holds the actual mesh geometry.\nThis structure is almost exactly the same as JME2's TerrainPage system.\nExcept now each leaf has a reference to its neighbours, so it doesn't\never have to traverse the tree to get them."),Object(i.b)("h1",{id:"texture-splatting"},"Texture Splatting"),Object(i.b)("p",null,'When you "slap" a texture on a mesh, the whole mesh looks the same. For\nbig meshes (such as terrains) that is undesirable because it looks very\nboring (your whole landscape would be all rock, or all grass, or all\nsand). Texture Splatting is a technique that lets you "paint several\ntextures into one combined texure. Each of the splat textures has an\nopacity value so you can define where it is visible in the final overall\ntexture.'),Object(i.b)("p",null,"The default material for TerraMonkey is TerrainLighting.j3md. This\nmaterial combines several texture maps to produce the final custom\ntexture. Remember, Diffuse Maps are the main textures that define the\nlook; optionally, each Diffuse Map can be enhanced with a Normal Map;\nAlpha Maps describe the opacity of each Diffuse Map used (one color\n--red, green, blue, or alpha-- stands for one Diffuse Map's opacity);\nGlow and Specular Maps define optional effects."),Object(i.b)("p",null,"::: {.important}\nWe recommend to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/terrain_editor"}),"create and edit Splat Textures for terrains visually in\nthe jMonkeyEngine SDK"),", and not do it\nmanually. If you are simply curious about how the SDK's terrain texture\nplugin works, or if you indeed want to generate materials manually, then\nread on for the implementation details.\n:::"),Object(i.b)("p",null,"Here are the names of TerrainLighting.j3md's material properties:"),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/jme3/beginner/mountains512.png",alt:"A heightmap encodes the topological highs and lows of the\nterrain"}))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"1-3 Alpha Maps"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"AlphaMap"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"AlphaMap_1"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"AlphaMap_2"))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"12 Diffuse and/or Normal Maps (either in 6 pairs, or 12 stand-alone\nDiffuse Maps)"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap"),", ",Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_0_scale"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NormalMap"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_1"),", ",Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_1_scale"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NormalMap_1"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_2"),", ",Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_2_scale"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NormalMap_2"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_3"),", ",Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_3_scale"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NormalMap_3")))))),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/jme3/beginner/alphamap.png",alt:"An alpha map can describe where 4 textures are painted onto the\nterrain."}))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_4"),", ",Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_4_scale"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NormalMap_4"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"...")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_11"),", ",Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_11_scale"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NormalMap_11")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Light maps"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"GlowMap"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"SpecularMap")))),Object(i.b)("p",null,"::: {.note}\n",Object(i.b)("inlineCode",{parentName:"p"},"DiffuseMap_0_scale")," is a float value (e.g. 1.0f); you must specify one\nscale per Diffuse Map.\n:::"),Object(i.b)("p",null,"OpenGL supports a maximum of 16 ",Object(i.b)("em",{parentName:"p"},"samplers")," in any given shader. This\nmeans you can only use a subset of material properties at the same time\nif you use the terrain's default lighting shader (TerrainLighting.j3md)!"),Object(i.b)("p",null,"Adhere to the following constraints:"),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/jme3/beginner/road.jpg",alt:"The Diffuse Map of one of the terrain textures depicts the colors of a\npaved surface"}))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"1-12 Diffuse Maps. One Diffuse Map is the minimum!")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"1-3 Alpha Maps. For each 4 Diffuse Maps, you need 1 more Alpha Map!")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"0-6 Normal Maps. Diffuse Maps & Normal Maps always come in pairs!")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"0 or 1 Glow Map")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"0 or 1 Specular Map.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"The sum of all textures used must be 16, or less.")))),Object(i.b)("p",null,"Here are some common examples what this means:"),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/jme3/beginner/road_normal.png",alt:"The Normal Map of one of the terrain textures depicts the bumpiness of\na paved surface"}))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"3 Alpha + 11 Diffuse + 1 Normal.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"3 Alpha + 11 Diffuse + 1 Glow.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"3 Alpha + 11 Diffuse + 1 Specular.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"3 Alpha + 10 Diffuse + 3 Normal.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"3 Alpha + 10 Diffuse + 1 Normal + 1 Glow + 1 Specular.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"2 Alpha + 8 Diffuse + 6 Normal.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"2 Alpha + 6 Diffuse + 6 Normal + 1 Glow + 1 Specular.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"1 Alpha + 3 Diffuse + 3 Normal + 1 Glow + 1 Specular (rest unused)"))),Object(i.b)("p",null,"You can hand-paint Alpha, Diffuse, Glow, and Specular maps in a drawing\nprogram, like Photoshop. Define each splat texture in the Alpha Map in\neither Red, Green, Blue, or Alpha (=RGBA). The JmeTests project bundled\nin the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk"}),"SDK")," includes some image files that show you how\nthis works. The example images show a terrain heightmap next to its\nAlpha Map (which has been prepare for 3 Diffuse Maps), and one examplary\nDiffuse/Normal Map pair."),Object(i.b)("h1",{id:"code-sample-terrainj3md"},"Code Sample: Terrain.j3md"),Object(i.b)("p",null,"This example shows the simpler material definition ",Object(i.b)("inlineCode",{parentName:"p"},"Terrain.j3md"),", which\nonly supports 1 Alpha Map, 3 Diffuse Maps, 3 Normal Maps, and does not\nsupport Phong illumination. It makes the exmaple shorter --\nTerrainLighting.j3md works accordingly (The list of material properties\nsee above. Links to extended sample code see above.)"),Object(i.b)("p",null,"First, we load our textures and the heightmap texture for the terrain"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'// Create material from Terrain Material Definition\nmatRock = new Material(assetManager, "Common/MatDefs/Terrain/Terrain.j3md");\n// Load alpha map (for splat textures)\nmatRock.setTexture("Alpha", assetManager.loadTexture("Textures/Terrain/splat/alphamap.png"));\n// load heightmap image (for the terrain heightmap)\nTexture heightMapImage = assetManager.loadTexture("Textures/Terrain/splat/mountains512.png");\n// load grass texture\nTexture grass = assetManager.loadTexture("Textures/Terrain/splat/grass.jpg");\ngrass.setWrap(WrapMode.Repeat);\nmatRock.setTexture("Tex1", grass);\nmatRock.setFloat("Tex1Scale", 64f);\n// load dirt texture\nTexture dirt = assetManager.loadTexture("Textures/Terrain/splat/dirt.jpg");\ndirt.setWrap(WrapMode.Repeat);\nmatRock.setTexture("Tex2", dirt);\nmatRock.setFloat("Tex2Scale", 32f);\n// load rock texture\nTexture rock = assetManager.loadTexture("Textures/Terrain/splat/road.jpg");\nrock.setWrap(WrapMode.Repeat);\nmatRock.setTexture("Tex3", rock);\nmatRock.setFloat("Tex3Scale", 128f);\n')),Object(i.b)("p",null,"We create the heightmap from the ",Object(i.b)("inlineCode",{parentName:"p"},"heightMapImage"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"AbstractHeightMap heightmap = null;\nheightmap = new ImageBasedHeightMap(heightMapImage.getImage(), 1f);\nheightmap.load();\n")),Object(i.b)("p",null,"Next we create the actual terrain."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The terrain tiles are 65x65.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The total size of the terrain is 513x513, but it can easily be up to\n1025x1025.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"It uses the heightmap to generate the height values."))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'terrain = new TerrainQuad("terrain", 65, 513, heightmap.getHeightMap());\nterrain.setMaterial(matRock);\nterrain.setLocalScale(2f, 1f, 2f); // scale to make it less steep\nList<Camera> cameras = new ArrayList<>();\ncameras.add(getCamera());\nTerrainLodControl control = new TerrainLodControl(terrain, cameras);\nterrain.addControl(control);\nrootNode.attachChild(terrain);\n')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"As an alternative to an image-based height map, you can also generate a\nHill hightmap:"),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"heightmap = new HillHeightMap(1025, 1000, 50, 100, (byte) 3);\n")))))}b.isMDXComponent=!0},441:function(e,a,t){"use strict";t.d(a,"a",(function(){return c})),t.d(a,"b",(function(){return h}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),b=function(e){var a=r.a.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):p({},a,{},e)),t},c=function(e){var a=b(e.components);return r.a.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},u=Object(n.forwardRef)((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=b(t),u=n,h=c["".concat(l,".").concat(u)]||c[u]||m[u]||i;return t?r.a.createElement(h,p({ref:a},s,{components:t})):r.a.createElement(h,p({ref:a},s))}));function h(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=u;var p={};for(var o in a)hasOwnProperty.call(a,o)&&(p[o]=a[o]);p.originalType=e,p.mdxType="string"==typeof e?e:n,l[1]=p;for(var s=2;s<i;s++)l[s]=t[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);
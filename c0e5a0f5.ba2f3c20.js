(window.webpackJsonp=window.webpackJsonp||[]).push([[232],{371:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(1),r=a(9),o=(a(0),a(441)),i={},c={id:"jme3/the_scene_graph",title:"the_scene_graph",description:"Before you start making games, make sure you understand general [3D",source:"@site/docs/jme3/the_scene_graph.md",permalink:"/wikidemo/docs/jme3/the_scene_graph",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/the_scene_graph.md"},s=[],l={rightToc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Before you start making games, make sure you understand general ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../jme3/terminology"}),"3D\nGaming terminology"),"."),Object(o.b)("p",null,"Second, if you are a beginner, we recommend our ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../jme3/scenegraph_for_dummies"}),"Scene Graph for\nDummies")," presentation for a visual\nintroduction to the concept of a scene graph."),Object(o.b)("p",null,"Then continue learning about jME3 concepts here."),Object(o.b)("h1",{id:"coordinate-system"},"Coordinate System"),Object(o.b)("p",null,Object(o.b)("img",Object(n.a)({parentName:"p"},{src:"../jme3/intermediate/coordinate-system.png",alt:"coordinate-system.png"}))),Object(o.b)("p",null,"The jMonkeyEngine uses a right-handed coordinate system, just as OpenGL\ndoes."),Object(o.b)("p",null,"The coordinate system consists of:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The ",Object(o.b)("em",{parentName:"p"},"origin"),", a single central point in space."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"The origin point is always at coordinate zero, in Java:\n",Object(o.b)("inlineCode",{parentName:"li"},"new Vector3f(0,0,0)"),"."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Three ",Object(o.b)("em",{parentName:"p"},"coordinate axes")," that are mutually perpendicular, and meet in\nthe origin."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The X axis starts left and goes right.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The Y axis starts below and goes up.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The Z axis starts away from you, and goes towards you."))))),Object(o.b)("p",null,'Every point in 3D space is uniquely defined by its X,Y,Z coordinates.\nThe three numeric coordinates express how many "steps from each of the\nthree axes a point is. The data type for all vectors in jME3 is\n',Object(o.b)("inlineCode",{parentName:"p"},"com.jme3.math.Vector3f"),". All vectors are relative to the described\ncoordinate system.\\\nExample: The point ",Object(o.b)("inlineCode",{parentName:"p"},"new Vector3f(3,-5,1)")," is 3 steps to the right, 5\nsteps down, and 1 towards you."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},'The unit of meassurement ("one step) in jME3 is the ',Object(o.b)("strong",{parentName:"p"},"world unit"),",\nshort: wu. Typically, 1 wu is considered to be one meter. As long as you\nare consistant throughout your game, 1 wu can be any distance you like."))),Object(o.b)("p",null,"For your orientation:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The default camera's location is ",Object(o.b)("inlineCode",{parentName:"p"},"Vector3f(0.0f, 0.0f, 10.0f)"),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The default camera is looking in the direction described by the (so\ncalled) negative Z unit vector ",Object(o.b)("inlineCode",{parentName:"p"},"Vector3f(0.0f, 0.0f, -1.0f)"),"."))),Object(o.b)("p",null,"This means the player's point of view is on the positive side of the Z\naxis, looking back, towards the origin, down the Z axis."),Object(o.b)("h1",{id:"how-to-move-yourself-through-the-3d-scene"},"How to move yourself through the 3D scene"),Object(o.b)("p",null,"When you play a 3D game, you typically want to navigate the 3D scene.\nNote that by default, the mouse pointer is invisible, and the mouse is\nset up to control the camera rotation!"),Object(o.b)("p",null,"By default, jME3 uses the following common navigation inputs"),Object(o.b)("p",null,"+----------------------+----------------------+-----------------------+\n| Game Inputs          | Camera Motion        | Player POV            |\n+======================+======================+=======================+\n| Press the W and S    | move the camera      | you walk back and     |\n| keys                 | forward, and         | forth                 |\n|                      | backward             |                       |\n+----------------------+----------------------+-----------------------+\n| Press the A and D    | move the camera left | you step left or      |\n| keys                 | and right            | right                 |\n+----------------------+----------------------+-----------------------+\n| Press the Q and Y    | move the camera up   | you fly up and down   |\n| keys                 | and down             |                       |\n+----------------------+----------------------+-----------------------+\n| Move the mouse       | rotate the camera    | you look left or      |\n| left-right           | left/right           | right                 |\n+----------------------+----------------------+-----------------------+\n| Move the mouse       | rotate up/down       | you look at the sky   |\n| forwards-backwards   |                      | or your feet          |\n+----------------------+----------------------+-----------------------+"),Object(o.b)("p",null,'These default settings are called "WASD keys and "Mouse Look. You can\ncustomize ',Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../jme3/advanced/input_handling"}),"input handling")," for your\ngame. Sorry, but these settings work best on a QWERTY/QWERTZ keyboard."),Object(o.b)("h1",{id:"scene-graph-and-rootnode"},"Scene Graph and RootNode"),Object(o.b)("p",null,"The ",Object(o.b)("em",{parentName:"p"},"scene graph")," represents your 3D world. Objects in the jME3 scene\ngraph are called ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../jme3/advanced/spatial"}),"Spatial"),"s. Everything\nattached to the parent ",Object(o.b)("em",{parentName:"p"},"rootNode")," is part of your scene. Your game\ninherits the ",Object(o.b)("inlineCode",{parentName:"p"},"rootNode")," object from the ",Object(o.b)("inlineCode",{parentName:"p"},"SimpleApplication")," class."),Object(o.b)("p",null,Object(o.b)("img",Object(n.a)({parentName:"p"},{src:"../jme3/intermediate/scene-graph.png",alt:"scene-graph.png"}))),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"Attaching")," a Spatial to the rootNode (or its child nodes) adds it\nto the scene;")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"Detaching")," a Spatial from the rootNode (or its child nodes) removes\nit from the scene."))),Object(o.b)("p",null,"All objects in the scene graph are in a parent-child relationship. When\nyou transform (move, rotate, scale) one parent, all its children follow."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"The scene graph only manages the parent-child relationship of spatials.\nThe actual location, rotation, or scale of an object is stored inside\neach Spatial."))),Object(o.b)("h1",{id:"spatials-node-vs-geometry"},"Spatials: Node vs Geometry"),Object(o.b)("p",null,"A Spatial can be transformed (in other words, it has a location, a\nrotation, and a scale). A Spatial can be loaded and saved as a .3jo\nfile. There are two types of Spatials, ",Object(o.b)("em",{parentName:"p"},"Nodes")," and ",Object(o.b)("em",{parentName:"p"},"Geometries"),":"),Object(o.b)("p",null,'+------+-------------------------------+-------------------------------+\n|      | Spatial                       |                               |\n+======+===============================+===============================+\n| Purp | A Spatial is an abstract data |                               |\n| ose: | structure that stores         |                               |\n|      | transformations (translation, |                               |\n|      | rotation, scale).             |                               |\n+------+-------------------------------+-------------------------------+\n|      | Geometry                      | Node                          |\n+------+-------------------------------+-------------------------------+\n| Vis  | A visible 3-D object.         | An invisible "handle for a    |\n| ibil |                               | group of objects.             |\n| ity: |                               |                               |\n+------+-------------------------------+-------------------------------+\n| Purp | A Geometry represents the     | A Node groups Geometries and  |\n| ose: | "look of an object: Shape,    | other Nodes together: You     |\n|      | color, texture,               | transform a Node to affect    |\n|      | opacity/transparency.         | all attached Nodes            |\n|      |                               | (parent-child relationship).  |\n+------+-------------------------------+-------------------------------+\n| Cont | Transformations, mesh,        | Transformations. No mesh, no  |\n| ent: | material.                     | material.                     |\n+------+-------------------------------+-------------------------------+\n| E    | A box, a sphere, player, a    | The rootNode, the guiNode, an |\n| xamp | building, a piece of terrain, | audioNode, a custom grouping  |\n| les: | a vehicle, missiles, NPCs,    | node for a vehicle plus its   |\n|      | etc...                        | passengers, etc.              |\n+------+-------------------------------+-------------------------------+'),Object(o.b)("h1",{id:"how-to-use-this-knowledge"},"How to Use This Knowledge?"),Object(o.b)("p",null,"Before you start creating your game, you should plan your scene graph:\nWhich Nodes and Geometries will you need? Complete the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../jme3/beginner"}),"Beginner\ntutorials")," to learn how to load and create\nSpatials, how to lay out a scene by attaching, detaching, and\ntransforming Spatials, and how to add interaction and effects to a game."),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../jme3.xml#documentation-for-intermediate-users#"}),"intermediate and advanced\ndocumentation")," gives\nyou more details on how to put all the parts together to create an\nawesome 3D game in Java!"),Object(o.b)("h1",{id:"see-also"},"See also"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../jme3/advanced/spatial"}),"Spatial")," -- More details about\nworking with Nodes and Geometries")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../jme3/advanced/traverse_scenegraph"}),"Traverse SceneGraph")," --\nFind any Node or Geometry in the scenegraph.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../jme3/advanced/camera"}),"Camera")," -- Learn more about the Camera\nin the scene."))))}p.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c({},t,{},e)),a},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(a),d=n,u=b["".concat(i,".").concat(d)]||b[d]||m[d]||o;return a?r.a.createElement(u,c({ref:t},l,{components:a})):r.a.createElement(u,c({ref:t},l))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var l=2;l<o;l++)i[l]=a[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);
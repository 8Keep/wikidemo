(window.webpackJsonp=window.webpackJsonp||[]).push([[240],{379:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(1),i=n(9),r=(n(0),n(441)),o={},l={id:"jme3/advanced/nifty_gui_scenarios",title:"nifty_gui_scenarios",description:"This document contains typical NiftyGUI usecase scenarios, such as",source:"@site/docs/jme3/advanced/nifty_gui_scenarios.md",permalink:"/wikidemo/docs/jme3/advanced/nifty_gui_scenarios",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/nifty_gui_scenarios.md"},c=[],s={rightToc:c};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This document contains typical NiftyGUI usecase scenarios, such as\nadding effects, game states, and creating typical game screens."),Object(r.b)("p",null,"Requirements: These tips assume that you have read and understood the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/nifty_gui"}),"Creating JME3 User Interfaces with Nifty\nGUI")," tutorial, and have already laid\nout a basic GUI that interacts with your JME3 application. Here you\nlearn how you integrate the GUI better, and add effects and advanced\ncontrols."),Object(r.b)("h1",{id:"switch-game-states"},"Switch Game States"),Object(r.b)("p",null,"In a JME game, you typically have three game states:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Stopped: The game is stopped, a StartScreen is displayed.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Running: The game is running, the in-game HudScreen is displayed.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Paused: The game is paused, a PausedScreen is displayed."))),Object(r.b)("p",null,"(Aside: Additionally, the Stopped state often contains a LoadScreen,\nLogonScreen, OptionsScreen, CharacterCreationScreen, HighScoreScreen,\nCreditsScreen, etc. Some games let you access the OptionsScreen in the\nPaused state as well. The Running state can also contain an\nInventoryScreen, ItemShopScreen, StatsScreen, SkillScreen, etc.)"),Object(r.b)("p",null,"In JME, game states are implemented as custom\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"AppState")," objects. Write\neach AppState so it brings its own input mappings, rootNode content,\nupdate loop behaviour, etc with it."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Stopped: StartScreen AppState + GuiInputs AppState")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Paused: PausedScreen AppState + GuiInputs AppState")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Running: HudScreen AppState + InGameInputs AppState + BulletAppState\n(jme physics), ..."))),Object(r.b)("p",null,"When the player switches between game states, you detach one set of\nAppStates, and attach another. For example, when the player pauses the\nrunning game, you use a boolean switch to pause the game loop and\ndeactivate the game inputs (shooting, navigation). The screen is\noverlayed with a PausedScreen, which contains a visible mouse pointer\nand a Continue button. When the player clicks Continue, the mouse\npointer is deactivated, the in-game input and navigational mappings are\nactivated, and the game loop continues."),Object(r.b)("h1",{id:"get-access-to-application-and-update-loop"},"Get Access to Application and Update Loop"),Object(r.b)("p",null,"Since you are writing a jME3 application, you can additionally make any\nScreenController class extend the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"BaseAppState")," class. This\ngives the ScreenController access to the application object and to the\nupdate loop!"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'public class StartScreenState extends BaseAppState implements ScreenController {\n\n    private Node localRootNode = new Node("Start Screen RootNode");\n    private Node localGuiNode = new Node("Start Screen GuiNode");\n    private final ColorRGBA backgroundColor = ColorRGBA.Gray;\n\n    @Override\n    protected void initialize(Application app) {\n        //It is technically safe to do all initialization and cleanup in the\n        //onEnable()/onDisable() methods. Choosing to use initialize() and\n        //cleanup() for this is a matter of performance specifics for the\n        //implementor.\n        //TODO: initialize your AppState, e.g. attach spatials to rootNode\n        ((SimpleApplication) app).getRootNode().attachChild(localRootNode);\n        ((SimpleApplication) app).getGuiNode().attachChild(localGuiNode);\n        ((SimpleApplication) app).getViewPort().setBackgroundColor(backgroundColor);\n\n        /** init the screen */\n    }\n\n    @Override\n    protected void cleanup(Application app) {\n        //TODO: clean up what you initialized in the initialize method,\n        //e.g. remove all spatials from rootNode\n        ((SimpleApplication) app).getRootNode().detachChild(localRootNode);\n        ((SimpleApplication) app).getGuiNode().detachChild(localGuiNode);\n    }\n\n    //onEnable()/onDisable() can be used for managing things that should\n    //only exist while the state is enabled. Prime examples would be scene\n    //graph attachment or input listener attachment.\n    @Override\n    protected void onEnable() {\n        //Called when the state is fully enabled, ie: is attached and\n        //isEnabled() is true or when the setEnabled() status changes after the\n        //state is attached.\n    }\n\n    @Override\n    protected void onDisable() {\n        //Called when the state was previously enabled but is now disabled\n        //either because setEnabled(false) was called or the state is being\n        //cleaned up.\n    }\n\n    @Override\n    public void update(float tpf) {\n        //TODO: implement behavior during runtime\n    }\n\n    @Override\n    public void bind(Nifty nifty, Screen screen) {\n    }\n\n    @Override\n    public void onStartScreen() {\n    }\n\n    @Override\n    public void onEndScreen() {\n    }\n\n}\n')),Object(r.b)("p",null,"::: {.important}\nIt is not sufficient to just inherit from BaseAppState. You need to\ninstantiate your controller class, register it with app's stateManager\nand then pass it to nifty. Remember, to connect a screen with a\nScreenController you still need to specify the fully qualified class\nname of your ScreenController in the controller attribute of the\n\\<screen",">"," tag in the xml file. See code sample below.\n:::"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"XML example.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'public class TestNiftyGui extends SimpleApplication {\n  public void simpleInitApp() {\n     StartScreenState startScreenState = new StartScreenState();\n     stateManager.attach(startScreenState);\n     // [...] boilerplate init nifty omitted\n     nifty.fromXml("Interface/myGui.xml", "start", startScreenState); //one of the XML screen elements needs to reference StartScreenState controller class\n  }\n}\n')),Object(r.b)("h1",{id:"know-your-variables"},"Know Your Variables"),Object(r.b)("p",null,"+-----------------------------------+-----------------------------------+\n| Variable                          | Description                       |\n+===================================+===================================+\n| \\${CALL.myMethod()}               | Calls a method in the current     |\n|                                   | ScreenController and gets the     |\n|                                   | method's return String. The       |\n|                                   | method can also be void and have  |\n|                                   | a side effect, e.g. play a sound  |\n|                                   | etc.                              |\n+-----------------------------------+-----------------------------------+\n| \\${ENV.HOME}                      | Returns the path to user's home   |\n|                                   | directory.                        |\n+-----------------------------------+-----------------------------------+\n| \\${ENV.key}                       | Looks up ",Object(r.b)("inlineCode",{parentName:"p"},"key")," in the environment |\n|                                   | variables. Use it like Java's     |\n|                                   | System.getEnv(\"key).              |\n+-----------------------------------+-----------------------------------+\n| \\${PROP.key}                      | looks up ",Object(r.b)("inlineCode",{parentName:"p"},"key"),' in the Nifty       |\n|                                   | properties. Use                   |\n|                                   | Nift                              |\n|                                   | y.setGlobalproperties(properties) |\n|                                   | and                               |\n|                                   | Nifty.getGlobalproperties("key).  |\n|                                   | Or SystemGetProperties(key);      |\n+-----------------------------------+-----------------------------------+'),Object(r.b)("p",null,"See also: ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/nifty-gui/nifty-gui/raw/1.4/nifty-core/manual/nifty-gui-the-manual-1.3.2.pdf"}),"Nifty GUI - the Manual: XML GUI (Special XML\nMarkup)")),Object(r.b)("h1",{id:"use-screencontrollers-for-mutally-exclusive-functionality"},"Use ScreenControllers for Mutally Exclusive Functionality"),Object(r.b)("p",null,"Technically you are free to create one ScreenController class for each\nscreen, or reuse the same ScreenController for all or some of them. In\nthe end it may be best to create individual ScreenControllers for\nfunctionality that is mutually exclusive."),Object(r.b)("p",null,"For example, create a ",Object(r.b)("inlineCode",{parentName:"p"},"MyHudScreen.java")," for the ",Object(r.b)("inlineCode",{parentName:"p"},"hud")," screen, and a\n",Object(r.b)("inlineCode",{parentName:"p"},"MyStartScreen.java")," for the ",Object(r.b)("inlineCode",{parentName:"p"},"start")," screen."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Include all user interface methods that are needed during the game\n(while the HUD is up) in ",Object(r.b)("inlineCode",{parentName:"p"},"MyHudScreen.java"),". Then make this class\ncontrol all screens that can be up during the game (the HUD screen,\na MiniMap screen, an Inventory screen, an Abilities or Skills\nscreen, etc). All these screens possibly share data (game data,\nplayer data), so it makes sense to control them all with methods of\nthe same ",Object(r.b)("inlineCode",{parentName:"p"},"MyHudScreen.java")," class.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"The start screen, however, is mostly independent of the running\ngame. Include all user interface methods that are needed outside the\ngame (while you are on the start screen) in ",Object(r.b)("inlineCode",{parentName:"p"},"MyStartScreen.java"),".\nThen make this class control all screens that can be up outside the\ngame (the Start screen, a Settings/Options screen, a HighScore\nscreen, etc). All these classes need to read and write saved game\ndata, so it makes sense to control them all with methods of the same\n",Object(r.b)("inlineCode",{parentName:"p"},"MyStartScreen.java")," class."))),Object(r.b)("h1",{id:"create-a-loading-screen"},'Create a \\"Loading...\u200b\\" Screen'),Object(r.b)("p",null,"Get the full ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/loading_screen"}),"Loading Screen"),"\ntutorial here."),Object(r.b)("h1",{id:"create-a-popup-menu"},"Create a Popup Menu"),Object(r.b)("p",null,"Get the full ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/nifty_gui_popup_menu"}),"Nifty GUI PopUp\nMenu")," tutorial here."),Object(r.b)("h1",{id:"add-visual-effects"},"Add Visual Effects"),Object(r.b)("p",null,"You can register effects to screen elements."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Respond to element events such as onStartScreen, onEndScreen,\nonHover, onFocus, onActive,")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Trigger effects that change movement, blending, size, color, fading,\nand much more."))),Object(r.b)("p",null,"Here is an example that moves a panel when the startScreen opens. You\nplace an \\< effect ",">"," tag inside the element that you want to be\naffected."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{.xml}"}),'<panel height="25%" width="35%" ...>\n  <effect>\n    <onStartScreen name="move" mode="in" direction="top" length="300" startDelay="0" inherit="true"/>\n  </effect>\n</panel>\n')),Object(r.b)("p",null,"Learn more from the NiftyGUI page:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/nifty-gui/nifty-gui/raw/1.4/nifty-core/manual/nifty-gui-the-manual-1.3.2.pdf"}),"Nifty GUI - the Manual:\nEffects"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/nifty-gui/nifty-gui/wiki/Effects"}),"Effects")))),Object(r.b)("h1",{id:"add-sound-effects"},"Add Sound Effects"),Object(r.b)("p",null,"Playing sounds using Nifty is also possible with a ",Object(r.b)("inlineCode",{parentName:"p"},"playSound")," effect as\ntrigger. Remember to first register the sound that you want to play:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{.xml}"}),'<registerSound id="myclick" filename="Interface/sounds/ButtonClick.ogg" />\n...\n<label>\n  <effect>\n    <onClick name="playSound" sound="myclick"/>\n  </effect>\n</label>\n')),Object(r.b)("h1",{id:"pass-clickloc-from-nifty-to-java"},"Pass ClickLoc From Nifty to Java"),Object(r.b)("p",null,"After a mouse click, you may want to record the 2D clickLoc and send\nthis info to your Java application. Typical ScreenController methods\nhowever only have a String argument. You'd have to convert the String to\nints."),Object(r.b)("p",null,"To pass the clickLoc as two ints, you can use the special\n",Object(r.b)("inlineCode",{parentName:"p"},"(int x, int y)")," syntax in the ScreenController:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  public void clicked(int x, int y) {\n    // here you can use the x and y of the clickLoc\n  }\n")),Object(r.b)("p",null,"In the Nifty GUI screen code (e.g. XML file) you must call the\n",Object(r.b)("inlineCode",{parentName:"p"},"(int x, int y)")," method ",Object(r.b)("em",{parentName:"p"},"without")," any parameters!"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{.xml}"}),'<interact onClick="clicked()"/>\n')),Object(r.b)("p",null,"You can name the method (here ",Object(r.b)("inlineCode",{parentName:"p"},"clicked"),") what ever you like, as long as\nyou keep the argument syntax."),Object(r.b)("h1",{id:"load-several-xml-files"},"Load Several XML Files"),Object(r.b)("p",null,"The basic Nifty GUI example showed how to use the ",Object(r.b)("inlineCode",{parentName:"p"},"nifty.fromXML()"),"\nmethod to load one XML file containing all Nifty GUI screens. The\nfollowing code sample shows how you can load several XML files into one\nnifty object. Loading several files with ",Object(r.b)("inlineCode",{parentName:"p"},"nifty.addXml()")," allows you to\nsplit up each screen into one XML file, instead of all into one\nhard-to-read XML file."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'NiftyJmeDisplay niftyDisplay = new NiftyJmeDisplay(assetManager, inputManager, audioRenderer, viewPort);\nNifty nifty = niftyDisplay.getNifty();\nnifty.addXml("Interface/Screens/OptionsScreen.xml");\nnifty.addXml("Interface/Screens/StartScreen.xml");\nnifty.gotoScreen("startScreen");\nStartScreenControl screenControl = (StartScreenControl) nifty.getScreen("startScreen").getScreenController();\nOptionsScreenControl optionsControl = (OptionsScreenControl) nifty.getScreen("optionsScreen").getScreenController();\nstateManager.attach(screenControl);\nstateManager.attach(optionsControl);\nguiViewPort.addProcessor(niftyDisplay);\n')),Object(r.b)("h1",{id:"register-additional-explicit-screen-controllers"},"Register additional explicit screen controllers"),Object(r.b)("p",null,"In addition to the ",Object(r.b)("inlineCode",{parentName:"p"},"nifty.addXml()")," methods to attach many nifty XML\nfiles, there exists a ",Object(r.b)("inlineCode",{parentName:"p"},"nifty.registerScreenController()")," method to\nexplicitly attach more screen controllers."),Object(r.b)("p",null,"The following code sample shows how you can explicitly attach several\nscreen controllers before adding the XML file to nifty, which would\notherwise cause nifty to implicitly instantiate the screen controller\nclass."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'NiftyJmeDisplay niftyDisplay = NiftyJmeDisplay.newNiftyJmeDisplay(assetManager, inputManager, audioRenderer, viewPort);\nNifty nifty = niftyDisplay.getNifty();\n\nnifty.registerScreenController(new OptionsScreenController(randomConstructorArgument));\nnifty.addXml("Interface/Screens/OptionsScreen.xml");\n')),Object(r.b)("h1",{id:"design-your-own-styles"},"Design Your Own Styles"),Object(r.b)("p",null,"By default, your Nifty XML screens use the built.in styles:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{.xml}"}),' <useStyles filename="nifty-default-styles.xml" />\n')),Object(r.b)("p",null,"But you can switch to a set of custom styles in your game project's\nasset directory like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{.xml}"}),' <useStyles filename="Interface/Styles/myCustomStyles.xml" />\n')),Object(r.b)("p",null,"Inside myCustomStyles.xml you define styles like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{.xml}"}),'<?xml version="1.0" encoding="UTF-8"?>\n<nifty-styles>\n  <useStyles filename="Interface/Styles/Font/myCustomFontStyle.xml" />\n  <useStyles filename="Interface/Styles/Button/myCustomButtonStyle.xml" />\n  <useStyles filename="Interface/Styles/Label/myCustomLabelStyle.xml" />\n  ...\n</nifty-styles>\n')),Object(r.b)("p",null,"Learn more about how to create styles by looking at the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/nifty-gui/nifty-gui/wiki/Working-from-Source"}),"Nifty GUI\nsource\ncode"),'\nfor "nifty-style-black". Copy it as a template and change it to create\nyour own style.'),Object(r.b)("p",null,"Learn more from the NiftyGUI page:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/nifty-gui/nifty-gui/wiki/Effects"}),"https://github.com/nifty-gui/nifty-gui/wiki/Effects"))))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),p=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},u=function(e){var t=p(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,m=u["".concat(o,".").concat(b)]||u[b]||d[b]||r;return n?i.a.createElement(m,l({ref:t},s,{components:n})):i.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{248:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return b}));var n=a(1),r=a(9),o=(a(0),a(441)),i={},l={id:"jme3/beginner/hello_material",title:"hello_material",description:"Previous: [Hello Input",source:"@site/docs/jme3/beginner/hello_material.md",permalink:"/wikidemo/docs/jme3/beginner/hello_material",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/beginner/hello_material.md",sidebar:"main",previous:{title:"hello_input_system",permalink:"/wikidemo/docs/jme3/beginner/hello_input_system"},next:{title:"hello_animation",permalink:"/wikidemo/docs/jme3/beginner/hello_animation"}},s=[{value:"Exercise 1: Custom .j3m Material",id:"exercise-1-custom-j3m-material",children:[]},{value:"Exercise 2: Bumpiness and Shininess",id:"exercise-2-bumpiness-and-shininess",children:[]}],c={rightToc:s};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Previous: ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_input_system"}),"Hello Input\nSystem"),", Next: ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_animation"}),"Hello\nAnimation")),Object(o.b)("p",null,"The term Material includes everything that influences what the surface\nof a 3D model looks like: The color, texture, shininess, and\nopacity/transparency. Plain coloring is covered in ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_node"}),"Hello\nNode"),". Loading models that come with\nmaterials is covered in ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_asset"}),"Hello\nAsset"),". In this tutorial you learn\nto create and use custom JME3 Material Definitions."),Object(o.b)("p",null,Object(o.b)("img",Object(n.a)({parentName:"p"},{src:"/images/jme3/beginner/beginner-materials.png",alt:"beginner-materials.png"}))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},'To use the example assets in a new jMonkeyEngine SDK project,\nright-click your project, select "Properties, go to "Libraries, press\n"Add Library and add the "jme3-test-data library.'))),Object(o.b)("h1",{id:"sample-code"},"Sample Code"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'package jme3test.helloworld;\n\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.light.DirectionalLight;\nimport com.jme3.material.Material;\nimport com.jme3.material.RenderState.BlendMode;\nimport com.jme3.math.ColorRGBA;\nimport com.jme3.math.Vector3f;\nimport com.jme3.renderer.queue.RenderQueue.Bucket;\nimport com.jme3.scene.Geometry;\nimport com.jme3.scene.shape.Box;\nimport com.jme3.scene.shape.Sphere;\nimport com.jme3.texture.Texture;\nimport com.jme3.util.TangentBinormalGenerator;\n\n/** Sample 6 - how to give an object\'s surface a material and texture.\n * How to make objects transparent. How to make bumpy and shiny surfaces.  */\npublic class HelloMaterial extends SimpleApplication {\n\n  public static void main(String[] args) {\n    HelloMaterial app = new HelloMaterial();\n    app.start();\n  }\n\n  @Override\n  public void simpleInitApp() {\n\n    /** A simple textured cube -- in good MIP map quality. */\n    Box cube1Mesh = new Box( 1f,1f,1f);\n    Geometry cube1Geo = new Geometry("My Textured Box", cube1Mesh);\n    cube1Geo.setLocalTranslation(new Vector3f(-3f,1.1f,0f));\n    Material cube1Mat = new Material(assetManager,\n        "Common/MatDefs/Misc/Unshaded.j3md");\n    Texture cube1Tex = assetManager.loadTexture(\n        "Interface/Logo/Monkey.jpg");\n    cube1Mat.setTexture("ColorMap", cube1Tex);\n    cube1Geo.setMaterial(cube1Mat);\n    rootNode.attachChild(cube1Geo);\n\n    /** A translucent/transparent texture, similar to a window frame. */\n    Box cube2Mesh = new Box( 1f,1f,0.01f);\n    Geometry cube2Geo = new Geometry("window frame", cube2Mesh);\n    Material cube2Mat = new Material(assetManager,\n        "Common/MatDefs/Misc/Unshaded.j3md");\n    cube2Mat.setTexture("ColorMap",\n        assetManager.loadTexture("Textures/ColoredTex/Monkey.png"));\n    cube2Mat.getAdditionalRenderState().setBlendMode(BlendMode.Alpha);\n    cube2Geo.setQueueBucket(Bucket.Transparent);\n    cube2Geo.setMaterial(cube2Mat);\n    rootNode.attachChild(cube2Geo);\n\n    /** A bumpy rock with a shiny light effect.*/\n    Sphere sphereMesh = new Sphere(32,32, 2f);\n    Geometry sphereGeo = new Geometry("Shiny rock", sphereMesh);\n    sphereMesh.setTextureMode(Sphere.TextureMode.Projected); // better quality on spheres\n    TangentBinormalGenerator.generate(sphereMesh);           // for lighting effect\n    Material sphereMat = new Material(assetManager,\n        "Common/MatDefs/Light/Lighting.j3md");\n    sphereMat.setTexture("DiffuseMap",\n        assetManager.loadTexture("Textures/Terrain/Pond/Pond.jpg"));\n    sphereMat.setTexture("NormalMap",\n        assetManager.loadTexture("Textures/Terrain/Pond/Pond_normal.png"));\n    sphereMat.setBoolean("UseMaterialColors",true);\n    sphereMat.setColor("Diffuse",ColorRGBA.White);\n    sphereMat.setColor("Specular",ColorRGBA.White);\n    sphereMat.setFloat("Shininess", 64f);  // [0,128]\n    sphereGeo.setMaterial(sphereMat);\n    sphereGeo.setLocalTranslation(0,2,-2); // Move it a bit\n    sphereGeo.rotate(1.6f, 0, 0);          // Rotate it a bit\n    rootNode.attachChild(sphereGeo);\n\n    /** Must add a light to make the lit object visible! */\n    DirectionalLight sun = new DirectionalLight();\n    sun.setDirection(new Vector3f(1,0,-2).normalizeLocal());\n    sun.setColor(ColorRGBA.White);\n    rootNode.addLight(sun);\n\n  }\n}\n')),Object(o.b)("p",null,"You should see"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Left -- A cube with a brown monkey texture.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Right -- A translucent monkey picture in front of a shiny bumpy\nrock."))),Object(o.b)("p",null,"Move around with the WASD keys to have a closer look at the\ntranslucency, and the rock's bumpiness."),Object(o.b)("h1",{id:"simple-unshaded-texture"},"Simple Unshaded Texture"),Object(o.b)("p",null,"Typically you want to give objects in your scene textures: It can be\nrock, grass, brick, wood, water, metal, paper... A texture is a normal\nimage file in JPG or PNG format. In this example, you create a box with\na simple unshaded Monkey texture as material."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'    /** A simple textured cube -- in good MIP map quality. */\n    Box cube1Mesh = new Box( 1f,1f,1f);\n    Geometry cube1Geo = new Geometry("My Textured Box", cube1Mesh);\n    cube1Geo.setLocalTranslation(new Vector3f(-3f,1.1f,0f));\n    Material cube1Mat = new Material(assetManager,\n        "Common/MatDefs/Misc/Unshaded.j3md");\n    Texture cube1Tex = assetManager.loadTexture(\n        "Interface/Logo/Monkey.jpg");\n    cube1Mat.setTexture("ColorMap", cube1Tex);\n    cube1Geo.setMaterial(cube1Mat);\n    rootNode.attachChild(cube1Geo);\n')),Object(o.b)("p",null,"Here is what we did: to create a textured box:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a Geometry ",Object(o.b)("inlineCode",{parentName:"p"},"cube1Geo")," from a Box mesh ",Object(o.b)("inlineCode",{parentName:"p"},"cube1Mesh"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a Material ",Object(o.b)("inlineCode",{parentName:"p"},"cube1Mat")," based on jME3's default ",Object(o.b)("inlineCode",{parentName:"p"},"Unshaded.j3md"),"\nmaterial definition.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a texture ",Object(o.b)("inlineCode",{parentName:"p"},"cube1Tex")," from the ",Object(o.b)("inlineCode",{parentName:"p"},"Monkey.jpg")," file in the\n",Object(o.b)("inlineCode",{parentName:"p"},"assets/Interface/Logo/")," directory of the project.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Load the texture ",Object(o.b)("inlineCode",{parentName:"p"},"cube1Tex")," into the ",Object(o.b)("inlineCode",{parentName:"p"},"ColorMap")," layer of the\nmaterial ",Object(o.b)("inlineCode",{parentName:"p"},"cube1Mat"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Apply the material to the cube, and attach the cube to the rootnode."))),Object(o.b)("h1",{id:"transparent-unshaded-texture"},"Transparent Unshaded Texture"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Monkey.png")," is the same texture as ",Object(o.b)("inlineCode",{parentName:"p"},"Monkey.jpg"),", but with an added\nalpha channel. The alpha channel allows you to specify which areas of\nthe texture you want to be opaque or transparent: Black areas of the\nalpha channel remain opaque, gray areas become translucent, and white\nareas become transparent."),Object(o.b)("p",null,"For a partially translucent/transparent texture, you need:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"A Texture with alpha channel")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"A Texture with blend mode of ",Object(o.b)("inlineCode",{parentName:"p"},"BlendMode.Alpha"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"A Geometry in the ",Object(o.b)("inlineCode",{parentName:"p"},"Bucket.Transparent")," render bucket.\\\nThis bucket ensures that the transparent object is drawn on top of\nobjects behind it, and they show up correctly under the transparent\nparts."))),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'    /** A translucent/transparent texture, similar to a window frame. */\n    Box cube2Mesh = new Box( 1f,1f,0.01f);\n    Geometry cube2Geo = new Geometry("window frame", cube2Mesh);\n    Material cube2Mat = new Material(assetManager,\n    "Common/MatDefs/Misc/Unshaded.j3md");\n    cube2Mat.setTexture("ColorMap",\n        assetManager.loadTexture("Textures/ColoredTex/Monkey.png"));\n    cube2Mat.getAdditionalRenderState().setBlendMode(BlendMode.Alpha);  // !\n    cube2Geo.setQueueBucket(Bucket.Transparent);                        // !\n    cube2Geo.setMaterial(cube2Mat);\n    rootNode.attachChild(cube2Geo);\n')),Object(o.b)("p",null,"For non-transparent objects, the drawing order is not so important,\nbecause the z-buffer already keeps track of whether a pixel is behind\nsomething else or not, and the color of an opaque pixel doesn't depend\non the pixels under it, this is why opaque Geometries can be drawn in\nany order."),Object(o.b)("p",null,"What you did for the transparent texture is the same as before, with\nonly one added step for the transparency."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a Geometry ",Object(o.b)("inlineCode",{parentName:"p"},"cube2Geo")," from a Box mesh ",Object(o.b)("inlineCode",{parentName:"p"},"cube2Mesh"),". This Box\nGeometry is flat upright box (because z=0.01f).")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a Material ",Object(o.b)("inlineCode",{parentName:"p"},"cube2Mat")," based on jME3's default ",Object(o.b)("inlineCode",{parentName:"p"},"Unshaded.j3md"),"\nmaterial definition.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a texture ",Object(o.b)("inlineCode",{parentName:"p"},"cube2Tex")," from the ",Object(o.b)("inlineCode",{parentName:"p"},"Monkey.png")," file in the\n",Object(o.b)("inlineCode",{parentName:"p"},"assets/Textures/ColoredTex/")," directory of the project. This PNG\nfile must have an alpha layer.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Activate transparency in the material by setting the blend mode to\nAlpha."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Set the QueueBucket of the Geometry to ",Object(o.b)("inlineCode",{parentName:"strong"},"Bucket.Transparent"),"."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Load the texture ",Object(o.b)("inlineCode",{parentName:"p"},"cube2Tex")," into the ",Object(o.b)("inlineCode",{parentName:"p"},"ColorMap")," layer of the\nmaterial ",Object(o.b)("inlineCode",{parentName:"p"},"cube2Mat"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Apply the material to the cube, and attach the cube to the rootnode."))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Learn more about creating PNG images with an alpha layer in the help\nsystem of your graphic editor."))),Object(o.b)("h1",{id:"shininess-and-bumpiness"},"Shininess and Bumpiness"),Object(o.b)("p",null,"But textures are not all. Have a close look at the shiny sphere -- you\ncannot get such a nice bumpy material with just a plain texture. You see\nthat JME3 also supports so-called Phong-illuminated materials:"),Object(o.b)("p",null,"In a lit material, the standard texture layer is refered to as\n",Object(o.b)("em",{parentName:"p"},"DiffuseMap"),", any material can use this layer. A lit material can\nadditionally have lighting effects such as ",Object(o.b)("em",{parentName:"p"},"Shininess")," used together\nwith the ",Object(o.b)("em",{parentName:"p"},"SpecularMap")," layer and ",Object(o.b)("em",{parentName:"p"},"Specular")," color. And you can even get\na realistically bumpy or cracked surface with help of the ",Object(o.b)("em",{parentName:"p"},"NormalMap"),"\nlayer."),Object(o.b)("p",null,"Let's have a look at the part of the code example where you create the\nshiny bumpy rock."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a Geometry from a Sphere shape. Note that this shape is a\nnormal smooth sphere mesh."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'    Sphere sphereMesh = new Sphere(32,32, 2f);\n    Geometry sphereGeo = new Geometry("Shiny rock", sphereMesh);\n')),Object(o.b)("p",{parentName:"li"},"a.  (Only for Spheres) Change the sphere's TextureMode to make the\nsquare texture project better onto the sphere."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"```java\n    sphereMesh.setTextureMode(Sphere.TextureMode.Projected);\n```\n")),Object(o.b)("p",{parentName:"li"},"b.  You must generate TangentBinormals for the mesh so you can use\nthe NormalMap layer of the texture."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"```java\n    TangentBinormalGenerator.generate(sphereMesh);\n```\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a material based on the ",Object(o.b)("inlineCode",{parentName:"p"},"Lighting.j3md")," default material."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'    Material sphereMat = new Material(assetManager,\n        "Common/MatDefs/Light/Lighting.j3md");\n')),Object(o.b)("p",{parentName:"li"},"a.  Set a standard rocky texture in the ",Object(o.b)("inlineCode",{parentName:"p"},"DiffuseMap")," layer."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),'![Pond.jpg](https://github.com/jMonkeyEngine/jmonkeyengine/raw/445f7ed010199d30c484fe75bacef4b87f2eb38e/jme3-testdata/src/main/resources/Textures/Terrain/Pond/Pond.jpg)\n\n```java\n    sphereMat.setTexture("DiffuseMap",\n        assetManager.loadTexture("Textures/Terrain/Pond/Pond.jpg"));\n```\n')),Object(o.b)("p",{parentName:"li"},"b.  Set the ",Object(o.b)("inlineCode",{parentName:"p"},"NormalMap")," layer that contains the bumpiness. The\nNormalMap was generated for this particular DiffuseMap with a\nspecial tool (e.g. Blender)."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),'![Pond\\_normal.png](https://github.com/jMonkeyEngine/jmonkeyengine/raw/445f7ed010199d30c484fe75bacef4b87f2eb38e/jme3-testdata/src/main/resources/Textures/Terrain/Pond/Pond_normal.png)\n\n```java\n    sphereMat.setTexture("NormalMap",\n        assetManager.loadTexture("Textures/Terrain/Pond/Pond_normal.png"));\n```\n')),Object(o.b)("p",{parentName:"li"},"c.  Set the Material's Shininess to a value between 1 and 128. For a\nrock, a low fuzzy shininess is appropriate. Use material colors\nto define the shiny Specular color."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),'```java\n    sphereMat.setBoolean("UseMaterialColors",true);\n    sphereMat.setColor("Diffuse",ColorRGBA.White);  // minimum material color\n    sphereMat.setColor("Specular",ColorRGBA.White); // for shininess\n    sphereMat.setFloat("Shininess", 64f); // [1,128] for shininess\n```\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Assign your newly created material to the Geometry."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"    sphereGeo.setMaterial(sphereMat);\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Let's move and rotate the geometry a bit to position it better."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"    sphereGeo.setLocalTranslation(0,2,-2); // Move it a bit\n    sphereGeo.rotate(1.6f, 0, 0);          // Rotate it a bit\n    rootNode.attachChild(sphereGeo);\n")))),Object(o.b)("p",null,"Remember that any Lighting.j3md-based material requires a light source,\nas shown in the full code sample above."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"To deactivate Shininess, do not set ",Object(o.b)("inlineCode",{parentName:"p"},"Shininess")," to 0, but instead set\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"Specular")," color to ",Object(o.b)("inlineCode",{parentName:"p"},"ColorRGBA.Black"),"."))),Object(o.b)("h1",{id:"default-material-definitions"},"Default Material Definitions"),Object(o.b)("p",null,"As you have seen, you can find the following default materials in\n",Object(o.b)("inlineCode",{parentName:"p"},"jme/core-data/Common/MatDefs/\u2026"),"."),Object(o.b)("p",null,"+-------------+---------------------------+---------------------------+\n| Default     | Usage                     | Parameters                |\n| Definition  |                           |                           |\n+=============+===========================+===========================+\n| ",Object(o.b)("inlineCode",{parentName:"p"},"Misc/Uns   | Colored: Use with         | Color : Color\\            |\n| haded.j3md")," | mat.setColor() and        | ColorMap : Texture2D      |\n|             | ColorRGBA.\\               |                           |\n|             | Textured: Use with        |                           |\n|             | mat.setTexture() and      |                           |\n|             | Texture.                  |                           |\n+-------------+---------------------------+---------------------------+\n| ",Object(o.b)("inlineCode",{parentName:"p"},"Light/Lig  | Use with shiny Textures,  | Ambient, Diffuse,         |\n| hting.j3md")," | Bump- and NormalMaps      | Specular : Color\\         |\n|             | textures.\\                | DiffuseMap, NormalMap,    |\n|             | Requires a light source.  | SpecularMap : Texture2D\\  |\n|             |                           | Shininess : Float         |\n+-------------+---------------------------+---------------------------+"),Object(o.b)("p",null,"For a game, you create custom Materials based on these existing\nMaterialDefintions -- as you have just seen in the example with the\nshiny rock's material."),Object(o.b)("h1",{id:"exercises"},"Exercises"),Object(o.b)("h2",{id:"exercise-1-custom-j3m-material"},"Exercise 1: Custom .j3m Material"),Object(o.b)("p",null,"Look at the shiny rocky sphere above again. It takes several lines to\ncreate and set the Material."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Note how it loads the ",Object(o.b)("inlineCode",{parentName:"p"},"Lighting.j3md")," Material definition.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Note how it sets the ",Object(o.b)("inlineCode",{parentName:"p"},"DiffuseMap")," and ",Object(o.b)("inlineCode",{parentName:"p"},"NormalMap")," to a texture path.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Note how it activates ",Object(o.b)("inlineCode",{parentName:"p"},"UseMaterialColors")," and sets ",Object(o.b)("inlineCode",{parentName:"p"},"Specular")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"Diffuse")," to 4 float values (RGBA color).")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Note how it sets ",Object(o.b)("inlineCode",{parentName:"p"},"Shininess")," to 64."))),Object(o.b)("p",null,"If you want to use one custom material for several models, you can store\nit in a .j3m file, and save a few lines of code every time."),Object(o.b)("p",null,"You create a j3m file as follows:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a plain text file ",Object(o.b)("inlineCode",{parentName:"p"},"assets/Materials/MyCustomMaterial.j3m")," in\nyour project directory, with the following content:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"Material My shiny custom material : Common/MatDefs/Light/Lighting.j3md {\n     MaterialParameters {\n        DiffuseMap : Textures/Terrain/Pond/Pond.jpg\n        NormalMap : Textures/Terrain/Pond/Pond_normal.png\n        UseMaterialColors : true\n        Specular : 1.0 1.0 1.0 1.0\n        Diffuse : 1.0 1.0 1.0 1.0\n        Shininess : 64.0\n     }\n}\n")),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Note that ",Object(o.b)("inlineCode",{parentName:"p"},"Material")," is a fixed keyword.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Note that ",Object(o.b)("inlineCode",{parentName:"p"},"My shiny custom material")," is a String that you can\nchoose to describe the material.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Note how the code sets all the same properties as before!")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"In the code sample, comment out the eight lines that have\n",Object(o.b)("inlineCode",{parentName:"p"},"sphereMat")," in them.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Below this line, add the following line:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'sphereGeo.setMaterial((Material) assetManager.loadMaterial(\n    "Materials/MyCustomMaterial.j3m"));\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the app. The result is the same."))),Object(o.b)("p",null,"Using this new custom material ",Object(o.b)("inlineCode",{parentName:"p"},"MyCustomMaterial.j3m")," only takes one\nline. You have replaced the eight lines of an on-the-fly material\ndefinition with one line that loads a custom material from a file. Using\n.j3m files is very handy if you use the same material often."),Object(o.b)("h2",{id:"exercise-2-bumpiness-and-shininess"},"Exercise 2: Bumpiness and Shininess"),Object(o.b)("p",null,"Go back to the bumpy rock sample above:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Comment out the DiffuseMap line, and run the app. (Uncomment it\nagain.)"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Which property of the rock is lost?"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Comment out the NormalMap line, and run the app. (Uncomment it\nagain.)"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Which property of the rock is lost?"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Change the value of Shininess to values like 0, 63, 127."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"What aspect of the Shininess changes?")))),Object(o.b)("h1",{id:"conclusion"},"Conclusion"),Object(o.b)("p",null,"You have learned how to create a Material, specify its properties, and\nuse it on a Geometry. You know how to load an image file (.png, .jpg) as\ntexture into a material. You know to save texture files in a subfolder\nof your project's ",Object(o.b)("inlineCode",{parentName:"p"},"assets/Textures/")," directory."),Object(o.b)("p",null,"You have also learned that a material can be stored in a .j3m file. The\nfile references a built-in MaterialDefinition and specifies values for\nproperties of that MaterialDefinition. You know to save your custom .j3m\nfiles in your project's ",Object(o.b)("inlineCode",{parentName:"p"},"assets/Materials/")," directory."),Object(o.b)("p",null,"Now that you know how to load models and how to assign good-looking\nmaterials to them, let's have a look at how to animate models in the\nnext chapter, ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_animation"}),"Hello\nAnimation"),"."),Object(o.b)("p",null,"See also"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/intermediate/how_to_use_materials"}),"How to Use\nMaterials"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/material_editing"}),"Material Editing"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://hub.jmonkeyengine.org/t/jmonkeyengine3-material-system-full-explanation/12947"}),"Materials"),"\nforum thread")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://nbviewer.jupyter.org/github/jMonkeyEngine/wiki/blob/master/src/docs/resources/tutorials/material/jME3_materials.pdf"}),"jME3 Materials documentation\n(PDF)"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.youtube.com/watch?v=Feu3-mrpolc"}),"Video Tutorial: Editing and Assigning Materials to Models in\njMonkeyEngine SDK (from 2010, is there a newer\none?"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.blender.org/support/tutorials/"}),"Creating textures in\nBlender"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.shaders.co.uk/ifw2_textures/whatsin10.htm"}),"Various Material\nscreenshots"),"\n(Not done with JME3, this is just to show the fantastic range of\nMaterial parameters in the hands of an expert, until we have a JME3\ndemo for it.)"))))}b.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l({},t,{},e)),a},p=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=b(a),u=n,h=p["".concat(i,".").concat(u)]||p[u]||m[u]||o;return a?r.a.createElement(h,l({ref:t},c,{components:a})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);
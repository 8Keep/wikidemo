(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{262:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return d}));var n=a(1),o=a(9),l=(a(0),a(441)),i={},r={id:"jme3/beginner/hello_asset",title:"hello_asset",description:"Previous: [Hello Node](../../jme3/beginner/hello_node), Next: [Hello",source:"@site/docs/jme3/beginner/hello_asset.md",permalink:"/wikidemo/docs/jme3/beginner/hello_asset",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/beginner/hello_asset.md",sidebar:"main",previous:{title:"hello_node",permalink:"/wikidemo/docs/jme3/beginner/hello_node"},next:{title:"hello_main_event_loop",permalink:"/wikidemo/docs/jme3/beginner/hello_main_event_loop"}},s=[{value:"Loading Textures",id:"loading-textures",children:[]},{value:"Loading Text and Fonts",id:"loading-text-and-fonts",children:[]},{value:"Loading a Model",id:"loading-a-model",children:[]},{value:"Loading Assets From Custom Paths",id:"loading-assets-from-custom-paths",children:[]},{value:"Model File Formats",id:"model-file-formats",children:[]},{value:"Loading Models and Scenes",id:"loading-models-and-scenes",children:[]}],c={rightToc:s};function d(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Previous: ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_node"}),"Hello Node"),", Next: ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_main_event_loop"}),"Hello\nUpdate Loop")),Object(l.b)("p",null,"In this tutorial we will learn to load 3D models and text into the scene\ngraph, using the jME ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/asset_manager"}),"Asset\nManager"),". You will also learn how\nto determine the correct paths, and which file formats to use."),Object(l.b)("p",null,Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../../../images/jme3/beginner/beginner-assets-models.png",alt:"beginner-assets-models.png"}))),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/sample_code"}),"Trouble finding the files to run this\nsample?")," To get the assets (3D models) used\nin this example, add the included ",Object(l.b)("inlineCode",{parentName:"p"},"jME3-testdata.jar"),' to your classpath.\nIn project created with the jMonkeyEngine SDK (recommended), simply\nright-click your project, choose "Properties", go to "Libraries", press\n"Add Library" and add the preconfigured "jme3-test-data" library.'))),Object(l.b)("h1",{id:"code-sample"},"Code Sample"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'package jme3test.helloworld;\n\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.font.BitmapText;\nimport com.jme3.light.DirectionalLight;\nimport com.jme3.material.Material;\nimport com.jme3.math.Vector3f;\nimport com.jme3.scene.Geometry;\nimport com.jme3.scene.Spatial;\nimport com.jme3.scene.shape.Box;\n\n/** Sample 3 - how to load an OBJ model, and OgreXML model,\n * a material/texture, or text. */\npublic class HelloAssets extends SimpleApplication {\n\n    public static void main(String[] args) {\n        HelloAssets app = new HelloAssets();\n        app.start();\n    }\n\n    @Override\n    public void simpleInitApp() {\n\n        Spatial teapot = assetManager.loadModel("Models/Teapot/Teapot.obj");\n        Material mat_default = new Material(\n            assetManager, "Common/MatDefs/Misc/ShowNormals.j3md");\n        teapot.setMaterial(mat_default);\n        rootNode.attachChild(teapot);\n\n        // Create a wall with a simple texture from test_data\n        Box box = new Box(2.5f,2.5f,1.0f);\n        Spatial wall = new Geometry("Box", box );\n        Material mat_brick = new Material(\n            assetManager, "Common/MatDefs/Misc/Unshaded.j3md");\n        mat_brick.setTexture("ColorMap",\n            assetManager.loadTexture("Textures/Terrain/BrickWall/BrickWall.jpg"));\n        wall.setMaterial(mat_brick);\n        wall.setLocalTranslation(2.0f,-2.5f,0.0f);\n        rootNode.attachChild(wall);\n\n        // Display a line of text with a default font\n        guiNode.detachAllChildren();\n        guiFont = assetManager.loadFont("Interface/Fonts/Default.fnt");\n        BitmapText helloText = new BitmapText(guiFont, false);\n        helloText.setSize(guiFont.getCharSet().getRenderedSize());\n        helloText.setText("Hello World");\n        helloText.setLocalTranslation(300, helloText.getLineHeight(), 0);\n        guiNode.attachChild(helloText);\n\n        // Load a model from test_data (OgreXML + material + texture)\n        Spatial ninja = assetManager.loadModel("Models/Ninja/Ninja.mesh.xml");\n        ninja.scale(0.05f, 0.05f, 0.05f);\n        ninja.rotate(0.0f, -3.0f, 0.0f);\n        ninja.setLocalTranslation(0.0f, -5.0f, -2.0f);\n        rootNode.attachChild(ninja);\n        // You must add a light to make the model visible\n        DirectionalLight sun = new DirectionalLight();\n        sun.setDirection(new Vector3f(-0.1f, -0.7f, -1.0f));\n        rootNode.addLight(sun);\n\n    }\n}\n')),Object(l.b)("p",null,'Build and run the code sample. You should see a green Ninja with a\ncolorful teapot standing behind a wall. The text on the screen should\nsay "Hello World".'),Object(l.b)("h1",{id:"the-asset-manager"},"The Asset Manager"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"By game assets we mean all multi-media files, such as models,\nmaterials, textures, whole scenes, custom shaders, music and sound\nfiles, and custom fonts.")," JME3 comes with a handy AssetManager object\nthat helps you access your assets. The AssetManager can load files from:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The current classpath (the top level of your project directory).")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The sub-folders of the ",Object(l.b)("inlineCode",{parentName:"p"},"assets")," directory of your project.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Optionally, custom paths that you register."))),Object(l.b)("p",null,"The following is the recommended directory structure for storing assets\nin your project directoy:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"MyGame/assets/\nMyGame/assets/Interface/\nMyGame/assets/MatDefs/\nMyGame/assets/Materials/\nMyGame/assets/Models/       <-- your .j3o models go here\nMyGame/assets/Scenes/\nMyGame/assets/Shaders/\nMyGame/assets/Sounds/       <-- your audio files go here\nMyGame/assets/Textures/     <-- your textures go here\nMyGame/build.xml            <-- Default Ant build script\nMyGame/src/...              <-- your Java sources go here\nMyGame/...\n")),Object(l.b)("p",null,"This is just a suggested best practice, and it's what you get by default\nwhen creating a new Java project in the jMokeyEngine\n",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk"}),"SDK"),". You can create an ",Object(l.b)("inlineCode",{parentName:"p"},"assets")," directory and\ntechnically name the subdirectories whatever you like."),Object(l.b)("p",null,"::: {.important}\nWhen you build your project for distribution, there will be no ",Object(l.b)("inlineCode",{parentName:"p"},"assets"),"\ndirectory. Instead, you will generate an ",Object(l.b)("inlineCode",{parentName:"p"},"assets.jar")," file, located in\nthe ",Object(l.b)("inlineCode",{parentName:"p"},"dist/lib")," folder of your project that will contain the sub-folders\nof the ",Object(l.b)("inlineCode",{parentName:"p"},"assets")," directory and all the assets in those folders.\n:::"),Object(l.b)("h2",{id:"loading-textures"},"Loading Textures"),Object(l.b)("p",null,"Place your textures in a subdirectory of ",Object(l.b)("inlineCode",{parentName:"p"},"assets/Textures/"),". Load the\ntexture into the material before you set the Material. The following\ncode sample is from the ",Object(l.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method and loads a simple wall\nmodel:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'// Create a wall with a simple texture from test_data\nBox box = new Box(2.5f,2.5f,1.0f);\nSpatial wall = new Geometry("Box", box );\nMaterial mat_brick = new Material(\n    assetManager, "Common/MatDefs/Misc/Unshaded.j3md");\nmat_brick.setTexture("ColorMap",\n    assetManager.loadTexture("Textures/Terrain/BrickWall/BrickWall.jpg"));\nwall.setMaterial(mat_brick);\nwall.setLocalTranslation(2.0f,-2.5f,0.0f);\nrootNode.attachChild(wall);\n')),Object(l.b)("p",null,"In this case, you ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_material"}),"create your own\nMaterial"),' and apply it to a\nGeometry. You base Materials on default material descriptions (such as\n"Unshaded.j3md"), as shown in this example.'),Object(l.b)("h2",{id:"loading-text-and-fonts"},"Loading Text and Fonts"),Object(l.b)("p",null,'This example displays the text "Hello World" in the default font at the\nbottom edge of the window. You attach text to the ',Object(l.b)("inlineCode",{parentName:"p"},"guiNode")," -- this is a\nspecial node for flat (orthogonal) display elements. You display text to\nshow the game score, player health, etc. The following code sample goes\ninto the ",Object(l.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'// Display a line of text with a default font\nguiNode.detachAllChildren();\nguiFont = assetManager.loadFont("Interface/Fonts/Default.fnt");\nBitmapText helloText = new BitmapText(guiFont, false);\nhelloText.setSize(guiFont.getCharSet().getRenderedSize());\nhelloText.setText("Hello World");\nhelloText.setLocalTranslation(300, helloText.getLineHeight(), 0);\nguiNode.attachChild(helloText);\n')),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"Clear existing text in the guiNode by detaching all its children."))),Object(l.b)("h2",{id:"loading-a-model"},"Loading a Model"),Object(l.b)("p",null,"Export your 3D model in a ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/features.xml#supported-external-file-types"}),"Supported External File\nType")," (.mesh.xml,\n.scene, .material, .skeleton.xml, .gltf) and place it in a subdirectory\nof ",Object(l.b)("inlineCode",{parentName:"p"},"assets/Models/"),". The following code sample goes into the\n",Object(l.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'// Load a model from test_data (OgreXML + material + texture)\nSpatial ninja = assetManager.loadModel("Models/Ninja/Ninja.mesh.xml");\nninja.scale(0.05f, 0.05f, 0.05f);\nninja.rotate(0.0f, -3.0f, 0.0f);\nninja.setLocalTranslation(0.0f, -5.0f, -2.0f);\nrootNode.attachChild(ninja);\n// You must add a directional light to make the model visible!\nDirectionalLight sun = new DirectionalLight();\nsun.setDirection(new Vector3f(-0.1f, -0.7f, -1.0f).normalizeLocal());\nrootNode.addLight(sun);\n')),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"You do not need to create a Material if you exported the model with a\nmaterial. Remember to add a light source, as shown, otherwise the\nmaterial (and the whole model) is not visible!"))),Object(l.b)("h2",{id:"loading-assets-from-custom-paths"},"Loading Assets From Custom Paths"),Object(l.b)("p",null,"What if your game relies on user supplied model files, that are not\nincluded in the distribution? If a file is not located in the default\nlocation (e.g. assets directory), you can register a custom Locator and\nload it from any path."),Object(l.b)("p",null,"Here is a usage example of a ZipLocator that is registered to a file\n",Object(l.b)("inlineCode",{parentName:"p"},"town.zip")," in the top level of your project directory:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'    assetManager.registerLocator("town.zip", ZipLocator.class);\n    Spatial scene = assetManager.loadModel("main.scene");\n    rootNode.attachChild(scene);\n')),Object(l.b)("p",null,"Here is a HttpZipLocator that can download zipped models and load them:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'    assetManager.registerLocator("https://storage.googleapis.com/"\n\xa0\xa0\xa0\xa0    \xa0\xa0\xa0 + "google-code-archive-downloads/v2/code.google.com/"\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0     + "jmonkeyengine/wildhouse.zip", HttpZipLocator.class);\n    Spatial scene = assetManager.loadModel("main.scene");\n    rootNode.attachChild(scene);\n')),Object(l.b)("p",null,"JME3 offers ClasspathLocator, ZipLocator, FileLocator, HttpZipLocator,\nand UrlLocator (see ",Object(l.b)("inlineCode",{parentName:"p"},"com.jme3.asset.plugins"),")."),Object(l.b)("h1",{id:"creating-models-and-scenes"},"Creating Models and Scenes"),Object(l.b)("p",null,"To create 3D models and scenes, you need a 3D Mesh Editor. If you don't\nhave any tools, install Blender. Then you ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"http://en.wikibooks.org/wiki/Blender_3D:_Noob_to_Pro/UV_Map_Basics"}),"create fully textured models\n(e.g. with\nBlender)"),",\nexport them to your project using a ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/features.xml#supported-formats"}),"Supported External File\nType"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/features.xml#supported-external-file-types"}),"convert\nmodels")," to ",Object(l.b)("inlineCode",{parentName:"p"},".j3o"),"\nusing the recommended method for your chosen file type, ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_asset.xml#loading-models-and-scenes"}),"load\nmodels"),",\nand create 3D scenes from them."),Object(l.b)("h2",{id:"model-file-formats"},"Model File Formats"),Object(l.b)("p",null,"JME3 can convert and load"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Ogre XML models + materials.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Ogre DotScenes.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Wavefront OBJ + MTL models.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},".gltf"))),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"loadModel()")," method loads these original file formats when you run\nyour code directly from the SDK. If you however build the executables\nusing the default build script, then the original model files (XML, OBJ,\netc) ",Object(l.b)("em",{parentName:"p"},"are not included"),". This means, when you run the executable outside\nthe SDK, and load any original models directly, you get the following\nerror message:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"com.jme3.asset.DesktopAssetManager loadAsset\nWARNING: Cannot locate resource: Models/Ninja/Ninja.mesh.xml\ncom.jme3.app.Application handleError\nSEVERE: Uncaught exception thrown in Thread[LWJGL Renderer Thread,5,main]\njava.lang.NullPointerException\n")),Object(l.b)("p",null,"You see that loading the ",Object(l.b)("strong",{parentName:"p"},"XML/OBJ/GLTF")," directly is only acceptable\nduring the development phase in the SDK. For example, every time your\ngraphic designer pushes updated files to the asset directory, you can\nquickly review the latest version in your development environment."),Object(l.b)("p",null,"But for QA test builds and for the final release build, you use ",Object(l.b)("strong",{parentName:"p"},".j3o\nfiles")," exclusively. J3o is an optimized binary format for jME3\napplications. When you do QA test builds, or are ready to release, use\nthe ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk"}),"SDK")," to\n",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/model_loader_and_viewer"}),"convert")," all\n.obj/.scene/.xml/.gltf files to .j3o files, and update all code to load\nthe .j3o files. The default build script automatically packages .j3o\nfiles in the executables."),Object(l.b)("p",null,"Open your JME3 Project in the jMonkeyEngine SDK."),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},'Right-click a .OBJ, GLTF, or .mesh.xml file in the Projects window,\nand choose "Convert to j3o Binary".')),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"The .j3o file appears next to the .mesh.xml file and has the same\nname.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Update all your ",Object(l.b)("inlineCode",{parentName:"p"},"loadModel()")," lines accordingly. For example:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'Spatial ninja = assetManager.loadModel("Models/Ninja/Ninja.j3o");\n')))),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},'If your executable throws a "Cannot locate resource" runtime exception,\ncheck all load paths and make sure you have converted all models to .j3o\nfiles!'))),Object(l.b)("h2",{id:"loading-models-and-scenes"},"Loading Models and Scenes"),Object(l.b)("p",null,"+---------+------------------------------------------------------------+\n| Task?   | Solution!                                                  |\n+=========+============================================================+\n| Load    | Use the asset manager's ",Object(l.b)("inlineCode",{parentName:"p"},"loadModel()")," method and attach    |\n| model   | the Spatial to the rootNode.                               |\n| W/      |                                                            |\n| mat     | ",Object(l.b)("inlineCode",{parentName:"p"},'java                                                |\n| erials. | Spatial elephant = as                                      |\n|         | setManager.loadModel("Models/Elephant/Elephant.mesh.xml"); |\n|         | rootNode.attachChild(elephant);                            |\n|         | '),"                                                        |\n|         |                                                            |\n|         | ",Object(l.b)("inlineCode",{parentName:"p"},'java                                                |\n|         | Spatial elephant                                           |\n|         |  = assetManager.loadModel("Models/Elephant/Elephant.j3o"); |\n|         | rootNode.attachChild(elephant);                            |\n|         | '),"                                                        |\n+---------+------------------------------------------------------------+\n| Load    | If you have a model without materials, you have to give it |\n| model   | a material to make it visible.                             |\n| W/O     |                                                            |\n| mat     | ",Object(l.b)("inlineCode",{parentName:"p"},'java                                                |\n| erials. | Spatial te                                                 |\n|         | apot = assetManager.loadModel("Models/Teapot/Teapot.j3o"); |\n|         | Material mat = new Material(assetManager, "C               |\n|         | ommon/MatDefs/Misc/ShowNormals.j3md"); // default material |\n|         | teapot.setMaterial(mat);                                   |\n|         | rootNode.attachChild(teapot);                              |\n|         | '),"                                                        |\n+---------+------------------------------------------------------------+\n| Load a  | You load scenes just like you load models:                 |\n| scene.  |                                                            |\n|         | ",Object(l.b)("inlineCode",{parentName:"p"},'java                                                |\n|         | Spatial                                                    |\n|         |  scene = assetManager.loadModel("Scenes/town/main.scene"); |\n|         | rootNode.attachChild(scene);                               |\n|         | '),"                                                        |\n|         |                                                            |\n|         | ",Object(l.b)("inlineCode",{parentName:"p"},'java                                                |\n|         | Spati                                                      |\n|         | al scene = assetManager.loadModel("Scenes/town/main.j3o"); |\n|         | rootNode.attachChild(scene);                               |\n|         | '),"                                                        |\n+---------+------------------------------------------------------------+"),Object(l.b)("h1",{id:"excercise---how-to-load-assets"},"Excercise - How to Load Assets"),Object(l.b)("p",null,"As an exercise, let's try different ways of loading a scene. You will\nlearn how to load the scene directly, or from a zip file."),Object(l.b)("p",null,"Remember that there will be no ",Object(l.b)("inlineCode",{parentName:"p"},"assets")," folder in a final deployment. If\nyou are going to use a zip, do not put it in the ",Object(l.b)("inlineCode",{parentName:"p"},"assets")," folder.\nOtherwise, you will likely get errors about a missing file. For final\ndistribution, add it to your dist folder."),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/wiki/raw/master/src/docs/resources/Scenes/Town/town.zip"}),"Download the\ntown.zip"),"\nsample scene.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Place the town.zip file in the top level directory of your JME3\nproject, like so:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"jMonkeyProjects/MyGameProject/assets/\njMonkeyProjects/MyGameProject/build.xml\njMonkeyProjects/MyGameProject/src/\njMonkeyProjects/MyGameProject/town.zip\n...\n")),Object(l.b)("p",{parentName:"li"},"Use the following method to load models from a zip file:")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Verify ",Object(l.b)("inlineCode",{parentName:"p"},"town.zip")," is in the project directory.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Register a zip file locator to the project directory: Add the\nfollowing code under ",Object(l.b)("inlineCode",{parentName:"p"},"simpleInitApp()"),"."),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'    assetManager.registerLocator("town.zip", ZipLocator.class);\n    Spatial gameLevel = assetManager.loadModel("main.scene");\n    gameLevel.setLocalTranslation(0, -5.2f, 0);\n    gameLevel.setLocalScale(2);\n    rootNode.attachChild(gameLevel);\n')),Object(l.b)("p",{parentName:"li"},"The loadModel() method now searches this zip directly for the files\nto load.\\\n(This means, do not write ",Object(l.b)("inlineCode",{parentName:"p"},"loadModel(town.zip/main.scene)")," or\nsimilar!)")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Clean, build and run the project.\\\nYou should now see the Ninja+wall+teapot standing in a town."))),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"If you register new locators, make sure you do not get any file name\nconflicts: Don't name all scenes ",Object(l.b)("inlineCode",{parentName:"p"},"main.scene")," but give each scene a\nunique name."))),Object(l.b)("p",null,"Earlier in this tutorial, you loaded scenes and models from the asset\ndirectory. This is the most common way you will be loading scenes and\nmodels. Here is the typical procedure:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Remove the code that you added for the previous exercise.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Unzip the town.zip to see the structure of the contained Ogre\ndotScene: You will get a directory named ",Object(l.b)("inlineCode",{parentName:"p"},"town"),". It contains XML,\ntexture files, and a file called main.scene.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Move the unzipped ",Object(l.b)("inlineCode",{parentName:"p"},"town/")," directory into the ",Object(l.b)("inlineCode",{parentName:"p"},"assets/Scenes/"),"\ndirectory of your project.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Add the following code under ",Object(l.b)("inlineCode",{parentName:"p"},"simpleInitApp()"),"."),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'    Spatial gameLevel = assetManager.loadModel("Scenes/town/main.scene");\n    gameLevel.setLocalTranslation(0, -5.2f, 0);\n    gameLevel.setLocalScale(2);\n    rootNode.attachChild(gameLevel);\n')),Object(l.b)("p",{parentName:"li"},"Note that the path is relative to the ",Object(l.b)("inlineCode",{parentName:"p"},"assets/\u2026")," directory.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Clean, build and run the project.\\\nAgain, you should see the Ninja+wall+teapot standing in a town."))),Object(l.b)("p",null,"Here is a third method you must know, loading a scene/model from a .j3o\nfile:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Remove the code from the previous exercise.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"If you haven't already, open the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk"}),"SDK")," and open the\nproject that contains the HelloAsset class.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"In the projects window, browse to the ",Object(l.b)("inlineCode",{parentName:"p"},"assets/Scenes/town"),"\ndirectory.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Right-click the ",Object(l.b)("inlineCode",{parentName:"p"},"main.scene")," and convert the scene to binary: The\njMonkeyPlatform generates a main.j3o file.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Add the following code under ",Object(l.b)("inlineCode",{parentName:"p"},"simpleInitApp() {")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'    Spatial gameLevel = assetManager.loadModel("Scenes/town/main.j3o");\n    gameLevel.setLocalTranslation(0, -5.2f, 0);\n    gameLevel.setLocalScale(2);\n    rootNode.attachChild(gameLevel);\n')),Object(l.b)("p",{parentName:"li"},"Again, note that the path is relative to the ",Object(l.b)("inlineCode",{parentName:"p"},"assets/\u2026")," directory.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Clean, Build and run the project.\\\nAgain, you should see the Ninja+wall+teapot standing in a town."))),Object(l.b)("h1",{id:"conclusion"},"Conclusion"),Object(l.b)("p",null,"Now you know how to populate the scenegraph with static shapes and\nmodels, and how to build scenes. You have learned how to load assets\nusing the ",Object(l.b)("inlineCode",{parentName:"p"},"assetManager")," and you have seen that the paths start relative\nto your project directory. Another important thing you have learned is\nto convert models to .j3o format for the executable JARs etc."),Object(l.b)("p",null,"Let's add some action to the scene and continue with the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_main_event_loop"}),"Update\nLoop"),"!"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"See also:")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/external/blender"}),"The definitive Blender import\ntutorial"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/intermediate/multi-media_asset_pipeline"}),"Asset pipeline\nintroduction"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If you want to learn how to load sounds, see ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_audio"}),"Hello\nAudio"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If you want to learn more about loading textures and materials, see\n",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_material"}),"Hello Material")))))}d.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return h}));var n=a(0),o=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=o.a.createContext({}),d=function(e){var t=o.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):r({},t,{},e)),a},p=function(e){var t=d(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(a),m=n,h=p["".concat(i,".").concat(m)]||p[m]||b[m]||l;return a?o.a.createElement(h,r({ref:t},c,{components:a})):o.a.createElement(h,r({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:n,i[1]=r;for(var c=2;c<l;c++)i[c]=a[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);
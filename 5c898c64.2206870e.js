(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{253:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return b}));var n=a(1),o=a(9),i=(a(0),a(441)),l={},r={id:"jme3/beginner/hello_simpleapplication",title:"hello_simpleapplication",description:"**Prerequisites:** This tutorial assumes that you have [downloaded the",source:"@site/docs/jme3/beginner/hello_simpleapplication.md",permalink:"/wikidemo/docs/jme3/beginner/hello_simpleapplication",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/beginner/hello_simpleapplication.md",sidebar:"main",previous:{title:"jME3",permalink:"/wikidemo/docs/jme3"},next:{title:"hello_node",permalink:"/wikidemo/docs/jme3/beginner/hello_node"}},p=[{value:"Extend SimpleApplication",id:"extend-simpleapplication",children:[{value:"Code Sample",id:"code-sample",children:[]}]},{value:"Start the SimpleApplication",id:"start-the-simpleapplication",children:[]},{value:"Understanding the Terminology",id:"understanding-the-terminology",children:[]},{value:"Initialize the Scene",id:"initialize-the-scene",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],c={rightToc:p};function b(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Prerequisites:")," This tutorial assumes that you have ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../documentation"}),"downloaded the\njMonkeyEngine SDK"),"."),Object(i.b)("p",null,"In this tutorial series, we assume that you use the jMonkeyEngine\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk"}),"SDK"),". As an intermediate or advanced Java developer, you\nwill quickly see that, in general, you can develop jMonkeyEngine code in\nany integrated development environment (NetBeans IDE, Eclipse, IntelliJ)\nor even from the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/simpleapplication_from_the_commandline"}),"command\nline"),"."),Object(i.b)("p",null,"OK, let's get ready to create our first jMonkeyEngine3 application."),Object(i.b)("p",null,"Create a project"),Object(i.b)("p",null,"In the jMonkeyEngine SDK:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Choose ",Object(i.b)("inlineCode",{parentName:"p"},"File > New > Project")," from the main menu.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"In the New Project wizard, select the template ",Object(i.b)("inlineCode",{parentName:"p"},"JME3 Basic Game"),".")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Click Next."),Object(i.b)("p",{parentName:"li"},'a.  Specify a project name, e.g. "HelloWorldTutorial".'),Object(i.b)("p",{parentName:"li"},"b.  Specify a path where to store your new project, e.g. a\n",Object(i.b)("inlineCode",{parentName:"p"},"jMonkeyProjects")," directory in your home directory.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Click Finish."))),Object(i.b)("p",null,"This will create a basic jme3 application for an easy start with jme3.\nYou can click the run button to run it: You will see a blue cube. If you\nhave questions, read more about ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/project_creation"}),"Project\nCreation")," here."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"We recommend to go through the steps yourself, as described in the\ntutorials. Alternatively, you can create a project based on the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/sample_code"}),"JmeTests")," template in the jMonkeyEngine SDK.\nIt will create a project that already contains the ",Object(i.b)("inlineCode",{parentName:"p"},"jme3test.helloworld"),"\nsamples (and many others). For example, you can use the JmeTests project\nto verify whether you got the solution right."))),Object(i.b)("h2",{id:"extend-simpleapplication"},"Extend SimpleApplication"),Object(i.b)("p",null,"For this tutorial, you need a\xa0jme3test.helloworld\xa0package in your\nproject, with the file\xa0HelloJME3.java\xa0in it."),Object(i.b)("p",null,"In the jMonkeyEngine SDK:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"In the ",Object(i.b)("inlineCode",{parentName:"p"},"Source Packages"),' node of your project, RMB select the\n"mygame" package.'),Object(i.b)("p",{parentName:"li"},"a.  Choose: ",Object(i.b)("inlineCode",{parentName:"p"},"Refactor Rename")),Object(i.b)("p",{parentName:"li"},"b.  Enter the New Name: ",Object(i.b)("inlineCode",{parentName:"p"},"jme3test.helloworld")),Object(i.b)("p",{parentName:"li"},"c.  Click Refactor when ready.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"In the newly refactored package, RMB select the ",Object(i.b)("inlineCode",{parentName:"p"},"Main.java")," class."),Object(i.b)("p",{parentName:"li"},"a.  Choose: ",Object(i.b)("inlineCode",{parentName:"p"},"Refactor Rename")),Object(i.b)("p",{parentName:"li"},"b.  Enter the New Name: ",Object(i.b)("inlineCode",{parentName:"p"},"HelloJME3")),Object(i.b)("p",{parentName:"li"},"c.  Click Refactor when ready."))),Object(i.b)("p",null,"You follow this same basic procedure for the remaining tutorials."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"The remaining tutorials all use the same ",Object(i.b)("inlineCode",{parentName:"p"},"jme3test.helloworld"),' package.\nJust refactor the "Main.java" class name to the tutorial examples class\nname rather than creating a new project for each.'))),Object(i.b)("h3",{id:"code-sample"},"Code Sample"),Object(i.b)("hr",null),Object(i.b)("p",null,"Replace the contents of the HelloJME3.java file with the following code."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'package jme3test.helloworld;\n\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.material.Material;\nimport com.jme3.scene.Geometry;\nimport com.jme3.scene.shape.Box;\nimport com.jme3.math.ColorRGBA;\n\n/** Sample 1 - how to get started with the most simple JME 3 application.\n * Display a blue 3D cube and view from all sides by\n * moving the mouse and pressing the WASD keys. */\npublic class HelloJME3 extends SimpleApplication {\n\n    public static void main(String[] args){\n        HelloJME3 app = new HelloJME3();\n        app.start(); // start the game\n    }\n\n    @Override\n    public void simpleInitApp() {\n        Box b = new Box(1, 1, 1); // create cube shape\n        Geometry geom = new Geometry("Box", b);  // create cube geometry from the shape\n        Material mat = new Material(assetManager,\n          "Common/MatDefs/Misc/Unshaded.j3md");  // create a simple material\n        mat.setColor("Color", ColorRGBA.Blue);   // set color of material to blue\n        geom.setMaterial(mat);                   // set the cube\'s material\n        rootNode.attachChild(geom);              // make the cube appear in the scene\n    }\n}\n')),Object(i.b)("p",null,"RMB select the ",Object(i.b)("inlineCode",{parentName:"p"},"HelloJME3")," class and choose ",Object(i.b)("inlineCode",{parentName:"p"},"Run"),". If a jME3 settings\ndialog pops up, confirm the default settings."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"You should see a simple window displaying a 3D cube.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Press the W A S D keys and move the mouse to navigate around.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Look at the FPS text and object count information in the bottom\nleft. You will use this information during development, and you will\nremove it for the release. (To read the numbers correctly, consider\nthat the 14 lines of text counts as 14 objects with 914 vertices.)")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Press Esc to close the application."))),Object(i.b)("p",null,"Congratulations! Now let's find out how it works!"),Object(i.b)("h1",{id:"understanding-the-code"},"Understanding the Code"),Object(i.b)("p",null,"The code above has initialized the scene, and started the application."),Object(i.b)("h2",{id:"start-the-simpleapplication"},"Start the SimpleApplication"),Object(i.b)("p",null,"Look at the first line. Your HelloJME3.java class extends\n",Object(i.b)("inlineCode",{parentName:"p"},"com.jme3.app.SimpleApplication"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"public class HelloJME3 extends SimpleApplication {\n  // your code...\n}\n")),Object(i.b)("p",null,"Every JME3 game is an instance of the ",Object(i.b)("inlineCode",{parentName:"p"},"com.jme3.app.SimpleApplication"),"\nclass. The SimpleApplication class is the simplest example of an\napplication: It manages a 3D scene graph, checks for user input, updates\nthe game state, and automatically draws the scene to the screen. These\nare the core features of a game engine. You extend this simple\napplication and customize it to create your game."),Object(i.b)("p",null,"You start every JME3 game from the main() method, as every standard Java\napplication:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Instantiate your ",Object(i.b)("inlineCode",{parentName:"p"},"SimpleApplication"),"-based class")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Call the application's ",Object(i.b)("inlineCode",{parentName:"p"},"start()")," method to start the game engine."))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"    public static void main(String[] args){\n        HelloJME3 app = new HelloJME3(); // instantiate the game\n        app.start();                     // start the game!\n    }\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"app.start();")," line opens the application window. Let's learn how\nyou put something into this window (the scene) next."),Object(i.b)("h2",{id:"understanding-the-terminology"},"Understanding the Terminology"),Object(i.b)("p",null,"+-----------------------------------+-----------------------------------+\n| What you want to do               | How you say that in JME3          |\n|                                   | terminology                       |\n+===================================+===================================+\n| You want to create a cube.        | I create a Geometry with a 1x1x1  |\n|                                   | Box shape.                        |\n+-----------------------------------+-----------------------------------+\n| You want to use a blue color.     | I create a Material with a blue   |\n|                                   | Color property.                   |\n+-----------------------------------+-----------------------------------+\n| You want to colorize the cube     | I set the Material of the Box     |\n| blue.                             | Geometry.                         |\n+-----------------------------------+-----------------------------------+\n| You want to add the cube to the   | I attach the Box Geometry to the  |\n| scene.                            | rootNode.                         |\n+-----------------------------------+-----------------------------------+\n| You want the cube to appear in    | I create the Box at the origin =  |\n| the center.                       | at ",Object(i.b)("inlineCode",{parentName:"p"},"Vector3f.ZERO"),".               |\n+-----------------------------------+-----------------------------------+"),Object(i.b)("p",null,"If you are unfamiliar with the vocabulary, read more about ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/the_scene_graph"}),"the Scene\nGraph")," here."),Object(i.b)("h2",{id:"initialize-the-scene"},"Initialize the Scene"),Object(i.b)("p",null,"Look at rest of the code sample. The ",Object(i.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method is\nautomatically called once at the beginning when the application starts.\nEvery JME3 game must have this method. In the ",Object(i.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method,\nyou load game objects before the game starts."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"    public void simpleInitApp() {\n       // your initialization code...\n    }\n")),Object(i.b)("p",null,"The initialization code of a blue cube looks as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'    public void simpleInitApp() {\n        Box b = new Box(1, 1, 1); // create a 1x1x1 box shape\n        Geometry geom = new Geometry("Box", b);  // create a cube geometry from the box shape\n        Material mat = new Material(assetManager,\n          "Common/MatDefs/Misc/Unshaded.j3md");  // create a simple material\n        mat.setColor("Color", ColorRGBA.Blue);   // set color of material to blue\n        geom.setMaterial(mat);                   // set the cube geometry \'s material\n        rootNode.attachChild(geom);              // make the cube geometry appear in the scene\n    }\n')),Object(i.b)("p",null,"A typical JME3 game has the following initialization process:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"You initialize game objects:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"You create or load objects and position them.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"You make objects appear in the scene by attaching them to the\n",Object(i.b)("inlineCode",{parentName:"p"},"rootNode"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Examples:")," Load player, terrain, sky, enemies, obstacles,\n..., and place them in their start positions.")))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"You initialize variables:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"You create variables to track the game state.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"You set variables to their start values.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Examples:")," Set the ",Object(i.b)("inlineCode",{parentName:"p"},"score")," to 0, set ",Object(i.b)("inlineCode",{parentName:"p"},"health")," to 100%, ...")))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"You initialize keys and mouse actions:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The following input bindings are pre-configured:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"W A S D keys -- Move around in the scene")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Mouse movement and arrow keys -- Turn the camera")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Esc key -- Quit the game")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Define your own additional keys and mouse click actions.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Examples:")," Click to shoot, press Space to jump, ..."))))),Object(i.b)("h1",{id:"the-future-of-simpleapplication"},"The Future of SimpleApplication"),Object(i.b)("p",null,"There are plans to change SimpleApplication. Sometime back it was\ndecided that we should really re-factor the Application class.\nSimpleApplication especially is a mess of \"magic\" protected fields that\non the one hand makes it really easy to slam some simple one-class\napplication together, but on the other hand does new users no favors\nbecause they have no idea where \\'cam\\' and \\'assetManager\\' come from.\nUnfortunately, lots of code refers to Application and it's tough to\nchange...\u200b especially the app states."),Object(i.b)("p",null,"So, we hatched a plan to convert the Application class to an interface.\nThis would give us some freedom to iterate on a new set of application\nbase classes. You can read about the changes\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://hub.jmonkeyengine.org/t/jmonkeyengine-3-1-alpha-4-released/35478"}),"here"),".\nAs said before we are envisioning a better design that is not enforced\ntoday, but that is already usable."),Object(i.b)("p",null,"If you look at SimpleApplication default constructor you will understand\nhow it works."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"public SimpleApplication() {\xa0\xa0\xa0\n    this(new StatsAppState(), new FlyCamAppState(), new AudioListenerState(), new DebugKeysAppState());}\n")),Object(i.b)("p",null,"Basically the application is injected upon construction with the default\nAppStates. Let's look at the second constructor."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"public SimpleApplication( AppState... initialStates ) {\xa0\xa0\xa0\n    super(initialStates);\n}\n")),Object(i.b)("p",null,"It allows you to specify what AppState you want for your application. So\nSimpleApplication is handy for test projects (I very often use it as is)\nbut I recommend for a full blown-game to use it like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"public class MyGame extends SimpleApplication {\n\n    public MyGame(){\n         super(new MyCustomSate(), new AnotherState(), ....);\n    }\n\n    public static void main(String[] args) {\n        MyGame app = new MyGame();\n        app.start();\n    }\n\n}\n")),Object(i.b)("p",null,"Then have all logic implemented in\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"AppStates")," and your\nSimpleApplication will never change much, except when you want to add a\nbootstrap AppState (or maybe you can have an AppState that manages\nAppStates...\u200b), SimpleApplication is just the list of states you are\nusing."),Object(i.b)("p",null,"In future versions, all the code in SimpleApplication will be refactored\nin AppStates (InputHandlingState, RenderAppState, whatever) and you will\ndecide what you want to use. However, for legacy sake we kept the code\nas is for now."),Object(i.b)("p",null,"If you follow this recommendation, when the changes are finalized, you\nwill only need to do a few things different from now to make your old\napps work and to create new ones."),Object(i.b)("p",null,"a.  Extend BaseApplication rather than SimpleApplication when creating\nnew apps."),Object(i.b)("p",null,"b.  Update your existing apps by changing SimpleApplication to\nBaseApplication in your main class."),Object(i.b)("p",null,"c.  Change any references you have made to SimpleApplication's protected\nfields."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"For example, rather than turning off the FlyCam() like so,\n\n```java\nflyCam.setEnabled(false);\n```\n\nYou would just leave the statement `new FlyCamAppState()` out of the\nconstructor instead.\n")),Object(i.b)("p",null,"SimpleApplication will be around for some time as it will take time for\npeople to migrate to BaseApplication, but AppStates make life easier\nanyway so you may as well start using them."),Object(i.b)("h2",{id:"conclusion"},"Conclusion"),Object(i.b)("p",null,"You have learned that a SimpleApplication is a good starting point\nbecause it provides you with:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"A ",Object(i.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method where you create objects.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"A ",Object(i.b)("inlineCode",{parentName:"p"},"rootNode")," where you attach objects to make them appear in the\nscene.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Useful default input settings that you can use for navigation in the\nscene."))),Object(i.b)("p",null,"When developing a game application, you want to:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Initialize the game scene")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Trigger game actions")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Respond to user input."))),Object(i.b)("p",null,"The now following tutorials teach how you accomplish these tasks with\nthe jMonkeyEngine 3."),Object(i.b)("p",null,"Continue with the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/beginner/hello_node"}),"Hello Node"),"\ntutorial, where you learn more details about how to initialize the game\nworld, also known as the scene graph."),Object(i.b)("p",null,"See also:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../documentation"}),"Install the jMonkeyEngine"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/simpleapplication_from_the_commandline"}),"SimpleApplication From the\nCommandline"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/project_creation"}),"Create a JME3 project"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"AppStates")))))}b.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return h}));var n=a(0),o=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=o.a.createContext({}),b=function(e){var t=o.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):r({},t,{},e)),a},s=function(e){var t=b(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=b(a),u=n,h=s["".concat(l,".").concat(u)]||s[u]||m[u]||i;return a?o.a.createElement(h,r({ref:t},c,{components:a})):o.a.createElement(h,r({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:n,l[1]=r;for(var c=2;c<i;c++)l[c]=a[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[297],{436:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(1),i=a(9),o=(a(0),a(441)),r={},s={id:"jme3/intermediate/best_practices",title:"best_practices",description:"Every milestone of a game development project is made up of phases:",source:"@site/docs/jme3/intermediate/best_practices.md",permalink:"/wikidemo/docs/jme3/intermediate/best_practices",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/intermediate/best_practices.md",sidebar:"main",previous:{title:"hello_physics",permalink:"/wikidemo/docs/jme3/beginner/hello_physics"},next:{title:"simpleapplication",permalink:"/wikidemo/docs/jme3/intermediate/simpleapplication"}},l=[{value:"Requirements Gathering",id:"requirements-gathering",children:[]},{value:"Planning Development Milestones",id:"planning-development-milestones",children:[]},{value:"Use File Version Control",id:"use-file-version-control",children:[]},{value:"Extend SimpleApplication",id:"extend-simpleapplication",children:[]},{value:"Where to Start?",id:"where-to-start",children:[]},{value:"The Smart Way to Add Custom Methods and Fields",id:"the-smart-way-to-add-custom-methods-and-fields",children:[]},{value:"The Smart Way to Access Game Features",id:"the-smart-way-to-access-game-features",children:[]},{value:"The Smart Way to Implement Game Logic",id:"the-smart-way-to-implement-game-logic",children:[]},{value:"Optimize Application Performance",id:"optimize-application-performance",children:[]},{value:"Don&#39;t Mess With Geometric State",id:"dont-mess-with-geometric-state",children:[]},{value:"Maintain Internal Documentation",id:"maintain-internal-documentation",children:[]},{value:"Pre-Release To-Do List",id:"pre-release-to-do-list",children:[]},{value:"Distributing the Executables",id:"distributing-the-executables",children:[]}],c={rightToc:l};function p(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Every milestone of a game development project is made up of phases:\nPlanning, development, testing, and release. Every milestone involves\nupdates to multi-media assets and to code."),Object(o.b)("p",null,'This \\"best practices\\" page is a collection of recommendations and\nexpert tips. Feel free to add your own!'),Object(o.b)("h1",{id:"requirements-and-planning"},"Requirements and Planning"),Object(o.b)("p",null,"If you are a beginner, you should first ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.hobbygamedev.com/digests/?page=free"}),"read\nsome")," ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://gamasutra.com/"}),"articles\nabout")," ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.google.com/search?q=3d+game+development"}),"game\ndevelopment"),". We\ncannot cover all general tips here."),Object(o.b)("h2",{id:"requirements-gathering"},"Requirements Gathering"),Object(o.b)("p",null,"As a quick overview, answer yourself the following questions:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Motivation"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Sum up your game idea in one catchy sentence. If you can't, it's\ntoo complicated.\\\nExmple: \\\"Craft by day, fight by night!\\\"")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Who's the target group? Are you making it for your friends or\nare you trying to attract the masses?")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Game type"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Point of view (first- or third-person camera)? What characters\ndoes the player control? (if applicable)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Time- or turn-based?")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Genre (drama, horror, adventure, mystery, comedy, educational,\ndocumentary)?")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Setting and background story? (historic, fantasy, anime,\nfuturistic, utopia/dystopia, pirate, zombie, vampire...)?")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Gameplay"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"What is the start state, what is the end state? (if applicable)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"What resources does the player manage? How are resources gained,\ntransformed, spent?\\\nExmple: points, health, speed, gold, xp, mana.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"How does the player interact? Define rules, challenges, game\nmechanics.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"What state is considered winning, and what losing, or is it an\nopen world?")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Multi-media assets"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Which media will you need? How will you get this content?\\\nExmple: models, terrains; materials, textures; noises, music,\nvoices; video, cutscenes; spoken/written dialog; level maps,\nquests, story; AI scripts."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Interface"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Can you achieve a high degree of input control? (Even minor\nnavigation and interaction glitches make the game unsolvable.)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Decide how to reflect current status, and changes in game\nstates. E.g. health/damage in HUD.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Decide how to reward good moves and discourage bad ones."))))),Object(o.b)("h2",{id:"planning-development-milestones"},"Planning Development Milestones"),Object(o.b)("p",null,"Use an ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Issue_tracking_system"}),"issue and bug\ntracker")," to outline\nwhat features you want and what components are needed."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Pre-Alpha Development"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Artwork: Test asset loading and saving with mock-ups and stock\nart.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Lay out the overall application flow, i.e. switching between\nintro / options / game screen, etc.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Get one typical level working before you can announce the Alpha\nRelease.\\\nExmple: if the game is a \\\"Jump'n'Run\\\", jumping and running\nmust work.")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Alpha Release")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Pre-Beta Development"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Artwork: Replace all mock-ups with first drafts of real media\nand level maps.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Have your team members review and alpha test it on various\nsystems, track bugs, debug, optimize.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Declare ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Feature_freeze"}),"Feature\nFreeze")," before you\nannounce the Beta Release to prevent a bottomless pit of new\nbugs.")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Beta Release")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Post-Beta Development"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Artwork: Fill in the final media and level maps.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Have external people review and beta test it, make it easy to\nreport bugs.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Fix high-priority bugs, even out the kinks in code and gameplay,\ndon't add new features for now!")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Gamma Release, Delta Release... = Release Candidates"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Think you're done? Make test runs incl. packaging and\ndistribution. (Order form? download?)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Test the heck out of it. Last chance to find and fix a horrible\nbug.")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Omega = Final Release"))),Object(o.b)("p",null,"How you name or number these stages is fully up to your team.\nDevelopment teams use numbered milestones (m1, m2, m3), Greek letters\n(ex. alpha, beta, gamma, delta), ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Software_versioning"}),'\\"major.minor.patch-build\\"\nversion'),' numbering\n(ex. \\"2.7.23-1328\\"), or combinations thereof.'),Object(o.b)("h2",{id:"use-file-version-control"},"Use File Version Control"),Object(o.b)("p",null,"Whether you work in a team or alone, keeping a version controlled\nrepository of your code will help you roll-back buggy changes, or\nrecover old code that someone deleted and that is now needed again."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},'Treat commit messages as messages to your future self. \\"Made some\nchanges\\" is ',Object(o.b)("em",{parentName:"p"},"not")," a commit message.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The jMonkeyEngine SDK supports Subversion, Mercurial, and Git.\\\nIf you don't know which to choose, Subversion is a good choice for\nstarters.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Set up your own local server, or get free remote hosting space from\nvarious open-source dev portals like\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://sourceforge.net/"}),"SourceForge"),",\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/"}),"GitHub"),", ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://bitbucket.org/"}),"BitBucket"),"\n(supports private projects), ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://about.gitlab.com/"}),"GitLab"),"\n(free private projects)..."))),Object(o.b)("h1",{id:"multi-media-asset-pipeline"},"Multi-Media Asset Pipeline"),Object(o.b)("p",null,"+-----------------------------------+-----------------------------------+\n| DO                                | DON'T                             |\n+===================================+===================================+\n| Save original models+textures     | Don't reference textures or       |\n| into ",Object(o.b)("inlineCode",{parentName:"p"},"assets/Textures"),".           | models outside your JME project.  |\n+-----------------------------------+-----------------------------------+\n| Save sounds into ",Object(o.b)("inlineCode",{parentName:"p"},"assets/Sounds.")," | Don't reference audio files       |\n|                                   | outside your JME project.         |\n+-----------------------------------+-----------------------------------+\n| Create simple, low-polygon        | Don't create high-polygon models, |\n| models.                           | they render too slow to be useful |\n|                                   | in games.                         |\n+-----------------------------------+-----------------------------------+\n| Only use Diffuse Map, Normal Map, | Don't use unsupported material    |\n| Glow Map, Specular Map.           | properties that are not listed in |\n|                                   | the ","[Materials                    |\n|                                   | Overview]","(../../jme3/             |\n|                                   | advanced/materials_overview). |\n+-----------------------------------+-----------------------------------+\n| Use UV texture / texture atlases  | Don't create models based on      |\n| / baking for each texture map.    | multiple separate textures, it    |\n|                                   | will break the model into         |\n|                                   | separate meshes.                  |\n+-----------------------------------+-----------------------------------+\n| Convert Models to j3o format.     | Don't reference GLTF/Ogre/OBJ     |\n| Move j3o files into               | files in your load() code,        |\n| ",Object(o.b)("inlineCode",{parentName:"p"},"assets/Models"),".                  | because these unoptimized files   |\n|                                   | are not packaged into the JAR.    |\n+-----------------------------------+-----------------------------------+"),Object(o.b)("p",null,"Learn details about the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/intermediate/multi-media_asset_pipeline"}),"Multi-Media Asset\nPipeline")," here."),Object(o.b)("h1",{id:"development-phase"},"Development Phase"),Object(o.b)("p",null,'::: {.note}\nMany game developers dream of creating their very own MMORPG with\nfull-physics, AI, post-rendering effects, multi-player networking,\nprocedurally generated maps, and customizable characters. So why aren\'t\nthere tons of MMORPGs out there?\\\nEven for large experienced game producers, the creation of such a\ncomplex game is time-intensive and failure-prone. How familiar are you\nwith multi-threading, persistence, optimization, client-server\nsynchonization, ...? Unless your answer is \\"very!\\", then start with a\nsingle-player desktop game, and work your way up -- just as the pros did\nwhen they started.\n:::'),Object(o.b)("h2",{id:"extend-simpleapplication"},"Extend SimpleApplication"),Object(o.b)("p",null,"Every jME3 game is centered around one main class that (directly or\nindirectly) extends\ncom.jme3.app.",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/intermediate/simpleapplication"}),"SimpleApplication"),"."),Object(o.b)("p",null,'::: {.important}\nNote that although the \\"SimpleApplication\\" name might be misleading,\nall jME3 applications, including very large projects, are based on this\nclass. The name only implies that this class itself is a simple\napplication already. You make it \\"non-simple\\" by extending it!\n:::'),Object(o.b)("p",null,"For your future game releases, you will want to rely on your own\nframework (based on jME): Your custom framework extends jME's\nSimpleApplication, and includes your custom methods for loading, saving,\nand arranging your scenes, your custom navigation methods, your inputs\nfor pausing and switching your custom screens, your custom user\ninterface (options screen, HUD, etc), your custom NPC factory, your\ncustom physics properties, your custom networking synchronization, etc."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Writing and reusing (extending) your own base framework saves you time.\nWhen you update your generic base classes, all your games that extend\nthem benefit from improvements to the base (just as all jME-based games\nbenefit of improvements to the jME framework).\\\nAlso, your own framework gives all your games a common look and feel."))),Object(o.b)("h2",{id:"where-to-start"},"Where to Start?"),Object(o.b)("p",null,"You have a list of features that you want in game, but which one do you\nimplement first? You will keep adding features to a project that grows\nmore and more complex, how can you minimize the amount of rewriting\nrequired?"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Make sure the game's high-level frame (screen switching, network\nsync, loading/saving) is sound and solid.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Start with implementing the most complex game feature first -- the\none that imposes most constraints on the structure of your project\n(for example: multi-player networking, or physics.)")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Add only one larger feature at a time. If there are complex\ninteractions (such as networking + physics), start with a small test\ncase (one shared cube) and work your way up. Starting with a whole\nscene introduces too many extra sources of error.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Implement low-complexity decorations (audio and visual effects)\nlast.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Test for side-effects on existing code after you add a new feature\n(regression test)."))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},'Acknowledge whether you want a feature because it is necessary for\ngameplay, or simply because \\"everyone else has it\\". Your goal should\nbe to bring out the essence of your game idea. Don\'t water down gameplay\nby attempting to make it \\"do everything, but better\\". Successful\nhigh-performance games are the ones where someone made smart decisions\nwhat to keep and what to ',Object(o.b)("em",{parentName:"p"},"drop"),"."))),Object(o.b)("h2",{id:"the-smart-way-to-add-custom-methods-and-fields"},"The Smart Way to Add Custom Methods and Fields"),Object(o.b)("p",null,"::: {.warning}\n",Object(o.b)("strong",{parentName:"p"},"Avoid the Anti-Pattern:")," Don't design complex role-based classes\nusing Java inheritance, it will result in an unmaintainable mess.\\\nExample: You start extending ",Object(o.b)("inlineCode",{parentName:"p"},"Node")," --",">"," ",Object(o.b)("inlineCode",{parentName:"p"},"MyMobileNode")," --",">"," ",Object(o.b)("inlineCode",{parentName:"p"},"MyNPC"),".\nThen you extend ",Object(o.b)("inlineCode",{parentName:"p"},"MyFighterNPC")," (defends, attacks) and ",Object(o.b)("inlineCode",{parentName:"p"},"MyShopKeeperNPC"),"\n(trades) from ",Object(o.b)("inlineCode",{parentName:"p"},"MyNPC"),". What if you need an NPC that trades and defends\nitself, but doesn't attack? Do you extend MyShopKeeperNPC and copy and\npaste the defensive methods from MyFighterNPC? Or do you extend\nMyFighterNPC and override the attacking methods of its parent? Neither\nis a clean solution.\\\nWouldn't it be better if behaviours were a separate system, and\nattributes were separate components that you add to the entity that\nneeds them?\n:::"),Object(o.b)("p",null,"You write Java classes named ",Object(o.b)("inlineCode",{parentName:"p"},"Controls")," to implement your Game Entities,\nand define an Entity's visuals, attributes, and behaviours. In jME,\n",Object(o.b)("inlineCode",{parentName:"p"},"Spatial`s (`Nodes")," or ","`","Geometry","`","s) are the visual representation\nof the game entity in the scene graph."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Game entities have ",Object(o.b)("strong",{parentName:"p"},"attributes")," -- All Entities are neutral\n",Object(o.b)("em",{parentName:"p"},"things"),", only their attributes define what an entity actually ",Object(o.b)("em",{parentName:"p"},"is"),'\n(a person or a brick). In jME, we call these class fields of\nSpatials \\"user data\\".\\\nExample: Players have ',Object(o.b)("strong",{parentName:"p"},"class fields")," for\n",Object(o.b)("inlineCode",{parentName:"p"},"id, health, coins, inventory, equipment, profession"),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Game entities have ",Object(o.b)("strong",{parentName:"p"},"behaviours")," -- Behaviour systems communicate\nabout the game state and modify attributes. In jME, these game\nmechanics are implemented in modular ",Object(o.b)("inlineCode",{parentName:"p"},"update()")," methods that all\nhook into the main update loop.\\\nExample: Players have ",Object(o.b)("strong",{parentName:"p"},"methods")," such as\n",Object(o.b)("inlineCode",{parentName:"p"},"walk(), addGold(), getHealth(), pickUpItem(), dropItem(), useItem(), attack()"),"."))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},Object(o.b)("strong",{parentName:"p"},"Follow the Best Practice:")," In general, use composition over\ninheritance and keep what an entity does (behaviour system) separate\nfrom what this entity is (attributes)."),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Use ",Object(o.b)("inlineCode",{parentName:"p"},"setUserData()")," to add custom attributes to Spatials.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Use ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/custom_controls"}),"Controls")," and\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"Application States")," to\ndefine custom behaviour systems."))))),Object(o.b)("p",null,'If your game is even more complex, you may want to learn about \\"real\\"\nEntity Systems, which form a quite different programming paradigm from\nobject oriented coding but are scalable to very large proportions. Note\nhowever that this topic is very unintuitive to handle for an OOP\nprogrammer and you should really decide on a case basis if you really\nneed this or not and gather some experiences before diving head first\ninto a MMO project emoji:smiley',"[","]"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/"}),"http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.gamasutra.com/blogs/MeganFox/20101208/88590/Game_Engines_101_The_EntityComponent_Model.php"}),"http://www.gamasutra.com/blogs/MeganFox/20101208/88590/Game_Engines_101_The_EntityComponent_Model.php"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://gamedev.stackexchange.com/questions/28695/variants-of-entity-component-systems"}),"http://gamedev.stackexchange.com/questions/28695/variants-of-entity-component-systems"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://t-machine.org/index.php/2012/03/16/entity-systems-what-makes-good-components-good-entities/"}),"http://t-machine.org/index.php/2012/03/16/entity-systems-what-makes-good-components-good-entities/"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://entity-systems.wikidot.com/"}),"http://entity-systems.wikidot.com/")))),Object(o.b)("h2",{id:"the-smart-way-to-access-game-features"},"The Smart Way to Access Game Features"),Object(o.b)("p",null,Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/intermediate/simpleapplication"}),"SimpleApplication")," gives\nyou access to game features such as a the rootNode, assetManager,\nguiNode, inputManager, audioManager, physicsSpace, viewPort, and the\ncamera. But what if you need this access also from another class? Don't\nextend SimpleApplication a second time, and don't pass around tons of\nobject references in constructors! Needing access to application level\nobjects is a sign that this class should be designed as an\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"AppState")," (read details\nthere)."),Object(o.b)("p",null,"An AppState has access to all game features in the SimpleApplication via\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"this.app")," and ",Object(o.b)("inlineCode",{parentName:"p"},"this.stateManager")," objects. Examples:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'Spatial sky = SkyFactory.createSky(this.app.getAssetManager(), "sky.dds", false);\n...\nthis.app.getRootNode().attachChild( sky );\n')),Object(o.b)("h2",{id:"the-smart-way-to-implement-game-logic"},"The Smart Way to Implement Game Logic"),Object(o.b)("p",null,"As your SimpleApplication-based game grows more advanced, you find\nyourself putting more and more interactions in the ",Object(o.b)("inlineCode",{parentName:"p"},"simpleUpdate()"),"\nloop, and your ",Object(o.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," methods grows longer and longer. It's a\nbest practice to move blocks of game mechanics into reusable component\nclasses of their own. In jME3, these resuable classes are called\n",Object(o.b)("inlineCode",{parentName:"p"},"Controls")," and ",Object(o.b)("inlineCode",{parentName:"p"},"AppStates"),"."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Use ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"AppStates")," to\nimplement ",Object(o.b)("em",{parentName:"p"},"global game mechanics"),"."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Each AppState calls its own ",Object(o.b)("inlineCode",{parentName:"p"},"initialize()")," and ",Object(o.b)("inlineCode",{parentName:"p"},"cleanup()"),"\nmethods when it is attached to or detached from the game.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Each AppState runs its own ",Object(o.b)("em",{parentName:"p"},"thread-safe")," ",Object(o.b)("inlineCode",{parentName:"p"},"update()")," loop that\nhooks into the main ",Object(o.b)("inlineCode",{parentName:"p"},"simpleUpdate()")," loop.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"You specify what happens if an AppState is paused/unpaused.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"You can use an AppState to switch between sets of AppStates.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"An AppState has access to everything in the SimpleApplication\n(rootNode, AssetManager, StateManager, InputListener, ViewPort,\netc).")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Use ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/custom_controls"}),"Controls")," to implement\nthe ",Object(o.b)("em",{parentName:"p"},"behaviour of game entities"),"."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Controls add a type of behaviour (methods and fields) to an\nindividual Spatial (a player, an NPC).")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Each Control runs its own ",Object(o.b)("em",{parentName:"p"},"thread-safe")," ",Object(o.b)("inlineCode",{parentName:"p"},"controlUpdate()")," loop\nthat hooks into the main ",Object(o.b)("inlineCode",{parentName:"p"},"simpleUpdate()")," loop.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"One Spatial can be influenced by several Controls. (!)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Each Spatial needs its own instance of the Control.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"A Control only has control over and access to the spatial that\nit is attached to (and its sub-spatials)."))))),Object(o.b)("p",null,"::: {.note}\nA game contains algorithms that do not directly affect spatials (for\nexample, AI pathfinding code that calculates and chooses paths, but does\nnot actually move spatials). You do not need to put such non-spatial\ncode in controls, you can run thse things in a new thread. Only the\ntranformation code that actually modifies the spatial must be called\nfrom a control, or must be enqueue()ed.\n:::"),Object(o.b)("p",null,"Controls and AppStates often work together: An AppState can reach up to\nthe application and ",Object(o.b)("inlineCode",{parentName:"p"},"get")," all Spatials from the rootNode that carry a\nspecific Control, and perform a global action on them. Example: In\nBulletPhysics, all physical Spatials that carry RigidBodyControls are\nsteered by the overall BulletAppState."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"AppStates and Controls are extensions to a SimpleApplication. They are\nyour modular building blocks to build a more complex game. In the ideal\ncase, you move all init/update code into Controls and AppStates, and\nyour simpleInitApp() and simpleUpdate() could end up virtually empty.\nThis powerful and modular approach cleans up your code considerably."))),Object(o.b)("p",null,"Read all about ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/custom_controls"}),"Custom\nControls")," and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"Application\nStates")," here."),Object(o.b)("h2",{id:"optimize-application-performance"},"Optimize Application Performance"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/intermediate/optimization"}),"Optimization")," -- How to\navoid wasting cycles")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/multithreading"}),"Multithreading")," -- Use\nconcurrency for long-running background tasks, but don't manipulate\nthe scene graph from outside the main thread (update loop)!")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"You can add a ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/debugging_profiling_testing"}),"Java\nProfiler")," to the\njMonkeyEngine SDK via Tools \u2192 Plugins \u2192 Available. The profiler\npresents statistics on the lifecycle of methods and objects.\nPerformance problems may be caused by just a few methods that take\nlong, or are called too often (try to cache values to avoid this).\nIf object creation and garbage collection counts keep increasing,\nyou are looking at a memory leak."))),Object(o.b)("h2",{id:"dont-mess-with-geometric-state"},"Don't Mess With Geometric State"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"These tips are especially important for users who already know jME2."),"\nAutomatic handling of the Geometric State has improved in jME3, and it\nis now a best practice to ",Object(o.b)("em",{parentName:"p"},"not")," mess with it."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Do not call ",Object(o.b)("inlineCode",{parentName:"p"},"updateGeometricState()")," on anything but the root node!")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Do not override or mess with ",Object(o.b)("inlineCode",{parentName:"p"},"updateGeometricState()")," at all.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Do not use ",Object(o.b)("inlineCode",{parentName:"p"},"getLocalTranslation().set()")," to move a spatial in jME3,\nalways use ",Object(o.b)("inlineCode",{parentName:"p"},"setLocalTranslation()"),"."))),Object(o.b)("h2",{id:"maintain-internal-documentation"},"Maintain Internal Documentation"),Object(o.b)("p",null,"It's unlikely you will fully document ",Object(o.b)("em",{parentName:"p"},"every")," class you write, we hear\nyou. However, you should at least write meaningful javadoc to provide\ncontext for your most crucial methods/parameters."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"What is this? How does it solve its task (input, algorithm used,\noutput, side-effects)?")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Write down implicit limits (e.g. min/max values) and defaults while\nyou still remember.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"In which situation do I want to use this, is this part of a larger\nprocess? Is this step required, or what are the alternatives?"))),Object(o.b)("p",null,"Treat javadoc as messages to your future self.\n",Object(o.b)("inlineCode",{parentName:"p"},"genNextVal() generates the next value")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"@param float factor A factor influencing the result")," do ",Object(o.b)("em",{parentName:"p"},"not")," count as\ndocumentation."),Object(o.b)("h1",{id:"debugging-and-test-phase"},"Debugging and Test Phase"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"A ",Object(o.b)("a",Object(n.a)({parentName:"strong"},{href:"../../sdk/debugging_profiling_testing"}),"Java Debugger"))," is\nincluded in the jMonkeyEngine SDK. It allows you to set a break point in\nyour code near the line of code where an exception happens. Then you\nstep through the execution line by line and watch object and variable\nstates live, to detect where the bug starts."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Use the ",Object(o.b)("a",Object(n.a)({parentName:"strong"},{href:"../../jme3/advanced/logging"}),"Logger"))," to print status\nmessages during the development and debugging phase, instead of\nSystem.out.println(). The logger can be switched off with one line of\ncode, whereas commenting out all your ","`","println()","`","s takes a while."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Unit Testing (",Object(o.b)("a",Object(n.a)({parentName:"strong"},{href:"https://docs.oracle.com/javase/1.5.0/docs/guide/language/assert.html"}),"Java\nAssertions"),")"),"\nhas a different status in 3D graphics development than in other types of\nsoftware. You cannot write assertions that automatically test whether\nthe rendered image ",Object(o.b)("em",{parentName:"p"},"looks")," correct, or whether interactions are\n",Object(o.b)("em",{parentName:"p"},"intuitive"),". Still you should ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/debugging_profiling_testing"}),"create simple test\ncases")," for individual game\nfeatures such as loaders, content generators, effects. Run the test\ncases now and then to see whether they still work as intended -- or\nwhether they are suffering from regressions or side-effects. Keep the\ntest classes in the ",Object(o.b)("inlineCode",{parentName:"p"},"test")," directory of your project, don't include them\nin the distribution."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Quality Assurance (QA)")," means repeatedly checking a certain set of\nfeatures that must work, but that might be unexpectedly broken as a\nside-effect. Every game has some crazy bugs somewhere -- but basic tasks\n",Object(o.b)("em",{parentName:"p"},"must work"),", no excuse. This includes installing and de-installing;\nsaving and loading; changing options; starting, pausing, quitting; basic\nactions such as walking, fighting, etc. After every milestone, you go\nthrough your QA list again and systematically look for regressions or\nnewly introduced bugs. Check the application ",Object(o.b)("em",{parentName:"p"},"on every supported\noperating system and hardware")," (!) because not all graphic cards support\nthe same features. If you don't find the obvious bugs, your users will,\nand carelessness will put them off."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Alpha and Beta Testing")," means that you ask someone to try to install\nand run your game. It should be a real user situation, where they are\nleft to figure out the installation and gameplay by themselves--you only\ncan include the usual read-me and help docs. Provide the testers with an\neasy method to report back what problems they encountered, what they\nliked best, or why they gave up. Evaluate whether reported problems are\none-off glitches, or whether they must be fixed for the game to be\nplayable for everyone."),Object(o.b)("h1",{id:"release-phase"},"Release Phase"),Object(o.b)("h2",{id:"pre-release-to-do-list"},"Pre-Release To-Do List"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Prepare a web page, a cool slogan, advertisements, etc")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Verify that all assets are up-to-date and converted to .j3o.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Verify that your code loads the optimized .j3o files, and not the\noriginal model formats.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Prepare licenses of assets that you use for inclusion. (You ",Object(o.b)("em",{parentName:"p"},"did"),"\nobtain permission to use them, right...?)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Switch off fine ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/logging"}),"logging")," output.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Prepare promotional art: The most awesome screenshots (in thumbnail,\nsquare, vertical, horizontal, and fullscreen formats) and video\nclips. Include name, contact info, slogan, etc., so future customers\ncan find you.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Prepare a readme.txt file, or installation guide, or handbook -- if\napplicable.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Get a certificate if one is required for your distribution method\n(see below).")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Specify a ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Video_game_content_rating_system#Comparison"}),"classification\nrating"),"\n(needed for e.g. app stores)."))),Object(o.b)("h2",{id:"distributing-the-executables"},"Distributing the Executables"),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/application_deployment"}),"jMonkeyEngine SDK helps you with\ndeployment"),": You specify your\nbranding and deployment options in the Project Properties dialog, and\nthen choose Clean and Build from the context menu. ",Object(o.b)("strong",{parentName:"p"},"If you use another\nIDE, consult this IDE's documentation.")),Object(o.b)("p",null,"Decide whether you want to release your game as WebStart, desktop JAR,\nmobile APK, or browser Applet -- Each has its pros and cons."),Object(o.b)("p",null,"+-------------+---------------------------+---------------------------+\n| D           | Pros                      | Cons                      |\n| istribution |                           |                           |\n+=============+===========================+===========================+\n| Desktop     | This is the standard way  | You need to offer three   |\n| Launcher\\   | of distributing desktop   | separate,                 |\n| (.EXE,      | applications. The         | platform-dependent        |\n| .app,       | jMonkeyEngine SDK can be  | downloads.                |\n| .jar+.sh)   | configured to             |                           |\n|             | automatically create      |                           |\n|             | zipped launchers for each |                           |\n|             | operating system.         |                           |\n+-------------+---------------------------+---------------------------+\n| Desktop     | Platform independent      | User must have Java       |\n| A           | desktop application.      | configured to run JARs    |\n| pplication\\ |                           | when they are opened; or  |\n| (.JAR)      |                           | user must know how to run |\n|             |                           | JARs from command line;   |\n|             |                           | or you must provide a     |\n|             |                           | custom JAR wrapper.       |\n+-------------+---------------------------+---------------------------+\n| Web Start\\  | The user accesses a URL,  | Users need network        |\n| (.JNLP)     | saves the game as one     | connection to install the |\n|             | executable file. Easy     | game. Downloading bigger  |\n|             | process, no installer     | games takes a while as    |\n|             | required. You can allow   | opposed to running them   |\n|             | the game to be played     | from a CD.                |\n|             | offline.                  |                           |\n+-------------+---------------------------+---------------------------+\n| Browser     | Easy to access and play   | Game only runs in the     |\n| Applet\\     | game via most web         | browser. Game or settings |\n| (           | browsers. Userfriendly    | cannot be saved to disk.  |\n| .HTML+.JAR) | solution for quick small  | Some restrictions in      |\n|             | games.                    | default camera navigation |\n|             |                           | (jME cannot capture       |\n|             |                           | mouse.)                   |\n+-------------+---------------------------+---------------------------+\n| Android\\    | Game runs on Android      | Android devices do not    |\n| (.APK)      | devices.                  | support post-procesor     |\n|             |                           | effects.                  |\n+-------------+---------------------------+---------------------------+"),Object(o.b)("p",null,"Which ever method you choose, a Java-Application works on the main\noperating systems: Windows, Mac OS, Linux, Android."),Object(o.b)("p",null,"The distribution appears in a newly generated ",Object(o.b)("inlineCode",{parentName:"p"},"dist")," directory inside\nyour project directory. These are the files that you upload or burn to\nCD to distribute to your customers."),Object(o.b)("p",null,"See also:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"http://www.gamedev.net/page/resources/_/creative/game-design/developing-your-game-concept-by-making-a-design-document-r3004"}),"gamedev.net: Developing Your Game Concept By Making A Design\nDocument"))))}p.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return u}));var n=a(0),i=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s({},t,{},e)),a},b=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(a),d=n,u=b["".concat(r,".").concat(d)]||b[d]||m[d]||o;return a?i.a.createElement(u,s({ref:t},c,{components:a})):i.a.createElement(u,s({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,r=new Array(o);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var c=2;c<o;c++)r[c]=a[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);
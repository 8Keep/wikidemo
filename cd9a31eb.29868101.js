(window.webpackJsonp=window.webpackJsonp||[]).push([[245],{384:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(1),o=a(9),s=(a(0),a(441)),r={},i={id:"jme3/advanced/asset_manager",title:"asset_manager",description:"By assets we mean multi-media files, such as 3D models, materials,",source:"@site/docs/jme3/advanced/asset_manager.md",permalink:"/wikidemo/docs/jme3/advanced/asset_manager",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/asset_manager.md"},l=[{value:"Usage",id:"usage",children:[]},{value:"Asset Directory",id:"asset-directory",children:[]},{value:"Example Code: Loading Assets",id:"example-code-loading-assets",children:[]},{value:"Common AssetManager Tasks",id:"common-assetmanager-tasks",children:[]},{value:"NullPointerException: Cannot locate resource?",id:"nullpointerexception-cannot-locate-resource",children:[]},{value:"Asset Handling For Other IDEs: Codeless Projects",id:"asset-handling-for-other-ides-codeless-projects",children:[]}],c={rightToc:l};function p(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"By assets we mean multi-media files, such as 3D models, materials,\ntextures, scenes, custom shaders, music and sound files, and custom\nfonts. JME3 has an integrated asset manager that helps you keep your\nproject assets organized. Think of the asset manager as the filesystem\nof your game, independent of the actual deployment platform. By default,\nstore your assets in the ","`","MyGame/assets/ ","`"," directory of your project."),Object(s.b)("p",null,"Advantages of the AssetManager:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"The paths stay the same, no matter whether the game runs on Windows,\nMac, Linux, etc!")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"The AssetManager automatically caches and optimizes the handling of\nOpenGL objects.\\\nFor example, the same textures are not uploaded to the graphics card\nmultiple times when multiple models use them.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"The ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/default_build_script"}),"default build script"),"\nautomatically bundles the contents of the ",Object(s.b)("inlineCode",{parentName:"p"},"assets")," directory into\nthe executable."))),Object(s.b)("p",null,"Advanced users can write a custom build and packaging script, and can\nregister custom paths to the AssetManager, but this is up to you then."),Object(s.b)("h1",{id:"context"},"Context"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"jMonkeyProjects/MyGame/assets/    # You store assets in subfolders here! <------\njMonkeyProjects/MyGame/build/     # SDK generates built classes here (*)\njMonkeyProjects/MyGame/build.xml  # You customize Ant build script here\njMonkeyProjects/MyGame/nbproject/ # SDK stores default build.xml and meta data (*)\njMonkeyProjects/MyGame/dist/      # SDK generates executable distribution here (*)\njMonkeyProjects/MyGame/src/       # You store Java sources here\njMonkeyProjects/MyGame/test/      # You store test classes here (optional)\n(*) Managed by jMonkeyEngine SDK -- don't edit!\n")),Object(s.b)("p",null,"See also ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/intermediate/best_practices"}),"Best Practices"),"."),Object(s.b)("h2",{id:"usage"},"Usage"),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"assetManager")," object is an com.jme3.asset.AssetManager instance\nthat every com.jme3.app.Application can access. It maintains a root that\nalso includes your project's classpath by default, so you can load any\nasset that's on the classpath, that is, the top level of your project\ndirectory."),Object(s.b)("p",null,"You can use the inherited ",Object(s.b)("inlineCode",{parentName:"p"},"assetManager")," object directly, or use the\naccessor ",Object(s.b)("inlineCode",{parentName:"p"},"app.getAssetManager()"),"."),Object(s.b)("p",null,"Here is an example how you load assets using the AssetManager. This\nlines loads a default Material from the built-in ",Object(s.b)("inlineCode",{parentName:"p"},"Common/")," directory:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'Material mat = (Material) assetManager.loadAsset(\n    new AssetKey("Common/Materials/RedColor.j3m"));\n')),Object(s.b)("p",null,'This Material is "somewhere" in the jME3 JAR; the default Asset Manager\nis configured to handle a ',Object(s.b)("inlineCode",{parentName:"p"},"Common/\u2026")," path correctly, so you don't have\nto specify the whole path when referring to built-in assets (such as\ndefault Materials)."),Object(s.b)("p",null,"Additionally, you can configure the Asset Manager and add any path to\nits root. This means, you can load assets from any project directory you\nspecify. The next example shows how you load assets from your project's\nassets directory."),Object(s.b)("h2",{id:"asset-directory"},"Asset Directory"),Object(s.b)("p",null,"By default, jME3 searches for models in a directory named ",Object(s.b)("inlineCode",{parentName:"p"},"assets"),"."),Object(s.b)("p",null,"::: {.important}\nIn Java projects created with the jMonkeyEngine SDK, an ",Object(s.b)("inlineCode",{parentName:"p"},"assets")," folder\nis created by default in your project directory. If you are using any\nother IDE, or the command line, you simply create an ",Object(s.b)("inlineCode",{parentName:"p"},"assets")," directory\nmanually (see the Codeless Project tip below).\n:::"),Object(s.b)("p",null,"This is our recommended directory structure for storing assets:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"jMonkeyProjects/MyGame/src/...           # Packages, .java source code.\njMonkeyProjects/MyGame/assets/...        # The assets directory:\njMonkeyProjects/MyGame/assets/Interface/   # .font, .jpg, .png, .xml\njMonkeyProjects/MyGame/assets/MatDefs/     # .j3md\njMonkeyProjects/MyGame/assets/Materials/   # .j3m\njMonkeyProjects/MyGame/assets/Models/      # .j3o\njMonkeyProjects/MyGame/assets/Scenes/      # .j3o\njMonkeyProjects/MyGame/assets/Shaders/     # .j3f, .vert, .frag\njMonkeyProjects/MyGame/assets/Sounds/      # .ogg, .wav\njMonkeyProjects/MyGame/assets/Textures/    # .jpg, .png; also .mesh.xml+.material, .mtl+.obj, .blend, .gltf (!)\n")),Object(s.b)("p",null,"These subdirectories are just the most common examples."),Object(s.b)("p",null,"::: {.important}\nYou can rename/delete/add (sub)directories inside the ",Object(s.b)("inlineCode",{parentName:"p"},"assets")," directory\nin any way you like. Note however that there is no automatic refactoring\nfor asset paths in the SDK, so if you modify them late in the\ndevelopment process, you have to refactor all paths manually.\n:::"),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Examples:")," You can rename ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Sounds")," to ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Audio"),", you can\ndelete ",Object(s.b)("inlineCode",{parentName:"p"},"assets/MatDefs")," if you don't use it, you can create\n",Object(s.b)("inlineCode",{parentName:"p"},"assets/AIscripts"),", etc. You can rename/move the ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Textures"),"\ndirectory or its subdirectories, but then you have to re-export all\nmodels, and re-convert them all to .j3o, so plan ahead!"),Object(s.b)("p",null,"::: {.important}\nStore textures in ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Textures/")," before you work with them in a mesh\neditor! Export and save 3D model files (.mesh.xml+.material, .mtl+.obj,\n.gltf) into the ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Textures/")," (!) before you convert the model to\nbinary format (.j3o)! This ensures that texture paths correctly point to\nthe ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Textures")," directory.\\\nAfter the conversion, you move the .j3o file into the ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Models/"),"\nor ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Scenes/")," directories. This way, you can reuse textures, your\nbinaries consistently link the correct textures, and the ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Models"),"\nand ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Scenes")," directories don't become cluttered.\n:::"),Object(s.b)("h2",{id:"example-code-loading-assets"},"Example Code: Loading Assets"),Object(s.b)("p",null,'Creating a material instance with the definition "Unshaded.j3md":'),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'Material mat_brick = new Material(\n    assetManager, "Common/MatDefs/Misc/Unshaded.j3md");\n')),Object(s.b)("p",null,"Applying a texture to the material:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'mat_brick.setTexture("ColorMap",\n    assetManager.loadTexture("Textures/Terrain/BrickWall/BrickWall.jpg"));\n')),Object(s.b)("p",null,"Loading a font:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'guiFont = assetManager.loadFont("Interface/Fonts/Default.fnt");\n')),Object(s.b)("p",null,"Loading a model:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'Spatial ninja = assetManager.loadModel("Models/Ninja/Ninja.mesh.xml");\n')),Object(s.b)("p",null,"Loading a scene from an Ogre3D dotScene file stored inside a zip:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'assetManager.registerLocator("town.zip", ZipLocator.class);\nSpatial scene = assetManager.loadModel("main.scene");\nrootNode.attachChild(scene);\n')),Object(s.b)("p",null,"Alternatively to ZipLocator, there is also a HttpZipLocator that can\nstream models from a zip file online:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'assetManager.registerLocator("https://storage.googleapis.com/"\n    + "google-code-archive-downloads/v2/code.google.com/"\n    + "jmonkeyengine/wildhouse.zip", HttpZipLocator.class);\nSpatial scene = assetManager.loadModel("main.scene");\nrootNode.attachChild(scene);\n')),Object(s.b)("p",null,"jME3 also offers a ClasspathLocator, ZipLocator, FileLocator,\nHttpZipLocator, and UrlLocator (see ",Object(s.b)("inlineCode",{parentName:"p"},"com.jme3.asset.plugins"),")."),Object(s.b)("p",null,'::: {.important}\nThe custom build script does not automatically include all ZIP files in\nthe executable build. See "Cannot Locate Resource" solution below.\n:::'),Object(s.b)("h2",{id:"common-assetmanager-tasks"},"Common AssetManager Tasks"),Object(s.b)("p",null,"+---------+------------------------------------------------------------+\n| Task?   | Solution!                                                  |\n+=========+============================================================+\n| Load a  | Use the asset manager's ",Object(s.b)("inlineCode",{parentName:"p"},"loadModel()")," method and attach    |\n| model   | the Spatial to the rootNode.                               |\n| with    |                                                            |\n| ma      | ",Object(s.b)("inlineCode",{parentName:"p"},'java                                                |\n| terials | Spatial elephant = as                                      |\n|         | setManager.loadModel("Models/Elephant/Elephant.mesh.xml"); |\n|         | rootNode.attachChild(elephant);                            |\n|         | '),"                                                        |\n|         |                                                            |\n|         | ",Object(s.b)("inlineCode",{parentName:"p"},'java                                                |\n|         | Spatial elephant                                           |\n|         |  = assetManager.loadModel("Models/Elephant/Elephant.j3o"); |\n|         | rootNode.attachChild(elephant);                            |\n|         | '),"                                                        |\n+---------+------------------------------------------------------------+\n| Load a  | If you have a model without materials, you have to add a   |\n| model   | default material to make it visible.                       |\n| without |                                                            |\n| ma      | ",Object(s.b)("inlineCode",{parentName:"p"},'java                                                |\n| terials | Spatial te                                                 |\n|         | apot = assetManager.loadModel("Models/Teapot/Teapot.obj"); |\n|         | Material mat = new Mater                                   |\n|         | ial(assetManager, "Common/MatDefs/Misc/ShowNormals.j3md"); |\n|         | teapot.setMaterial(mat);                                   |\n|         | rootNode.attachChild(teapot);                              |\n|         | '),"                                                        |\n+---------+------------------------------------------------------------+\n| Load a  | You load scenes just like you load models:                 |\n| scene   |                                                            |\n|         | ",Object(s.b)("inlineCode",{parentName:"p"},'java                                                |\n|         | Spatial                                                    |\n|         | scene = assetManager.loadModel("Scenes/house/main.scene"); |\n|         | rootNode.attachChild(scene);                               |\n|         | '),"                                                        |\n+---------+------------------------------------------------------------+"),Object(s.b)("h2",{id:"nullpointerexception-cannot-locate-resource"},"NullPointerException: Cannot locate resource?"),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Problem:")),Object(s.b)("p",null,"My game runs fine when I run it right from the jMonkeyEngine SDK. But\nwhen I run the stand-alone executables (.jar, .jnlp .exe, .app), a\nDesktopAssetManager error message occurs in the console, and it quits?"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"com.jme3.asset.DesktopAssetManager loadAsset\nWARNING: Cannot locate resource: Scenes/town/main.scene\ncom.jme3.app.Application handleError\nSEVERE: Uncaught exception thrown in Thread[LWJGL Renderer Thread,5,main]\njava.lang.NullPointerException\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reason:")),Object(s.b)("p",null,"If you use the default build script, ",Object(s.b)("strong",{parentName:"p"},"original models and scenes\n(.mesh.xml, .obj, gltf, .zip), are excluded")," from the distribution\nautomatically. A stand-alone executable includes converted ",Object(s.b)("strong",{parentName:"p"},".j3o\nfiles")," (models and scenes) only. The default build script makes sure to\nbundle existing .j3o files in the distribution, but you need to remember\nto convert the models (from mesh.xml",Object(s.b)("img",Object(n.a)({parentName:"p"},{src:"./images/icons/long-arrow-right.png",alt:"long arrow\nright"})),".j3o, or .obj",Object(s.b)("img",Object(n.a)({parentName:"p"},{src:"./images/icons/long-arrow-right.png",alt:"long arrow\nright"})),".j3o, etc) yourself."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Solution")),Object(s.b)("p",null,"Before building the executable, you must use the jMonkeyEngine SDK's\ncontext menu action to ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/model_loader_and_viewer"}),"convert 3D models to .j3o binary\nformat"),"."),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Save your original models (.mesh.xml, .scene, .gltf, or .obj files,\nplus textures) into ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Textures/"),". (!)")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Open the jME3 project in the jMonkeyEngine SDK.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Browse to the ",Object(s.b)("inlineCode",{parentName:"p"},"assets")," directory in the Projects window.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Right-click an original model in ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Textures/"),', and choose\n"Convert to JME3 binary".')),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"The converted file appears in the same directory as the original\nfile. It has the same name and a ",Object(s.b)("inlineCode",{parentName:"p"},".j3o")," suffix.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Move the .j3o file into the ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Models/")," or ",Object(s.b)("inlineCode",{parentName:"p"},"assets/Scenes/"),"\ndirectory.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Use the assetManager's ",Object(s.b)("inlineCode",{parentName:"p"},"load()")," method to load the ",Object(s.b)("inlineCode",{parentName:"p"},".j3o")," file."))),Object(s.b)("p",null,"This ensures that the model's Texture paths keep working between your 3D\nmesh editor and JME3."),Object(s.b)("p",null,"::: {.important}\nIf you must load custom assets from a non-.j3o ZIP file, you must\nmanually ammend the ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"../../sdk/default_build_script"}),"default build\nscript")," to copy ZIP files into your\ndistribution. ZIPs are skipped by default.\n:::"),Object(s.b)("h2",{id:"asset-handling-for-other-ides-codeless-projects"},"Asset Handling For Other IDEs: Codeless Projects"),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Problem:")),Object(s.b)("p",null,"I use another IDE than jMonkeyEngine SDK for coding (Eclipse, IntelliJ,\ntext editor). Where is my ",Object(s.b)("inlineCode",{parentName:"p"},"asset")," folder and .j3o converter?"),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Solution:")),Object(s.b)("p",null,"You can code in any IDE, but you must create a so-called codeless\nproject in the jMonkeyEngine SDK to maintain assets. ",Object(s.b)("strong",{parentName:"p"},"A code-less\njMonkeyEngine project does not meddle with your sources or custom build\nscripts.")," You merely use it to convert models to .j3o binaries."),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Create your (Eclipse or whatever) project as you like.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Create a directory in your project folder and name it, for example,\n",Object(s.b)("inlineCode",{parentName:"p"},"assets"),".\\\nStore your assets there as described above.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Download and install the jMonkeyEngine SDK.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"In the SDK, go to ",Object(s.b)("inlineCode",{parentName:"p"},"File Import Projects External Project Assets"),".")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"Select your (Eclipse or whatever) project and your assets folder in\nthe Import Wizard.")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("p",{parentName:"li"},"You can now open this (Eclipse or whatever) project in the\njMonkeyEngine SDK.\\\nConvert assets as described above."))),Object(s.b)("p",null,"::: {.important}\nIf you don't use the SDK for some reason, you can still convert models\nto j3o format: Load any model in Ogre3D or Wavefront format with the\nAssetManager.loadModel() as a spatial. Then save the spatial as j3o file\nusing ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/save_and_load"}),"BinaryExporter"),".\n:::"),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(s.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"Use file version control and let team members check out the project.\nYour developers open the project in Eclipse (etc) as they are used to.\nAdditionally to their graphic tools, ask your graphic designers to\ninstall the jMonkeyEngine SDK, and to check out the codeless project\nthat you just prepared. This makes it easy for non-coding team member to\nbrowse and preview game assets, to arrange scenes, and to convert files.\nAt the same time, non-coders don't accidentally mess with code, and\ndevelopers don't accidentally mess with assets. :)"))))}p.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return u}));var n=a(0),o=a.n(n);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},d=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),m=n,u=d["".concat(r,".").concat(m)]||d[m]||b[m]||s;return a?o.a.createElement(u,i({ref:t},c,{components:a})):o.a.createElement(u,i({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,r=new Array(s);r[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,r[1]=i;for(var c=2;c<s;c++)r[c]=a[c];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);
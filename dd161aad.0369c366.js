(window.webpackJsonp=window.webpackJsonp||[]).push([[268],{407:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return r})),a.d(t,"default",(function(){return h}));var n=a(1),l=a(9),i=(a(0),a(441)),c={},o={id:"jme3/advanced/vehicles",title:"vehicles",description:"For physical vehicles, jME's uses the jBullet ray-cast vehicle. In this",source:"@site/docs/jme3/advanced/vehicles.md",permalink:"/wikidemo/docs/jme3/advanced/vehicles",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/vehicles.md"},r=[],s={rightToc:r};function h(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"For physical vehicles, jME's uses the jBullet ray-cast vehicle. In this\nvehicle implementation, the physical chassis \\'floats\\' along on four\nnon-physical vertical rays."),Object(i.b)("p",null,"Internally, each wheel casts a ray down, and using the ray's\nintersection point, jBullet calculates the suspension length, and the\nsuspension force. The suspension force is applied to the chassis,\nkeeping it from hitting the ground. The friction force is calculated for\neach wheel where the ray intersects with the ground. Friction is applied\nas a sideways and forwards force. ",Object(i.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-1"}),Object(i.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-1",className:"footnote-ref"}),"1"))),Object(i.b)("p",null,"This article shows how you use this vehicle implementation in a jME3\napplication."),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/jme3/advanced/physics-vehicle.png",alt:"physics-vehicle.png"}))),Object(i.b)("h1",{id:"sample-code"},"Sample Code"),Object(i.b)("p",null,"Full code samples are here:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestPhysicsCar.java"}),"TestPhysicsCar.java"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestFancyCar.java"}),"TestFancyCar.java")))),Object(i.b)("h1",{id:"overview-of-this-physics-application"},"Overview of this Physics Application"),Object(i.b)("p",null,"The goal is to create a physical vehicle with wheels that can be steered\nand that interacts (collides with) with the floor and obstacles."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Create a SimpleApplication with a\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/physics"}),"BulletAppState")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"This gives us a PhysicsSpace for PhysicsNodes"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Create a VehicleControl + CompoundCollisionShape for the physical\nvehicle behaviour"),Object(i.b)("p",{parentName:"li"},"a.  Set physical properties of the vehicle, such as suspension.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Create a VehicleNode for the car model"),Object(i.b)("p",{parentName:"li"},"a.  Create a box plus 4 cylinders as wheels (using\n",Object(i.b)("inlineCode",{parentName:"p"},"vehicle.addWheel()"),")."),Object(i.b)("p",{parentName:"li"},"b.  Add the VehicleControl behaviour to the VehicleNode geometry.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Create a RigidBodyControl and CollisionShape for the floor")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Map key triggers and add input listeners"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Navigational commands Left, Right, Foward, Brake."))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Define the steering actions to be triggered by the key events."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"vehicle.steer()"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"vehicle.accelerate()"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"vehicle.brake()")))))),Object(i.b)("h1",{id:"creating-the-vehicle-chassis"},"Creating the Vehicle Chassis"),Object(i.b)("p",null,"The vehicle that we create here in the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestPhysicsCar.java"}),"TestPhysicsCar.java"),'\nexample is just a "box on wheels, a basic vehicle shape that you can\nreplace with a fancy car model, as demonstrated in\n',Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestFancyCar.java"}),"TestFancyCar.java"),"."),Object(i.b)("p",null,"Every physical object must have a collision shape, that we prepare\nfirst. For the vehicle, we choose a compound collision shape that is\nmade up of a box-shaped body of the right size for the vehicle. We will\nadd the wheels later."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"CompoundCollisionShape compoundShape = new CompoundCollisionShape();\nBoxCollisionShape box = new BoxCollisionShape(new Vector3f(1.2f, 0.5f, 2.4f));\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Best Practice:")," We attach the BoxCollisionShape (the vehicle body) to\nthe CompoundCollisionShape at a Vector of (0,1,0): This shifts the\neffective center of mass of the BoxCollisionShape downwards to 0,-1,0\nand makes a moving vehicle more stable!"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"compoundShape.addChildShape(box, new Vector3f(0, 1, 0));\n")),Object(i.b)("p",null,"Any kind of geometry can make up the visible part of the vehicle, here\nwe use a wireframe box. We create a node that we use to group the\ngeometry."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'Node vehicleNode=new Node("vehicleNode");\nvehicle = new VehicleControl(compoundShape, 400);\nvehicleNode.addControl(vehicle);\n')),Object(i.b)("p",null,"We initialize the Vehicle Control with the compound shape, and set its\nmass to a heavy value, 400f. The Vehicle Control represents the car's\nphysical behaviour."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"vehicle = new VehicleControl(compoundShape, 400);\n")),Object(i.b)("p",null,"Finally we add the behaviour (VehicleControl) to the visible Geometry\n(node)."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"vehicleNode.addControl(vehicle);\n")),Object(i.b)("p",null,"We configure the physical properties of the vehicle's suspension:\nCompresion, Damping, Stiffness, and MaxSuspenionForce. Picking workable\nvalues for the wheel suspension can be tricky -- for background info\nhave a look at these ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.google.com/Doc?docid=0AXVUZ5xw6XpKZGNuZG56a3FfMzU0Z2NyZnF4Zmo&hl=en"}),"Suspension Settings\nTips"),".\nFor now, let's work with the following values:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"float stiffness = 60.0f;//200=f1 car\nfloat compValue = .3f; //(should be lower than damp)\nfloat dampValue = .4f;\nvehicle.setSuspensionCompression(compValue * 2.0f * FastMath.sqrt(stiffness));\nvehicle.setSuspensionDamping(dampValue * 2.0f * FastMath.sqrt(stiffness));\nvehicle.setSuspensionStiffness(stiffness);\nvehicle.setMaxSuspensionForce(10000.0f);\n")),Object(i.b)("p",null,"We now have a node ",Object(i.b)("inlineCode",{parentName:"p"},"vehicleNode")," with a visible \"car geometry, which\nacts like a vehicle. One thing that's missing are wheels."),Object(i.b)("h1",{id:"adding-the-wheels"},"Adding the Wheels"),Object(i.b)("p",null,"We create four wheel Geometries and add them to the vehicle. Our wheel\ngeometries are simple, non-physical discs (flat Cylinders), they are\njust visual decorations. Note that the physical wheel behaviour (the\ncom.jme3.bullet.objects.VehicleWheel objects) is created internally by\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"vehicle.addWheel()")," method."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"addWheel()")," method sets following properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Vector3f connectionPoint -- Coordinate where the suspension connects\nto the chassis (internally, this is where the Ray is casted\ndownwards).")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Vector3f direction -- Wheel direction is typically a (0,-1,0)\nvector.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Vector3f axle -- Axle direction is typically a (-1,0,0) vector.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"float suspensionRestLength -- Suspension rest length in world units")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"float wheelRadius -- Wheel radius in world units")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"boolean isFrontWheel -- Whether this wheel is one of the steering\nwheels.\\\nFront wheels are the ones that rotate visibly when the vehicle\nturns."))),Object(i.b)("p",null,"We initialize a few variables that we will reuse when we add the four\nwheels. yOff, etc, are the particular wheel offsets for our small\nvehicle model."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"Vector3f wheelDirection = new Vector3f(0, -1, 0);\nVector3f wheelAxle = new Vector3f(-1, 0, 0);\nfloat radius = 0.5f;\nfloat restLength = 0.3f;\nfloat yOff = 0.5f;\nfloat xOff = 1f;\nfloat zOff = 2f;\n")),Object(i.b)("p",null,"We create a Cylinder mesh shape that we use to create the four visible\nwheel geometries."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"Cylinder wheelMesh = new Cylinder(16, 16, radius, radius * 0.6f, true);\n")),Object(i.b)("p",null,"For each wheel, we create a Node and a Geometry. We attach the Cylinder\nGeometry to the Node. We rotate the wheel by 90\xb0 around the Y axis. We\nset a material to make it visible. Finally we add the wheel (plus its\nproperties) to the vehicle."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'Node node1 = new Node("wheel 1 node");\nGeometry wheels1 = new Geometry("wheel 1", wheelMesh);\nnode1.attachChild(wheels1);\nwheels1.rotate(0, FastMath.HALF_PI, 0);\nwheels1.setMaterial(mat);\n\nvehicle.addWheel(node1, new Vector3f(-xOff, yOff, zOff),\n    wheelDirection, wheelAxle, restLength, radius, true);\n')),Object(i.b)("p",null,"The three next wheels are created in the same fashion, only the offsets\nare different. Remember to set the Boolean parameter correctly to\nindicate whether it's a front wheel."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"...\nvehicle.addWheel(node2, new Vector3f(xOff, yOff, zOff),\n  wheelDirection, wheelAxle, restLength, radius, true);\n...\nvehicle.addWheel(node3, new Vector3f(-xOff, yOff, -zOff),\n  wheelDirection, wheelAxle, restLength, radius, false);\n...\nvehicle.addWheel(node4, new Vector3f(xOff, yOff, -zOff),\n  wheelDirection, wheelAxle, restLength, radius, false);\n")),Object(i.b)("p",null,"Attach the wheel Nodes to the vehicle Node to group them, so they move\ntogether."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"vehicleNode.attachChild(node1);\nvehicleNode.attachChild(node2);\nvehicleNode.attachChild(node3);\nvehicleNode.attachChild(node4);\n")),Object(i.b)("p",null,"As always, attach the vehicle Node to the rootNode to make it visible,\nand add the Vehicle Control to the PhysicsSpace to make the car\nphysical."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"rootNode.attachChild(vehicleNode);\ngetPhysicsSpace().add(vehicle);\n")),Object(i.b)("p",null,"Not shown here is that we also created a Material ",Object(i.b)("inlineCode",{parentName:"p"},"mat"),"."),Object(i.b)("h1",{id:"steering-the-vehicle"},"Steering the Vehicle"),Object(i.b)("p",null,"Not shown here is the standard way how we map the input keys to actions\n(see full code sample). Also refer to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/input_handling"}),"Input\nHandling"),")."),Object(i.b)("p",null,"In the ActionListener, we implement the actions that control the\nvehicle's direction and speed. For the four directions (accelerate=up,\nbrake=down, left, right), we specify how we want the vehicle to move."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The braking action is pretty straightforward:\\\n",Object(i.b)("inlineCode",{parentName:"p"},"vehicle.brake(brakeForce)"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"For left and right turns, we add a constant to ",Object(i.b)("inlineCode",{parentName:"p"},"steeringValue")," when\nthe key is pressed, and subtract it when the key is released.\\\n",Object(i.b)("inlineCode",{parentName:"p"},"vehicle.steer(steeringValue);"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"For acceleration we add a constant to ",Object(i.b)("inlineCode",{parentName:"p"},"accelerationValue")," when the\nkey is pressed, and substract it when the key is released.\\\n",Object(i.b)("inlineCode",{parentName:"p"},"vehicle.accelerate(accelerationValue);"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Because we can and it's fun, we also add a turbo booster that makes\nthe vehicle jump when you press the assigned key (spacebar).\\\n",Object(i.b)("inlineCode",{parentName:"p"},"vehicle.applyImpulse(jumpForce, Vector3f.ZERO);")))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'public void onAction(String binding, boolean value, float tpf) {\n  if (binding.equals("Lefts")) {\n      if (value) { steeringValue += .5f; } else { steeringValue += -.5f; }\n      vehicle.steer(steeringValue);\n  } else if (binding.equals("Rights")) {\n      if (value) { steeringValue += -.5f; } else { steeringValue += .5f; }\n      vehicle.steer(steeringValue);\n  } else if (binding.equals("Ups")) {\n      if (value) {\n        accelerationValue += accelerationForce;\n      } else {\n        accelerationValue -= accelerationForce;\n      }\n      vehicle.accelerate(accelerationValue);\n  } else if (binding.equals("Downs")) {\n      if (value) { vehicle.brake(brakeForce); } else { vehicle.brake(0f); }\n  } else if (binding.equals("Space")) {\n      if (value) {\n        vehicle.applyImpulse(jumpForce, Vector3f.ZERO);\n      }\n  } else if (binding.equals("Reset")) {\n      if (value) {\n        System.out.println("Reset");\n        vehicle.setPhysicsLocation(Vector3f.ZERO);\n        vehicle.setPhysicsRotation(new Matrix3f());\n        vehicle.setLinearVelocity(Vector3f.ZERO);\n        vehicle.setAngularVelocity(Vector3f.ZERO);\n        vehicle.resetSuspension();\n      } else {\n    }\n  }\n}\n')),Object(i.b)("p",null,"For your reference, this is how we initialized the constants for this\nexample:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"private final float accelerationForce = 1000.0f;\nprivate final float brakeForce = 100.0f;\nprivate float steeringValue = 0;\nprivate float accelerationValue = 0;\nprivate Vector3f jumpForce = new Vector3f(0, 3000, 0);\n")),Object(i.b)("p",null,"Remember, the standard input listener code that maps the actions to keys\ncan be found in the code samples."),Object(i.b)("h1",{id:"detecting-collisions"},"Detecting Collisions"),Object(i.b)("p",null,"Read the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/physics.xml#responding_to_a_physicscollisionevent"}),"Responding to a\nPhysicsCollisionEvent"),"\nchapter in the general physics documentation on how to detect\ncollisions. You would do this if you want to react to collisions with\ncustom events, such as adding points or substracting health."),Object(i.b)("h1",{id:"best-practices"},"Best Practices"),Object(i.b)("p",null,"This example shows a very simple but functional vehicle. For a game you\nwould implement steering behaviour and acceleration with values that are\ntypical for the type of vehicle that you want to simulate. Instead of a\nbox, you load a chassis model. You can consider using an\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/input_handling"}),"AnalogListener")," to respond to\nkey events in a more sophisticated way."),Object(i.b)("p",null,"For a more advanced example, look at\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestFancyCar.java"}),"TestFancyCar.java"),"."),Object(i.b)("div",{className:"footnotes"},Object(i.b)("hr",{parentName:"div"}),Object(i.b)("ol",{parentName:"div"},Object(i.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-1"}),Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://docs.google.com/Doc?docid=0AXVUZ5xw6XpKZGNuZG56a3FfMzU0Z2NyZnF4Zmo&hl=en"}),"https://docs.google.com/Doc?docid=0AXVUZ5xw6XpKZGNuZG56a3FfMzU0Z2NyZnF4Zmo&hl=en"),Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-1",className:"footnote-backref"}),"\u21a9")))))}h.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),l=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=l.a.createContext({}),h=function(e){var t=l.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o({},t,{},e)),a},p=function(e){var t=h(e.components);return l.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),p=h(a),d=n,u=p["".concat(c,".").concat(d)]||p[d]||b[d]||i;return a?l.a.createElement(u,o({ref:t},s,{components:a})):l.a.createElement(u,o({ref:t},s))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,c=new Array(i);c[0]=d;var o={};for(var r in t)hasOwnProperty.call(t,r)&&(o[r]=t[r]);o.originalType=e,o.mdxType="string"==typeof e?e:n,c[1]=o;for(var s=2;s<i;s++)c[s]=a[s];return l.a.createElement.apply(null,c)}return l.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);
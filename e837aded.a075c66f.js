(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{414:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(1),r=t(9),s=(t(0),t(441)),i={},o={id:"spidermonkey/tutorial/sending_and_receiving_messages",title:"sending_and_receiving_messages",description:"::: {.warning}",source:"@site/docs/spidermonkey/tutorial/sending_and_receiving_messages.md",permalink:"/wikidemo/docs/spidermonkey/tutorial/sending_and_receiving_messages",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/spidermonkey/tutorial/sending_and_receiving_messages.md"},l=[],c={rightToc:l};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"::: {.warning}\nThis article covers a deprecated API! See\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/networking"}),"networking")," for current\ndocumentation.\n:::"),Object(s.b)("p",null,"In this tutorial I'm going to cover sending and receiving messages. I'll\nalso explain how to write your own messages. This tutorial assumes you\nalready have a working server-client connection."),Object(s.b)("p",null,"Let's start by creating our own message. Later on we'll send this across\nthe network."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'@Serializable()\npublic class HelloMessage extends Message {\n   public String hello = "Hello!";\n}\n')),Object(s.b)("p",null,"This is probably the smallest and simplest message you'll find. This is\nsimply the process of creating a class, extending Message, and adding\nyour fields to it. Also you need the \\@Serializable annotation, but\nwe'll get to that later. Even though you don't ",Object(s.b)("strong",{parentName:"p"},"have to")," extend\nMessage, you generally should since then SpiderMonkey can add client and\nconnection information on receiving. You can also send separate data,\nbut we'll not go into that here - you should just send Messages."),Object(s.b)("p",null,"Now let's send this message across the network. We'll send it from the\nclient to the server."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Serializer.registerClass(HelloMessage.class);\nserver.addMessageListener(this, HelloMessage.class);\nclient.addMessageListener(this, HelloMessage.class);\nclient.send(new HelloMessage());\n")),Object(s.b)("p",null,"First we've registered the class to the Serializer. This needs to happen\non both the client and server, I'll explain why in the next tutorial.\nThen we add the message listeners for both the server and client, this\nmakes sure we're notified when messages are received. Then we send the\nmessage. The message is by default reliable, and so it will be sent over\nTCP. Now we'll handle it on the server:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'public void messageReceived(Message message) {\n   // This message is of type HelloMessage, so we don\'t have to check.\n   HelloMessage helloMessage = (HelloMessage)message;\n   System.out.println(helloMessage.hello);\n   helloMessage.hello = "Hi!";\n   message.getClient().send(helloMessage);\n}\n')),Object(s.b)("p",null,"This simply receives the message, and changes the Hello! to Hi! and\nsends it back to the client. The client, can of course handle this\nmessage however it wants to."),Object(s.b)("h1",{id:"serializable-annotation"},"Serializable annotation"),Object(s.b)("p",null,"The Serializable annotation is used to determine which serializer you\nwant to use for your message, and which ID you want to register to it.\nIf you specify no ID and no serializer, a ID will be assigned, and the\ndefault serializer will be used. The problem with specifying no ID is\nthat you have to have the same order of registration on both the client\nand server, otherwise serializing will go wrong. It's therefore\nadvisable that you use the id field, if you want to register classes in\na different order."),Object(s.b)("p",null,"The default serializer is, of course, FieldSerializer, which'll do just\nfine for just about any message you can throw at it. However, if you\nwish to serialize your message yourself, all you must do is write your\nown serializer, and then pass the class to the serializer field in the\nannotation. For example, this Serializable annotation sets ID to four,\nand serializer to CustomSerializer (which doesn't exist, mind you)."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"@Serializable(id=4, serializer=CustomSerializer.class)\n")),Object(s.b)("p",null,"That was it! The next tutorial explains how the Serializer system works,\nand how you can register your own serializers!"))}u.isMDXComponent=!0},441:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return p}));var a=t(0),r=t.n(a);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),u=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o({},n,{},e)),t},d=function(e){var n=u(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},g=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),g=a,p=d["".concat(i,".").concat(g)]||d[g]||h[g]||s;return t?r.a.createElement(p,o({ref:n},c,{components:t})):r.a.createElement(p,o({ref:n},c))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=g;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);
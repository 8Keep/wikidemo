(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{166:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(1),a=n(9),o=(n(0),n(441)),s={},i={id:"jme3/contributions/vegetationsystem/trees",title:"trees",description:"Here you will learn how to use the tree system.",source:"@site/docs/jme3/contributions/vegetationsystem/trees.md",permalink:"/wikidemo/docs/jme3/contributions/vegetationsystem/trees",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/contributions/vegetationsystem/trees.md"},l=[],c={rightToc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Here you will learn how to use the tree system."),Object(o.b)("h1",{id:"simpletreetestjava"},"SimpleTreeTest.java"),Object(o.b)("p",null,"There's a file in the demo-project named SimpleTreeTest. There's a\nmethod in it named ",Object(o.b)("strong",{parentName:"p"},"setupForester()")," where you can see how a tree\nsystem is set up. If you haven't already done so, you might also want to\ncheck out the SimpleGrassTest.java file, because it contains a lot more\ninformation on certain other, important topics regarding the forester\nlib in general."),Object(o.b)("p",null,"The basic procedure is this:"),Object(o.b)("p",null,"1",")"," Create a Forester object, and initialize it."),Object(o.b)("p",null,"2",")"," Use it to create a tree-loader."),Object(o.b)("p",null,"3",")"," Use the treeloader to create a map-provider."),Object(o.b)("p",null,"4",")"," Use the treeloader to create one tree-layer for each type of tree."),Object(o.b)("p",null,"5",")"," Tweak everything until it fits your app."),Object(o.b)("p",null,"6",")"," Make sure you call forester.update() each frame."),Object(o.b)("h1",{id:"physicstestjava"},"PhysicsTest.java"),Object(o.b)("p",null,"There's another file in the demo project called PhysicsTest.java. In\nthat file you can see how collision-shapes are added to the trees."),Object(o.b)("p",null,"When you create a tree-layer through\n",Object(o.b)("strong",{parentName:"p"},"treeLoader.createTreeLayer(Spatial spat, boolean usePhysics)"),", you\nsupply the model and a boolean whether or not to use physics. If you\nwant to enable collision physics, look in that file how it's done."),Object(o.b)("p",null,"There are some general principles:"),Object(o.b)("p",null,"1",")"," In order to enable collision physics ",Object(o.b)("em",{parentName:"p"},"at all"),", you first need to set\nup a physics space. There's a great tutorial available in the tutorials\nsection of the jME wiki:\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"../../../jme3/beginner/hello_physics"}),"jme3\ud83d\udd30hello","_","physics"),"."),Object(o.b)("p",null,"2",")"," If you want to enable physics with the forester, you need to provide\nthe physics space to the Forester object. This is shown in the\nPhysicsTest.java file."),Object(o.b)("p",null,"3",")"," Once that is done, you need to provide a collision shape with your\nmodel, obviously. This can be done in several ways. You can do it\nthrough the jMP scene composer, or programatically."),Object(o.b)("p",null,"When a model is supplied to a tree-layer, and physics is enabled, the\nmodel will be checked for collision shapes. The shape is then removed\nfrom the model, and added to the tree-layer instead."),Object(o.b)("p",null,"The reason for this is that the trees are lumped together in a process\ncalled geometry-batching. It is commonly used to reduce the number of\ndrawing-calls for groups of objects that are very similar."),Object(o.b)("p",null,'What this means in practice is that your model is not just duplicated\nand spread out across the scene, they are in fact baked together into\none single mesh (per "block). This process is also used for collision\nshapes. They are all compounded into one large collision shape, then\nadded to this newly created clump of vertices. Basically.'),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"In short")," - there are a couple of instances when the collision\nphysics system may fail:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"If you do not supply a physics space to the forester, no physics\nwill be enabled.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},'If you do not check "true for enable physics when creating the\ntree-layer.')),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"If you do not supply a collision mesh to the model."))),Object(o.b)("h1",{id:"the-tree-data-system-basic"},"The tree data system (Basic)"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Basics")),Object(o.b)("p",null,"At the core of tree placement is the class ",Object(o.b)("strong",{parentName:"p"},"TreeData"),". It contains\nfive floats representing a tree - x,y,z-coords, rotation, scale. This\nmeans a tree-layer just needs to keep one copy of the model, rather then\nmany instances that differ only in transformation."),Object(o.b)("p",null,"Tree data is stored in TreeDataLists, which are basically arraylists."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Using tree data")),Object(o.b)("p",null,"In the SimpleTreeTest.java is an example of how to set up a treeloader\nto use density maps to generate tree-data through the ",Object(o.b)("strong",{parentName:"p"},"MapGrid"),"\ndata-provider. You do not have to worry about this stuff if you use\ndensity maps."),Object(o.b)("p",null,"There will be info here on how to use the alternative ",Object(o.b)("strong",{parentName:"p"},"DataGrid"),"\ndata-provider later."))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},u=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},h=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,d=u["".concat(s,".").concat(h)]||u[h]||b[h]||o;return n?a.a.createElement(d,i({ref:t},c,{components:n})):a.a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[235],{374:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(1),r=a(9),o=(a(0),a(441)),c={},i={id:"jme3/advanced/shape",title:"shape",description:"The simplest type of Meshes are the built-in JME Shapes. You can create",source:"@site/docs/jme3/advanced/shape.md",permalink:"/wikidemo/docs/jme3/advanced/shape",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/shape.md"},l=[{value:"com.jme3.math versus com.jme3.shape?",id:"comjme3math-versus-comjme3shape",children:[]},{value:"Basic Usage",id:"basic-usage",children:[]},{value:"Complex Shapes",id:"complex-shapes",children:[]}],s={rightToc:l};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The simplest type of Meshes are the built-in JME Shapes. You can create\nShapes without using the AssetManager."),Object(o.b)("h1",{id:"3d-shapes"},"3D shapes"),Object(o.b)("p",null,"box.png"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"com.jme3.scene.shape.Box -- A cube or cuboid. Single-sided Quad\nfaces (outside only).")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"com.jme3.scene.shape.StripBox -- A cube or cuboid. Solid filled\nfaces (inside and outside)."))),Object(o.b)("p",null,"cylinder.png"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"com.jme3.scene.shape.Cylinder -- A disk or pillar.")),Object(o.b)("p",null,"sphere.png"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"com.jme3.scene.shape.Sphere -- A ball or elipsoid.")),Object(o.b)("p",null,"dome.png"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"com.jme3.scene.shape.Dome -- A semi-sphere, e.g. SkyDome.")),Object(o.b)("p",null,"cone.png"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"For a cone, set the Dome's radialSamples",">","4 and planes=2.")),Object(o.b)("p",null,"pyramid.png"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"For a pyramid, set the Dome's radialSamples=4 and planes=2.")),Object(o.b)("p",null,"Torus"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},'com.jme3.scene.shape.Torus -- An single-holed torus or "donut.')),Object(o.b)("p",null,"PQ torus knoz"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"com.jme3.scene.shape.PQTorus -- A parameterized torus. A PQ-Torus\nlooks like a ",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"http://en.wikipedia.org/wiki/Torus_knot"}),"donut knotted into\nspirals"),".")),Object(o.b)("p",null,"NURBS surface"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"com.jme3.scene.shape.Surface -- A curved surface (called\n",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"http://en.wikipedia.org/wiki/File:NURBS_3-D_surface.gif"}),"NURBS"),")\ndescribed by knots, weights and control points. Compare with\nshape.Curve.")),Object(o.b)("h1",{id:"non-3d-shapes"},"Non-3D shapes"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"com.jme3.scene.shape.Quad -- A flat 2D rectangle (single-sided,\ncenter is in bottom-left corner)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"com.jme3.scene.shape.Line -- A straight 1D line defined by a start\nand end point.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"com.jme3.scene.shape.Curve -- A curved 1D spline. Compare with\nshape.Surface."))),Object(o.b)("h2",{id:"comjme3math-versus-comjme3shape"},"com.jme3.math versus com.jme3.shape?"),Object(o.b)("p",null,"Do not mix up these visible com.jme3.shapes with similarly named classes\nfrom the com.jme3.math package. Choose the right package when letting\nyour IDE fill in the import statements!"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"com.jme3.math.Line -- is invisible, has a direction, goes through a\npoint, infinite length.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"com.jme3.math.Ray -- is invisible, has a direction and start point,\nbut no end.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"com.jme3.math.Spline -- is an invisible curve.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"etc"))),Object(o.b)("p",null,"These maths objects are invisible and are used for collision testing\n(ray casting) or to describe motion paths. They cannot be wrapped into a\nGeometry."),Object(o.b)("h1",{id:"usage"},"Usage"),Object(o.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(o.b)("p",null,"To add a shape to the scene:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create the base mesh shape.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Wrap the mesh into a Geometry.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Assign a Material to the Geometry.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Attach the Geometry to the rootNode to make it visible."))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Create one static shape as mesh and use it in several geometries, or\nclone() the geometries."))),Object(o.b)("h2",{id:"complex-shapes"},"Complex Shapes"),Object(o.b)("p",null,'You can compose more complex custom Geometries out of simple Shapes.\nThink of the buildings in games like Angry Birds, or the building blocks\nin Second Life ("prims) and in Tetris ("Tetrominos).'),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a Node. By default it is located at the origin (0/0/0) --\nleave the Node there for now.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create your shapes and wrap each into a Geometry, as just described.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Attach each Geometry to the Node.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Arrange the Geometries around the Node (using\n",Object(o.b)("inlineCode",{parentName:"p"},"setLocalTranslation()"),") so that the Node is in the center of the\nnew constellation. The central Node is the pivot point for\ntransformations (move/scale/rotate).")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Move the pivot Node to its final location in the scene. Moving the\npivot Node moves the attached constellation of Geometries with it."))),Object(o.b)("p",null,"The order is important: First arrange around origin, then transform.\nOtherwise, transformations are applied around the wrong center (pivot).\nOf course, you can attach your constellation to other pivot Nodes to\ncreate even more complex shapes (a chair, a furnished room, a house, a\ncity, ...), but again, arrange them around the origin first before you\ntransform them. Obviously, such composed Geometries are simpler than\nhand-sculpted meshes from a mesh editor."),Object(o.b)("h1",{id:"code-examples"},"Code Examples"),Object(o.b)("p",null,"Create the Mesh shape:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"Sphere mesh = new Sphere(32, 32, 10, false, true);\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"Dome mesh = new Dome(Vector3f.ZERO, 2, 4, 1f,false); // Pyramid\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"Dome mesh = new Dome(Vector3f.ZERO, 2, 32, 1f,false); // Cone\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"Dome mesh = new Dome(Vector3f.ZERO, 32, 32, 1f,false); // Small hemisphere\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"Dome mesh = new Dome(Vector3f.ZERO, 32, 32, 1000f,true); // SkyDome\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"PQTorus mesh = new PQTorus(5,3, 2f, 1f, 32, 32); // Spiral torus\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"PQTorus mesh = new PQTorus(3,8, 2f, 1f, 32, 32); // Flower torus\n")),Object(o.b)("p",null,"Use one of the above examples together with the following geometry in a\nscene:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'Geometry geom = new Geometry("A shape", mesh); // wrap shape into geometry\nMaterial mat = new Material(assetManager,\n    "Common/MatDefs/Misc/ShowNormals.j3md");   // create material\ngeom.setMaterial(mat);                         // assign material to geometry\n// if you want, transform (move, rotate, scale) the geometry.\nrootNode.attachChild(geom);                    // attach geometry to a node\n')),Object(o.b)("h1",{id:"see-also"},"See also"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"../../jme3/intermediate/optimization"}),"Optimization")," -- The\nGeometryBatchFactory class combines several of your shapes with the\nsame texture into one mesh with one texture.")))}b.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(a),u=n,h=p["".concat(c,".").concat(u)]||p[u]||m[u]||o;return a?r.a.createElement(h,i({ref:t},s,{components:a})):r.a.createElement(h,i({ref:t},s))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,c=new Array(o);c[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var s=2;s<o;s++)c[s]=a[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{409:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var o=n(1),r=n(9),a=(n(0),n(441)),i={},l={id:"sdk/development/sceneexplorer",title:"sceneexplorer",description:"Adding Node types to SceneExplorer",source:"@site/docs/sdk/development/sceneexplorer.md",permalink:"/wikidemo/docs/sdk/development/sceneexplorer",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/sdk/development/sceneexplorer.md"},s=[{value:"Spatial Example",id:"spatial-example",children:[]},{value:"Control Example",id:"control-example",children:[]},{value:"Adding using a Wizard",id:"adding-using-a-wizard",children:[]}],c={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"adding-node-types-to-sceneexplorer"},"Adding Node types to SceneExplorer"),Object(a.b)("p",null,"If your plugin brings in its own SceneGraph objects you can still have\nthem work like any other SceneExplorer item, including its special\nproperties."),Object(a.b)("p",null,"If you want to support special properties of your objects that are not\nexposed by the SDK automatically, you will have to create your own class\nthat extends org.openide.nodes.Node and implement the interface\ncom.jme3.gde.core.sceneexplorer.nodes.AbstractSceneExplorerNode. Then\nyou register that class by adding"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"@org.openide.util.lookup.ServiceProvider(service=SceneExplorerNode.class)\n\nabove the body of your class. Thats all, your Spatial type will automatically be used and displayed in the SceneExplorer. Make sure you register a jar with the used classes in the plugin preferences under \u201cwrapped libraries, otherwise the IDE cannot access those classes.\n")),Object(a.b)("p",null,"AbstractSceneExplorerNode brings some other useful features you might\nwant to include like automatic creation of properly threaded properties\netc. JmeSpatial for example bases on it. A simple SceneExplorerNode\nexample for an object extending Spatial would be JmeGeometry (see\nbelow). Editors for special variable types can be added using the\nSceneExplorerPropertyEditor interface, which can be registered as a\nServiceProvider as well."),Object(a.b)("p",null,"The SceneExplorerNode can be used for Spatial and Control type objects."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("em",{parentName:"li"},'Add the "Nodes API and "Lookup API libraries to your project when\nyou want to use this'))),Object(a.b)("h2",{id:"spatial-example"},"Spatial Example"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'@org.openide.util.lookup.ServiceProvider(service=SceneExplorerNode.class)\npublic class JmeGeometry extends JmeSpatial {\n\n    private static Image smallImage =\n            ImageUtilities.loadImage("com/jme3/gde/core/sceneexplorer/nodes/icons/geometry.gif");\n    private Geometry geom;\n\n    public JmeGeometry() {\n    }\n\n    public JmeGeometry(Geometry spatial, SceneExplorerChildren children) {\n        super(spatial, children);\n        getLookupContents().add(spatial);\n        this.geom = spatial;\n        setName(spatial.getName());\n    }\n\n    @Override\n    public Image getIcon(int type) {\n        return smallImage;\n    }\n\n    @Override\n    public Image getOpenedIcon(int type) {\n        return smallImage;\n    }\n\n    @Override\n    protected Sheet createSheet() {\n        Sheet sheet = super.createSheet();\n        Sheet.Set set = Sheet.createPropertiesSet();\n        set.setDisplayName("Geometry");\n        set.setName(Geometry.class.getName());\n        Geometry obj = geom;//getLookup().lookup(Geometry.class);\n        if (obj == null) {\n            return sheet;\n        }\n\n        set.put(makeProperty(obj, int.class, "getLodLevel", "setLodLevel", "Lod Level"));\n        set.put(makeProperty(obj, Material.class, "getMaterial", "setMaterial", "Material"));\n        set.put(makeProperty(obj, Mesh.class, "getMesh", "Mesh"));\n\n        sheet.put(set);\n        return sheet;\n\n    }\n\n    public Class getExplorerObjectClass() {\n        return Geometry.class;\n    }\n\n    public Class getExplorerNodeClass() {\n        return JmeGeometry.class;\n    }\n\n    public org.openide.nodes.Node[] createNodes(Object key, Object key2, boolean readOnly) {\n        SceneExplorerChildren children=new SceneExplorerChildren((com.jme3.scene.Spatial)key);\n        children.setReadOnly(readOnly);\n        return new org.openide.nodes.Node[]{new JmeGeometry((Geometry) key, children).setReadOnly(readOnly)};\n    }\n}\n')),Object(a.b)("h2",{id:"control-example"},"Control Example"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'@org.openide.util.lookup.ServiceProvider(service=SceneExplorerNode.class)\npublic class JmeGhostControl extends AbstractSceneExplorerNode {\n\n    private static Image smallImage =\n            ImageUtilities.loadImage("com/jme3/gde/core/sceneexplorer/nodes/icons/ghostcontrol.gif");\n    private GhostControl control;\n\n    public JmeGhostControl() {\n    }\n\n    public JmeGhostControl(GhostControl control, DataObject dataObject) {\n        super(dataObject);\n        getLookupContents().add(this);\n        getLookupContents().add(control);\n        this.control = control;\n        setName("GhostControl");\n    }\n\n    @Override\n    public Image getIcon(int type) {\n        return smallImage;\n    }\n\n    @Override\n    public Image getOpenedIcon(int type) {\n        return smallImage;\n    }\n\n    protected SystemAction[] createActions() {\n        return new SystemAction[]{\n                    //                    SystemAction.get(CopyAction.class),\n                    //                    SystemAction.get(CutAction.class),\n                    //                    SystemAction.get(PasteAction.class),\n                    SystemAction.get(DeleteAction.class)\n                };\n    }\n\n    @Override\n    public boolean canDestroy() {\n        return !readOnly;\n    }\n\n    @Override\n    public void destroy() throws IOException {\n        super.destroy();\n        final Spatial spat=getParentNode().getLookup().lookup(Spatial.class);\n        try {\n            SceneApplication.getApplication().enqueue(new Callable<Void>() {\n\n                public Void call() throws Exception {\n                    spat.removeControl(control);\n                    return null;\n                }\n            }).get();\n            ((AbstractSceneExplorerNode)getParentNode()).refresh(true);\n        } catch (InterruptedException ex) {\n            Exceptions.printStackTrace(ex);\n        } catch (ExecutionException ex) {\n            Exceptions.printStackTrace(ex);\n        }\n    }\n\n    @Override\n    protected Sheet createSheet() {\n        Sheet sheet = super.createSheet();\n        Sheet.Set set = Sheet.createPropertiesSet();\n        set.setDisplayName("GhostControl");\n        set.setName(GhostControl.class.getName());\n        GhostControl obj = control;//getLookup().lookup(Spatial.class);\n        if (obj == null) {\n            return sheet;\n        }\n\n        set.put(makeProperty(obj, Vector3f.class, "getPhysicsLocation", "setPhysicsLocation", "Physics Location"));\n        set.put(makeProperty(obj, Quaternion.class, "getPhysicsRotation", "setPhysicsRotation", "Physics Rotation"));\n\n        set.put(makeProperty(obj, CollisionShape.class, "getCollisionShape", "setCollisionShape", "Collision Shape"));\n        set.put(makeProperty(obj, int.class, "getCollisionGroup", "setCollisionGroup", "Collision Group"));\n        set.put(makeProperty(obj, int.class, "getCollideWithGroups", "setCollideWithGroups", "Collide With Groups"));\n\n        sheet.put(set);\n        return sheet;\n\n    }\n\n    public Class getExplorerObjectClass() {\n        return GhostControl.class;\n    }\n\n    public Class getExplorerNodeClass() {\n        return JmeGhostControl.class;\n    }\n\n    public org.openide.nodes.Node[] createNodes(Object key, DataObject key2, boolean cookie) {\n        return new org.openide.nodes.Node[]{new JmeGhostControl((GhostControl) key, key2).setReadOnly(cookie)};\n    }\n}\n')),Object(a.b)("h1",{id:"adding-items-to-the-add-and-tools-menus"},"Adding items to the add and tools menus"),Object(a.b)("p",null,"For adding Spatials, Contols and for general tools theres premade\nabstract classes that you can use to extend the options. Undo/Redo is\nhandled by the abstract class. AbstractNewSpatial","*","Wizard","*","Action allows\nyou to show an AWT wizard before creating the Spatial. You can also just\nimplement the base ServiceProvider class and return any kind of action\n(such as a wizard), in this case you have to handle the threading\nyourself!"),Object(a.b)("p",null,"::: {.important}\nNote that the classes you create are singletons which are used across\nmultiple nodes and you should not store any data in local variables!\n:::"),Object(a.b)("p",null,"To add a new Tool, create a new AbstractToolAction:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'@org.openide.util.lookup.ServiceProvider(service = ToolAction.class)\npublic class GenerateTangentsTool extends AbstractToolAction {\n\n    public GenerateTangentsTool() {\n        name = "Generate Tangents";\n    }\n\n    @Override\n    protected Object doApplyTool(AbstractSceneExplorerNode rootNode) {\n        Geometry geom = rootNode.getLookup().lookup(Geometry.class);\n        Mesh mesh = geom.getMesh();\n        if (mesh != null) {\n            TangentBinormalGenerator.generate(mesh);\n        }\n        return geom;\n    }\n\n    @Override\n    protected void doUndoTool(AbstractSceneExplorerNode rootNode, Object undoObject) {\n        Geometry geom = rootNode.getLookup().lookup(Geometry.class);\n        Mesh mesh = geom.getMesh();\n        if (mesh != null) {\n            mesh.clearBuffer(Type.Tangent);\n        }\n    }\n\n    public Class<?> getNodeClass() {\n        return JmeGeometry.class;\n    }\n\n}\n')),Object(a.b)("p",null,"For a new Spatial or Control, use AbstractNewSpatialAction"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'@org.openide.util.lookup.ServiceProvider(service = NewSpatialAction.class)\npublic class NewSpecialSpatialAction extends AbstractNewSpatialAction {\n\n    public NewSpecialSpatialAction() {\n        name = "Spatial";\n    }\n\n    @Override\n    protected Spatial doCreateSpatial(Node parent) {\n        Spatial spatial=new Node();\n        return spatial;\n    }\n}\n')),Object(a.b)("p",null,"or AbstractNewControlAction:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'@org.openide.util.lookup.ServiceProvider(service = NewControlAction.class)\npublic class NewRigidBodyAction extends AbstractNewControlAction {\n\n    public NewRigidBodyAction() {\n        name = "Static RigidBody";\n    }\n\n    @Override\n    protected Control doCreateControl(Spatial spatial) {\n        RigidBodyControl control = spatial.getControl(RigidBodyControl.class);\n        if (control != null) {\n            spatial.removeControl(control);\n        }\n        Node parent = spatial.getParent();\n        spatial.removeFromParent();\n        control = new RigidBodyControl(0);\n        if (parent != null) {\n            parent.attachChild(spatial);\n        }\n        return control;\n    }\n}\n')),Object(a.b)("h2",{id:"adding-using-a-wizard"},"Adding using a Wizard"),Object(a.b)("p",null,"You can create a new wizard using the wizard template in the SDK (New\nFile\u2192Module Development\u2192Wizard). The Action that the template creates\ncan easily be changed to one for adding a Control or Spatial or for\napplying a Tool. Note that we extend AbstractNewSpatial","*","Wizard","*","Action\nhere."),Object(a.b)("p",null,'A good example is the "Add SkyBox Wizard:'),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'@org.openide.util.lookup.ServiceProvider(service = NewSpatialAction.class)\npublic class AddSkyboxAction extends AbstractNewSpatialWizardAction {\n\n    private WizardDescriptor.Panel[] panels;\n\n    public AddSkyboxAction() {\n        name = "Skybox..";\n    }\n\n    @Override\n    protected Object showWizard(org.openide.nodes.Node node) {\n        WizardDescriptor wizardDescriptor = new WizardDescriptor(getPanels());\n        wizardDescriptor.setTitleFormat(new MessageFormat("{0}"));\n        wizardDescriptor.setTitle("Skybox Wizard");\n        Dialog dialog = DialogDisplayer.getDefault().createDialog(wizardDescriptor);\n        dialog.setVisible(true);\n        dialog.toFront();\n        boolean cancelled = wizardDescriptor.getValue() != WizardDescriptor.FINISH_OPTION;\n        if (!cancelled) {\n            return wizardDescriptor;\n        }\n        return null;\n    }\n\n    @Override\n    protected Spatial doCreateSpatial(Node parent, Object properties) {\n        if (properties != null) {\n            return generateSkybox((WizardDescriptor) properties);\n        }\n        return null;\n    }\n\n    private Spatial generateSkybox(WizardDescriptor wiz) {\n        if ((Boolean) wiz.getProperty("multipleTextures")) {\n            Texture south = (Texture) wiz.getProperty("textureSouth");\n            Texture north = (Texture) wiz.getProperty("textureNorth");\n            Texture east = (Texture) wiz.getProperty("textureEast");\n            Texture west = (Texture) wiz.getProperty("textureWest");\n            Texture top = (Texture) wiz.getProperty("textureTop");\n            Texture bottom = (Texture) wiz.getProperty("textureBottom");\n            Vector3f normalScale = (Vector3f) wiz.getProperty("normalScale");\n            return SkyFactory.createSky(pm, west, east, north, south, top, bottom, normalScale);\n        } else {\n            Texture textureSingle = (Texture) wiz.getProperty("textureSingle");\n            Vector3f normalScale = (Vector3f) wiz.getProperty("normalScale");\n            boolean useSpheremap = (Boolean) wiz.getProperty("useSpheremap");\n            return SkyFactory.createSky(pm, textureSingle, normalScale, useSpheremap);\n        }\n    }\n\n    /**\n     * Initialize panels representing individual wizard\'s steps and sets\n     * various properties for them influencing wizard appearance.\n     */\n    private WizardDescriptor.Panel[] getPanels() {\n        if (panels == null) {\n            panels = new WizardDescriptor.Panel[]{\n                        new SkyboxWizardPanel1(),\n                        new SkyboxWizardPanel2()\n                    };\n            String[] steps = new String[panels.length];\n            for (int i = 0; i < panels.length; i++) {\n                Component c = panels[i].getComponent();\n                // Default step name to component name of panel. Mainly useful\n                // for getting the name of the target chooser to appear in the\n                // list of steps.\n                steps[i] = c.getName();\n                if (c instanceof JComponent) { // assume Swing components\n                    JComponent jc = (JComponent) c;\n                    // Sets step number of a component\n                    // TODO if using org.openide.dialogs >= 7.8, can use WizardDescriptor.PROP_*:\n                    jc.putClientProperty("WizardPanel_contentSelectedIndex", new Integer(i));\n                    // Sets steps names for a panel\n                    jc.putClientProperty("WizardPanel_contentData", steps);\n                    // Turn on subtitle creation on each step\n                    jc.putClientProperty("WizardPanel_autoWizardStyle", Boolean.TRUE);\n                    // Show steps on the left side with the image on the background\n                    jc.putClientProperty("WizardPanel_contentDisplayed", Boolean.TRUE);\n                    // Turn on numbering of all steps\n                    jc.putClientProperty("WizardPanel_contentNumbered", Boolean.TRUE);\n                }\n            }\n        }\n        return panels;\n    }\n}\n')),Object(a.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"The abstract spatial and control actions implement undo/redo\nautomatically, for the ToolActions you have to implement it yourself."))))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},d=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,b=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return n?r.a.createElement(b,l({ref:t},c,{components:n})):r.a.createElement(b,l({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{383:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(1),o=n(9),s=(n(0),n(441)),a={},i={id:"spidermonkey/tutorial/compression",title:"compression",description:"::: {.warning}",source:"@site/docs/spidermonkey/tutorial/compression.md",permalink:"/wikidemo/docs/spidermonkey/tutorial/compression",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/spidermonkey/tutorial/compression.md"},c=[],p={rightToc:c};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"::: {.warning}\nThis article covers a deprecated API! See\n",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"../../jme3/advanced/networking"}),"networking")," for current\ndocumentation.\n:::"),Object(s.b)("p",null,"Now this is going to be a real simply tutorial but still I wanted this\nin a separate article. Why you may ask? Simply because it's a feature\nthat requires some explanation, since it has some caveats that I'll\ndiscuss. Also, I'll cover writing your own compression message."),Object(s.b)("p",null,"First off - there are two compression types in SpiderMonkey, they are\nGZip and Zip. Could've added more, but didn't want to have a dependency\nfor just a compression method. Both are used by wrapping your message in\nthe appropriate compression message:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"MyMessage msg = new MyMessage();\nclient.send(new GZIPCompressedMessage(msg));\n// or\nclient.send(new ZIPCompressedMessage(msg));\n")),Object(s.b)("p",null,"Really simple, but ZIP requires some explanation. The\nZIPCompressedMessage class also has two extra methods; setLevel(int) and\ngetLevel(). These methods are for setting the compression level, where 1\nis best compression but slowest, and where 9 is weakest compression but\nfastest. Please note that 9 is ",Object(s.b)("strong",{parentName:"p"},"not")," the so called \\'store\\' ZIP\nmethod, which simply stores file in the ZIP, instead of compressing it.\nThis \\'store\\' feature is not in SpiderMonkey since otherwise it would\nnot have been called compression."),Object(s.b)("h1",{id:"writing-your-own"},"Writing your own"),Object(s.b)("p",null,"Now of course I'd love to see more compression methods in SpiderMonkey,\nso I'll discuss how to write your own. Let's just take\nGZIPCompressedMessage as example, since that one is the most\nstraightforward. What I've done, is I've just created a\nGZIPCompressedMessage which extends CompressedMessage. It does not\ncontain any extra messages, so the GZIPCompressedMessage class is\npractically \\'empty\\'. The magic happens at the serializer, which is\ncalled the GZIPSerializer (you can read about writing your own\nserializer ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"../../spidermonkey/tutorial/serializing"}),"here"),"). Then I\njust registered the GZIPSerializer to GZIPCompressedMessage and presto -\nyou're done. Don't forget that in the Serializer you need to use\nwriteClassAndObject first and then compress that data, and for read\nyou'd need to use readClassAndObject after you've uncompressed\n(inflated) the message. For this to be clear, it may be useful to read\n",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"http://code.google.com/p/jmonkeyengine/source/browse/trunk/engine/src/networking/com/jme3/network/serializing/serializers/GZIPSerializer.java"}),"the GZIPSerializer\nclass"),"."),Object(s.b)("p",null,"That's that! Next tutorial we're going to discuss how to use the Service\nsystem."))}l.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},u=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,b=u["".concat(a,".").concat(m)]||u[m]||d[m]||s;return n?o.a.createElement(b,i({ref:t},p,{components:n})):o.a.createElement(b,i({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
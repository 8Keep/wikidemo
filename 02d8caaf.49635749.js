(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{143:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return c}));var a=n(1),i=n(9),o=(n(0),n(441)),r={},s={id:"jme3/intermediate/simpleapplication",title:"simpleapplication",description:"The base class of the jMonkeyEngine3 is",source:"@site/docs/jme3/intermediate/simpleapplication.md",permalink:"/wikidemo/docs/jme3/intermediate/simpleapplication",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/intermediate/simpleapplication.md",sidebar:"main",previous:{title:"best_practices",permalink:"/wikidemo/docs/jme3/intermediate/best_practices"},next:{title:"appsettings",permalink:"/wikidemo/docs/jme3/intermediate/appsettings"}},p=[],l={rightToc:p};function c(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The base class of the jMonkeyEngine3 is\n",Object(o.b)("inlineCode",{parentName:"p"},"com.jme3.app.SimpleApplication"),". Your first game's Main class extends\nSimpleApplication directly. When you feel confident you understand the\nfeatures, you will typically extend SimpleApplication to create a custom\nbase class for the type of games that you want to develop."),Object(o.b)("p",null,"SimpleApplication gives you access to standard game features, such as a\nscene graph (rootNode), an asset manager, a user interface (guiNode),\ninput manager, audio manager, a physics simulation, and a fly-by camera.\nYou call app.start() and app.stop() on your game instance to start or\nquit the application."),Object(o.b)("p",null,"::: {.important}\nFor each game, you (directly or indirectly) extend SimpleApplication\nexactly once as the central class. If you need access to any\nSimpleApplication features from another game class, make the other class\nextend ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"AbstractAppState"),"\n(don't extend SimpleApplication once more).\n:::"),Object(o.b)("p",null,"::: {.note}\nThe SimpleApplication class is undergoing changes. To understand how\nthese changes may affect your projects and how to best prepare for them,\nsee ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/beginner/hello_simpleapplication.xml#the-future-of-simpleapplication#"}),"The Future of\nSimpleApplication"),'\ntopic in the "Hello SimpleApplication" tutorial for beginners.\n:::'),Object(o.b)("p",null,"The following code sample shows the typical base structure of a jME3\ngame:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"import com.jme3.app.SimpleApplication;\n\npublic class MyBaseGame extends SimpleApplication {\n\n    public static void main(String[] args){\n        MyBaseGame app = new MyBaseGame();\n        app.start();\n    }\n\n    @Override\n    public void simpleInitApp() {\n       /* Initialize the game scene here */\n    }\n\n    @Override\n    public void simpleUpdate(float tpf) {\n       /* Interact with game events in the main loop */\n    }\n\n    @Override\n    public void simpleRender(RenderManager rm) {\n       /* (optional) Make advanced modifications to frameBuffer and scene graph. */\n    }\n}\n")),Object(o.b)("p",null,"Let's have a look at the API of the base class."),Object(o.b)("h1",{id:"application-class"},"Application Class"),Object(o.b)("p",null,"Internally, com.jme3.app.SimpleApplication extends\ncom.jme3.app.Application. The Application class represents a generic\nreal-time 3D rendering jME3 application (i.e., not necessarily a game).\nTypically, you do not extend com.jme3.app.Application directly to create\na game."),Object(o.b)("p",null,"+-----------------+-----------------------------------------------------+\n| Application     | Purpose                                             |\n| class fields    |                                                     |\n+=================+=====================================================+\n| viewPort\\       | The view object for the default camera. You can     |\n| getViewPort()   | register advanced ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/effects_overview"}),"post-processor                   |\n|                 | filters"),"  |\n|                 | here.                                               |\n+-----------------+-----------------------------------------------------+\n| settings\\       | Use this AppSettings object to specify the display  |\n| setSettings()   | width and height (by default 640x480), color bit    |\n|                 | depth, z-buffer bits, anti-aliasing samples, and    |\n|                 | update frequency, video and audio renderer, asset   |\n|                 | manager.\\                                           |\n|                 | See:                                                |\n|                 | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/intermediate/appsettings"}),"App                                                |\n|                 | Settings"),". |\n+-----------------+-----------------------------------------------------+\n| cam\\            | The default                                         |\n| getCamera()     | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/camera"}),"camera")," provides   |\n|                 | perspective projection, 45\xb0 field of view, near     |\n|                 | plane = 1 wu, far plane = 1000 wu.                  |\n+-----------------+-----------------------------------------------------+\n| assetManager\\   | An object that manages paths for loading models,    |\n| ge              | textures, materials, sounds, etc.\\                  |\n| tAssetManager() | By default the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/asset_manager"}),"Asset                               |\n|                 | Manager"),"     |\n|                 | paths are relative to your project's root           |\n|                 | directory.                                          |\n+-----------------+-----------------------------------------------------+\n| audioRenderer\\  | This object gives you access to the jME3            |\n| get             | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/audio"}),"audio")," system.      |\n| AudioRenderer() |                                                     |\n+-----------------+-----------------------------------------------------+\n| listener\\       | This object represents the user's ear for the jME3  |\n| getListener()   | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/audio"}),"audio")," system.      |\n+-----------------+-----------------------------------------------------+\n| inputManager\\   | Use the                                             |\n| ge              | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/input_handling"}),"in                                                 |\n| tInputManager() | putManager")," |\n|                 | to configure your custom inputs (mouse movement,    |\n|                 | clicks, key presses, etc) and set mouse pointer     |\n|                 | visibility.                                         |\n+-----------------+-----------------------------------------------------+\n| stateManager\\   | You use the Application's state manager to activate |\n| ge              | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"AppS                                               |\n| tStateManager() | tates"),", |\n|                 | such as ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/physics"}),"Physics"),". |\n+-----------------+-----------------------------------------------------+"),Object(o.b)("p",null,"+-----------------+-----------------------------------------------------+\n| Application     | Purpose                                             |\n| methods         |                                                     |\n+=================+=====================================================+\n| setPauseOn      | Set this boolean whether the game loop should stop  |\n| LostFocus(true) | running when ever the window loses focus (typical   |\n|                 | for single-player game). Set this to false for      |\n|                 | real-time and multi-player games that keep running. |\n+-----------------+-----------------------------------------------------+\n| start()         | Call this method to start a jME3 game. By default   |\n|                 | this opens a new jME3 window, initializes the       |\n|                 | scene, and starts the event loop.                   |\n+-----------------+-----------------------------------------------------+\n| restart()       | Loads modified                                      |\n|                 | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/intermediate/appsettings"}),"Ap                                                 |\n|                 | pSettings")," |\n|                 | into the current application context.               |\n+-----------------+-----------------------------------------------------+\n| stop()          | Stops the running jME3 game and closes the jME3     |\n|                 | window.                                             |\n+-----------------+-----------------------------------------------------+\n| start           | Switch Context com.\u200bjme3.\u200bsystem.\u200bJmeContext.Type   |\n| (Type.Headless) | when starting the application:\\                     |\n| etc             | Type.Display -- jME application runs in a window of |\n|                 | its own. (This is the default.)\\                    |\n|                 | Type.Canvas -- jME application is embedded in a     |\n|                 | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/swing_canvas"}),"Swing                                              |\n|                 | Canvas"),".\\     |\n|                 | Type.Headless -- jME application runs its event     |\n|                 | loop without calculating any view and without       |\n|                 | opening any window. Can be used for a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/headless_server"}),"Headless     |\n|                 | Server"),"    |\n|                 | application.\\                                       |\n|                 | Type.OffscreenSurface -- jME application view is    |\n|                 | not shown and no window opens, but everything       |\n|                 | calculated and cached as bitmap (back buffer) for   |\n|                 | use by other applications.                          |\n+-----------------+-----------------------------------------------------+"),Object(o.b)("p",null,"+-----------------+-----------------------------------------------------+\n| Internal class  | Purpose                                             |\n| field/method    |                                                     |\n+=================+=====================================================+\n| context\\        | The application context contains the renderer,      |\n| getContext()    | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/intermediate/appsettings"}),"App                                                |\n|                 | Settings"),", |\n|                 | timer, etc. Typically, you do not directly access   |\n|                 | the context object.                                 |\n+-----------------+-----------------------------------------------------+\n| inputEnabled    | this internal boolean is true if you want the       |\n|                 | system to listen for user inputs, and false if you  |\n|                 | just want to play a non-interactive scene. You      |\n|                 | change the boolean using                            |\n|                 | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/intermediate/appsettings"}),"App                                                |\n|                 | Settings"),". |\n+-----------------+-----------------------------------------------------+\n| keyInput,       | Default input contexts for keyboard, mouse, and     |\n| mouseInput\\     | joystick. Internally used to enable handling of     |\n| joyInput,       | joysticks or touch devices. The base classes        |\n| touchInput      | contain key and mouse button enums.                 |\n+-----------------+-----------------------------------------------------+\n| renderManager\\  | Low-level and high-level rendering interface.       |\n| getR            | Mostly used internally.                             |\n| enderManager()\\ |                                                     |\n| renderer\\       |                                                     |\n| getRenderer();  |                                                     |\n+-----------------+-----------------------------------------------------+\n| guiViewPort\\    | The view object for the orthogonal GUI view. Only   |\n| g               | used internally for                                 |\n| etGuiViewPort() | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/hud"}),"HUD"),"s.                |\n+-----------------+-----------------------------------------------------+\n| timer           | An internal update loop timer, don't use. See ",Object(o.b)("inlineCode",{parentName:"p"},"tpf")," |\n|                 | in ",Object(o.b)("inlineCode",{parentName:"p"},"simpleUpdate()")," below to learn about timers.    |\n+-----------------+-----------------------------------------------------+\n| paused          | Boolean is used only internally during runtime to   |\n|                 | pause/unpause a game. (You need to implement your   |\n|                 | own isRunning boolean or so.)                       |\n+-----------------+-----------------------------------------------------+"),Object(o.b)("h1",{id:"simpleapplication-class"},"SimpleApplication Class"),Object(o.b)("p",null,"The com.jme3.app.SimpleApplication class extends the generic\ncom.jme3.app.Application class. SimpleApplication makes it easy to start\nwriting a game because it adds typical functionality:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"First-person (fly-by) camera")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Scene graph that manages your models in the rendered 3D scene.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Useful default input mappings (details below.)"))),Object(o.b)("p",null,"Additional to the functionality that Application brings,\nSimpleApplication offers the following methods and fields that can be\nused, for example, inside the ",Object(o.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method:"),Object(o.b)("p",null,"+-----------------+-----------------------------------------------------+\n| Si              | Purpose                                             |\n| mpleApplication |                                                     |\n| Class Field     |                                                     |\n+=================+=====================================================+\n| rootNode\\       | The root node of the scene graph. Attach a          |\n| getRootNode()   | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/spatial"}),"Spatial")," to the   |\n|                 | rootNode and it appears in the 3D scene.            |\n+-----------------+-----------------------------------------------------+\n| guiNode\\        | Attach flat GUI elements (such as                   |\n| getGuiNode()    | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/hud"}),"HUD")," images and text) |\n|                 | to this orthogonal GUI node to make them appear on  |\n|                 | the screen.                                         |\n+-----------------+-----------------------------------------------------+\n| flyCam\\         | The default first-person fly-by camera control.     |\n| g               | This default camera control lets you navigate the   |\n| etFlyByCamera() | 3D scene using the preconfigured WASD and arrow     |\n|                 | keys and the mouse.                                 |\n+-----------------+-----------------------------------------------------+"),Object(o.b)("p",null,"+-----------------+-----------------------------------------------------+\n| Si              | Purpose                                             |\n| mpleApplication |                                                     |\n| Method          |                                                     |\n+=================+=====================================================+\n| l               | Call this method to print live statistic            |\n| oadStatsView(); | information to the screen, such as current          |\n|                 | frames-per-second and triangles/vertices counts.    |\n|                 | You use this info typically only during development |\n|                 | or debugging.                                       |\n+-----------------+-----------------------------------------------------+\n| loadFPSText();  | Call this method to print the current framerate     |\n|                 | (frames per second) to the screen.                  |\n+-----------------+-----------------------------------------------------+\n| setDis          | A default SimpleApplication displays the framerate  |\n| playFps(false); | (frames per second) on the screen. You can choose   |\n|                 | to deactivate the FPS display using this command.   |\n+-----------------+-----------------------------------------------------+\n| setDisplayS     | A default SimpleApplication displays mesh           |\n| tatView(false); | statistics on the screen using the                  |\n|                 | com.jme3.app.StatsView class. The information is    |\n|                 | valuable during the development and debugging       |\n|                 | phase, but for the release, you should hide the     |\n|                 | statistics HUD.\\                                    |\n|                 | ",Object(o.b)("strong",{parentName:"p"},"*","Note:")," There is a dark quad behind the stats.  |\n|                 | Each letter displayed in the stats is a quad. Each  |\n|                 | quad has 4 vertexes and 2 triangles.\\               |\n|                 |                                                     |\n|                 | 456/2 = 228\\                                        |\n|                 | 912/4 = 228                                         |\n|                 |                                                     |\n|                 | This means if you display stats, there will be 456  |\n|                 | triangles and 912 vertices showing in the stats     |\n|                 | view in addition to anything you add yourself.      |\n+-----------------+-----------------------------------------------------+"),Object(o.b)("p",null,"+---------------------------+------------------------------------------+\n| SimpleApplication         | Purpose                                  |\n| Interface                 |                                          |\n+===========================+==========================================+\n| public void               | Override this method to initialize the   |\n| simpleInitApp()           | game scene. Here you load and create     |\n|                           | objects, attach Spatials to the          |\n|                           | rootNode, and bring everything in its    |\n|                           | starts position. See also ","[Application   |\n|                           | States]","(../                              |\n|                           | ../jme3/advanced/application_states) |\n|                           | for best practices.                      |\n+---------------------------+------------------------------------------+\n| public void               | Override this method to hook into the    |\n| simpleUpdate(float tpf)   | ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/update_loop"}),"update                                  |\n|                           | loo                                      |\n|                           | p"),", |\n|                           | all code you put here is repeated in a   |\n|                           | loop. Use this loop to poll the current  |\n|                           | game state and respond to changes, or to |\n|                           | let the game mechanics generate          |\n|                           | encounters and initiate state changes.   |\n|                           | Use the float ",Object(o.b)("inlineCode",{parentName:"p"},"tpf")," as a factor to time  |\n|                           | actions relative to the ",Object(o.b)("em",{parentName:"p"},"time per frame")," |\n|                           | in seconds: ",Object(o.b)("inlineCode",{parentName:"p"},"tpf")," is large on slow PCs,  |\n|                           | and small on fast PCs.\\                  |\n|                           | For more info on how to hook into the    |\n|                           | update loop, see ","[Application            |\n|                           | States]","(../                              |\n|                           | ../jme3/advanced/application_states) |\n|                           | and ","[Custom                              |\n|                           | Controls]","(.                              |\n|                           | ./../jme3/advanced/custom_controls). |\n+---------------------------+------------------------------------------+\n| public void               | ",Object(o.b)("strong",{parentName:"p"},"Optional:")," Advanced developers can    |\n| s                         | override this method if the need to      |\n| impleRender(RenderManager | modify the frameBuffer and scene graph   |\n| rm)                       | directly.                                |\n+---------------------------+------------------------------------------+"),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Use ",Object(o.b)("inlineCode",{parentName:"p"},"app.setShowSettings(true);")," to present the user with a splashscreen\nand the built-in display settings dialog when starting the game; or use\n",Object(o.b)("inlineCode",{parentName:"p"},"app.setShowSettings(false);")," to hide the built-in screen (in this case,\nyou may want to provide a custom splashscreen and settings panel). Set\nthis boolean before calling ",Object(o.b)("inlineCode",{parentName:"p"},"app.start()")," in the ",Object(o.b)("inlineCode",{parentName:"p"},"main()")," method of the\nSimpleApplication. See also\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/intermediate/appsettings"}),"AppSettings"),"."))),Object(o.b)("h1",{id:"default-input-mappings"},"Default Input Mappings"),Object(o.b)("p",null,"The following default navigational input actions are mapped by the\ndefault ",Object(o.b)("inlineCode",{parentName:"p"},"flyCam")," control in a SimpleApplication: You can use these\nmappings for debugging and testing until you implement custom ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/input_handling"}),"input\nhandling"),"."),Object(o.b)("p",null,"+-----------------------------------+-----------------------------------+\n| Key                               | Action                            |\n+===================================+===================================+\n| KEY","_","ESCAPE                       | Quits the game by calling         |\n|                                   | ",Object(o.b)("inlineCode",{parentName:"p"},"app.stop()"),"                      |\n+-----------------------------------+-----------------------------------+\n| KEY","_","C                            | Debug key: Prints camera          |\n|                                   | position, rotation, and direction |\n|                                   | to the out stream.                |\n+-----------------------------------+-----------------------------------+\n| KEY","_","M                            | Debug key: Prints memory usage    |\n|                                   | stats the out stream.             |\n+-----------------------------------+-----------------------------------+\n| F5                                | Hides or shows the statistics the |\n|                                   | bottom left.                      |\n+-----------------------------------+-----------------------------------+"),Object(o.b)("p",null,"As long as the ",Object(o.b)("inlineCode",{parentName:"p"},"flyCam"),' is enabled, the following so-called "WASD"\ninputs, including MouseLook, are available:'),Object(o.b)("p",null,"+-----------------------------------+-----------------------------------+\n| Camera Motion                     | Key or Mouse Input                |\n+===================================+===================================+\n| Move Forward                      | KEY","_","W                            |\n+-----------------------------------+-----------------------------------+\n| Move Left (Strafe)                | KEY","_","A                            |\n+-----------------------------------+-----------------------------------+\n| Move Backward                     | KEY","_","S                            |\n+-----------------------------------+-----------------------------------+\n| Move Right (Strafe)               | KEY","_","D                            |\n+-----------------------------------+-----------------------------------+\n| Move Vertical Upward              | KEY","_","Q                            |\n+-----------------------------------+-----------------------------------+\n| Move Vertical Downward            | KEY","_","Z                            |\n+-----------------------------------+-----------------------------------+\n| Rotate Left                       | KEY","_","LEFT, or move mouse          |\n|                                   | horizontally left (-x)            |\n+-----------------------------------+-----------------------------------+\n| Rotate Right                      | KEY","_","RIGHT, or move mouse         |\n|                                   | horizontally right (+x)           |\n+-----------------------------------+-----------------------------------+\n| Rotate Up                         | KEY","_","UP, or move mouse vertically |\n|                                   | forward (+y)                      |\n+-----------------------------------+-----------------------------------+\n| Rotate Down                       | KEY","_","DOWN, or move mouse          |\n|                                   | vertically backward (-y)          |\n+-----------------------------------+-----------------------------------+\n| Rotate                            | BUTTON","_","LEFT, or hold left mouse  |\n|                                   | button and drag to rotate         |\n+-----------------------------------+-----------------------------------+\n| Zoom In                           | AXIS","_","WHEEL, or scroll mouse      |\n|                                   | wheel backward                    |\n+-----------------------------------+-----------------------------------+\n| Zoom Out                          | AXIS","_","WHEEL, or scroll mouse      |\n|                                   | wheel forward                     |\n+-----------------------------------+-----------------------------------+"),Object(o.b)("h1",{id:"defaults-and-customization"},"Defaults and Customization"),Object(o.b)("p",null,"By default, a SimpleApplication displays Statistics\n(",Object(o.b)("inlineCode",{parentName:"p"},"new StatsAppState()"),"), has debug output keys configured\n(",Object(o.b)("inlineCode",{parentName:"p"},"new DebugKeysAppState()"),"), and enables the flyCam\n(",Object(o.b)("inlineCode",{parentName:"p"},"new FlyCamAppState()"),"). You can customize which you want to reuse in\nyour SimpleApplication."),Object(o.b)("p",null,"The following example shows how you can remove one of the default\nAppStates, in this case, the FlyCamAppState:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Either, in your application's contructor, you create the\nSimpleApplication with only the AppStates you want to keep:")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public MyAppliction() {\n  super( new StatsAppState(), new DebugKeysAppState() );\n}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Or, in the ",Object(o.b)("inlineCode",{parentName:"li"},"simpleInitApp()")," method, you remove the ones you do not\nwant to keep:")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"  public void simpleInitApp() {\n    stateManager.detach( stateManager.getState(FlyCamAppState.class));\n    ...\n")))}c.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),c=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},d=function(e){var t=c(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,b=d["".concat(r,".").concat(u)]||d[u]||m[u]||o;return n?i.a.createElement(b,s({ref:t},l,{components:n})):i.a.createElement(b,s({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var l=2;l<o;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{242:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(1),o=n(9),r=(n(0),n(441)),i={},s={id:"jme3/contributions/cubes",title:"cubes",description:"![header.png](http://destroflyer.mania-community.de/other/imagehost/cubes/header.png)",source:"@site/docs/jme3/contributions/cubes.md",permalink:"/wikidemo/docs/jme3/contributions/cubes",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/contributions/cubes.md"},c=[],l={rightToc:c};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"http://destroflyer.mania-community.de/other/imagehost/cubes/header.png",alt:"header.png"}))),Object(r.b)("p",null,"::: {.important}\nThis framework is still ",Object(r.b)("strong",{parentName:"p"},"work-in-progress")," - I'll keep you up-to-date\nabout modifications. :)\n:::"),Object(r.b)("p",null,'As the title says, "Cubes is a framework for block worlds (also called\n"bloxel or "minecraft-like) - It offers an easy way to add/remove\nblocks, block skinning, useful tools and user-specific behaviours.\n"Cubes itself will not contain tools for creating crafting or RPG\nfunctionalities, it will ',Object(r.b)("strong",{parentName:"p"},"only")," help you managing the block system."),Object(r.b)("h1",{id:"the-origin"},"The origin"),Object(r.b)("p",null,"In the summer of 2011, I (destroflyer) started a little minecraft clone\n(like almost every jMonkey) - nothing special, I just wanted a little\nblock world in which players can walk around, place or remove blocks and\nthe ability to save those maps. It didn't take long until I stumbled\nacross the \"batch-boxes-to-improve-performance, texture atlas and mesh\noptimization things - Luckily, I managed to get those to run, played a\nfew rounds with a friend and that was it. The code was really quick \\'n\ndirty and at this time, my studies at the university began. The \"game\nwas never started anymore and was hidden in the jME-projects folder -\nUntil a few days ago."),Object(r.b)("p",null,'Almost every two days, a new thread in the forum appears, where people\ntalk about "bloxel worlds, mesh optimization, batching and so on... As\nthe discussions about the GUI frameworks (Nifty and its upcoming\nalternatives) began, I thought: "Why don\'t you create a\nblock-world-framework, that the people can use easily? :)'),Object(r.b)("p",null,"I read my old code (mainly the chunk management and the mesh optimizer)\nagain and started to code the named framework from scratch - After a few\nhours, I made the block world run and after 2 days it seemed to work in\nthe way I like it to work."),Object(r.b)("p",null,'At the moment, the "block engine includes all necessary features for a\nminecraft-like world and even a few useful tools (e.g. loading blocks\nfrom heightmaps, noises, ...) - Time to publish a first preview. :)'),Object(r.b)("h1",{id:"how-it-works"},"How it works"),Object(r.b)("p",null,"The vertex buffers, UV coordinates, chunk management, block faces, ...\n... ... ... nah, just kidding. :P I think, everyone who knows about this\ntopic, knows how bloxel-engines work. And in case you don't - There are\nsooo many topics about this in the forum and even articles on the\ninternet... I don't want to explain everything, that was already\nexplained by persons, who can do it much better than me."),Object(r.b)("p",null,"Nevertheless, here are the basics: Blocks are merged to chunks (e.g.\n16x256x16 blocks), so only the according chunks need to be updated when\nthe block is added/removed/whatever. The tricky thing when rendering is\nto only render the visible faces - If you have a huge mountain of\nblocks, you only need to render the blocks on the surface. And even in\nthis case, only the faces that point outwards. ;) The framework does all\nthis for you, no need to worry. You, as user, can just add/remove blocks\nas you wish without knowing about the chunks, the optimized geometries\netc. etc."),Object(r.b)("p",null,"\u21d2 You add a block \u21d2 You see the block :)"),Object(r.b)("h1",{id:"performance"},"Performance"),Object(r.b)("p",null,"The performance is good I think - In a test case I had a scene with\n1.350.000 blocks (in 4x1x4 chunks of the size 16x256x16) and 20\nmovements of a block per second - The result was 1200 FPS. The average\ntime to generate the optimized geometry for a chunk was 5ms."),Object(r.b)("p",null,"Of course, there are cases when every face has to be rendered - But even\nin generated worst cases I never fell under 300-400 FPS, so it ",Object(r.b)("em",{parentName:"p"},"should"),"\nbe fine for this stage of development (More about possible improvements\nlater)."),Object(r.b)("h1",{id:"usage"},"Usage"),Object(r.b)("p",null,"Enough boring words about theory - Here's how you use the framework. :)\nThis happens in different parts:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/contributions/cubes/settings"}),"Settings")),Object(r.b)("p",{parentName:"li"},"a.  ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/contributions/cubes/register_your_blocks"}),"Register Your\nBlocks")),Object(r.b)("p",{parentName:"li"},"b.  ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/contributions/cubes/build_your_block_world"}),"Build Your Block\nWorld")))),Object(r.b)("p",null,"After executing these steps, you should come up with an application like\nthe ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/contributions/cubes/basic_example"}),"Basic Example"),"."),Object(r.b)("h1",{id:"screenshots"},"Screenshots"),Object(r.b)("p",null,"Those are just some random screenshots that I made while creating and\ntesting the block engine - They show in a nice way, what you can expect\nfrom the framework."),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"http://destroflyer.mania-community.de/other/imagehost/cubes/test_physics.png",alt:"test_physics.png"}))),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"http://destroflyer.mania-community.de/other/imagehost/cubes/etherblocks_third_person.jpg",alt:"etherblocks_third_person.jpg"}))),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"http://destroflyer.mania-community.de/other/imagehost/cubes/wireframe_view.png",alt:"wireframe_view.png"}))),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"http://destroflyer.mania-community.de/other/imagehost/cubes/test_shapes.png",alt:"test_shapes.png"}))),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"http://destroflyer.mania-community.de/other/imagehost/cubes/scene_mountains.png",alt:"scene_mountains.png"}))),Object(r.b)("h1",{id:"tools"},"Tools"),Object(r.b)("p",null,"The framework offers several tools to play around with your blockworld:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/contributions/cubes/tools/heightmaps"}),"Heightmaps"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/contributions/cubes/tools/noise"}),"Noise"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/contributions/cubes/tools/picking"}),"Picking"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/contributions/cubes/tools/serialization"}),"Serialization")))),Object(r.b)("h1",{id:"further-improvements--work-in-progress-things"},'Further improvements / \\"Work-In-Progress\\" things'),Object(r.b)("p",null,"The following list contains things, that are ",Object(r.b)("strong",{parentName:"p"},"not yet")," (!) part of the\nframework, but are considered as useful. If you have any ideas what's\nmissing or what could be a cool feature, please tell me and (hopefully)\nit will be on the to-do list. :)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Wiki:")," List the included test applications (Tutorial, Heightmap,\nNoise, Modifications, ...)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Wiki:")," List the included test data (Assets, Blocks, ...)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Wiki:")," Write the missing instructions for some tools (e.g. how to\ncreate custom block shapes)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"BlockTerrain:")," Support for dynamic counts of chunks\n(Automatically add chunks if an out-of-bounds block is added)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Lights:"),' Implement a performant way to calculate if a block is\naffected by a "light block and modify its texture accordingly'))),Object(r.b)("h1",{id:"where-is-this-available"},"Where is this available?"),Object(r.b)("p",null,'This framework is available as plugin in the jMonkeyEngine SDK ("Tools \u2192\n"Plugins), so users are able to download and integrate the library\neasily.'),Object(r.b)("p",null,"Hopefully, this thing will help some of you guys, when it's released -\nAny ideas, hints and comments on this are appreciated. :)"))}b.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),b=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},p=function(e){var t=b(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=b(n),m=a,h=p["".concat(i,".").concat(m)]||p[m]||u[m]||r;return n?o.a.createElement(h,s({ref:t},l,{components:n})):o.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
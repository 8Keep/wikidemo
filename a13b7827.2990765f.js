(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{326:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var a=n(1),o=n(9),r=(n(0),n(441)),i={},c={id:"jme3/advanced/motionpath",title:"motionpath",description:"A MotionPath describes the motion of a spatial between waypoints. The",source:"@site/docs/jme3/advanced/motionpath.md",permalink:"/wikidemo/docs/jme3/advanced/motionpath",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/motionpath.md"},s=[],p={rightToc:s};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"A MotionPath describes the motion of a spatial between waypoints. The\npath can be linear or rounded. You use MotionPaths to remote-control a\nspatial, or the camera."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"If you want to remote-control a whole cutscene with several spatials\nmoving at various times, then we recommened you use MotionPaths together\nwith ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/cinematics"}),"Cinematics"),"."))),Object(r.b)("h1",{id:"sample-code"},"Sample Code"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/animation/TestMotionPath.java"}),"TestMotionPath.java"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/animation/TestCameraMotionPath.java"}),"TestCameraMotionPath.java")))),Object(r.b)("h1",{id:"what-are-way-points"},"What Are Way Points?"),Object(r.b)("p",null,"When shooting a movie scene, the director tells actors where to walk,\nfor example, by drawing a series of small crosses on the floor.\nCameramen often mount the camera on rails (so called dolly track) so\nthey can follow along complex scenes more easily."),Object(r.b)("p",null,"In JME3, you use MotionPaths to specify a series of positions for a\ncharacter or the camera. The MotionPath automatically updates the\ntransformation of the spatial in each frame to make it move from one\npoint to the next."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"A way point")," is one positions on a path.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"A MotionPath")," contains a list of all way points of one path."))),Object(r.b)("p",null,"The final shape of the path is computed using a linear interpolation or\na ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.mvps.org/directx/articles/catmull/"}),"Catmull-Rom")," spline\ninterpolation on the way points."),Object(r.b)("h1",{id:"create-a-motionpath"},"Create a MotionPath"),Object(r.b)("p",null,"Create a Motionpath object and add way points to it."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"MotionPath path = new MotionPath();\npath.addWayPoint(new Vector3f(10, 3, 0));\npath.addWayPoint(new Vector3f(8, -2, 1));\n...\n")),Object(r.b)("p",null,"You can configure the path as follows."),Object(r.b)("p",null,"+-----------------------------------+-----------------------------------+\n| MotionPath Method                 | Usage                             |\n+===================================+===================================+\n| path.setCycle(true)               | Sets whether the motion along     |\n|                                   | this path should be closed (true) |\n|                                   | or open-ended (false).            |\n+-----------------------------------+-----------------------------------+\n| path.addWayPoint(vector)          | Adds individual waypoints to this |\n|                                   | path. The order is relevant.      |\n+-----------------------------------+-----------------------------------+\n| path.removeWayPoint(vector)\\      | Removes a way point from this     |\n| removeWayPoint(index)             | path. You can specify the point   |\n|                                   | that you want to remove as vector |\n|                                   | or as integer index.              |\n+-----------------------------------+-----------------------------------+\n| path.setCurveTension(0.83f)       | Sets the tension of the curve     |\n|                                   | (Catmull-Rom Spline). A value of  |\n|                                   | 0.0f results in a straight linear |\n|                                   | line, 1.0 a very round curve.     |\n+-----------------------------------+-----------------------------------+\n| path.getNbWayPoints()             | Returns the number of waypoints   |\n|                                   | in this path.                     |\n+-----------------------------------+-----------------------------------+\n| path.enable                       | Shows a line that visualizes the  |\n| DebugShape(assetManager,rootNode) | path. Use this during development |\n|                                   | and for debugging so you see what |\n|                                   | you are doing.                    |\n+-----------------------------------+-----------------------------------+\n| path.disableDebugShape()          | Hides the line that visualizes    |\n|                                   | the path. Use this for the        |\n|                                   | release build.                    |\n+-----------------------------------+-----------------------------------+"),Object(r.b)("h1",{id:"motionpathlistener"},"MotionPathListener"),Object(r.b)("p",null,"You can hook interactions into a playing MotionPath. Register a\nMotionPathListener to the MotionPath to track whether way points have\nbeen reached, and then trigger a custom action. The onWayPointReach()\nmethod of the interface gives you access to the MotionEvent object\n",Object(r.b)("inlineCode",{parentName:"p"},"control"),", and an integer value representing the current wayPointIndex."),Object(r.b)("p",null,"In this example, you just print the status at every way point. In a game\nyou could trigger actions here: Transformations, animations, sounds,\ngame actions (attack, open door, etc)."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'path.addListener( new MotionPathListener() {\n  public void onWayPointReach(MotionEvent control, int wayPointIndex) {\n    if (path.getNbWayPoints() == wayPointIndex + 1) {\n      println(control.getSpatial().getName() + " has finished moving. ");\n    } else {\n      println(control.getSpatial().getName() + " has reached way point " + wayPointIndex);\n    }\n  }\n});\n')))}l.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},h=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=l(n),b=a,u=h["".concat(i,".").concat(b)]||h[b]||m[b]||r;return n?o.a.createElement(u,c({ref:t},p,{components:n})):o.a.createElement(u,c({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<r;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{293:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return a})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var o=t(1),r=t(9),c=(t(0),t(441)),i={},a={id:"spidermonkey/tutorial/connection",title:"connection",description:"::: {.warning}",source:"@site/docs/spidermonkey/tutorial/connection.md",permalink:"/wikidemo/docs/spidermonkey/tutorial/connection",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/spidermonkey/tutorial/connection.md"},s=[],l={rightToc:s};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(o.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"::: {.warning}\nThis article covers a deprecated API! See\n",Object(c.b)("a",Object(o.a)({parentName:"p"},{href:"../../jme3/advanced/networking"}),"networking")," for current\ndocumentation.\n:::"),Object(c.b)("p",null,"This very first tutorial is going to teach you how to open a server and\na client, and connect them to eachother. I'll also discuss how\nconnection registration works. Since this is a very simple process in\nSpiderMonkey, this tutorial will be quite short."),Object(c.b)("h1",{id:"simple-connections"},"Simple connections"),Object(c.b)("p",null,"Creating a server is as simple as doing this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),"Server myServer = new Server(4040, 5050);\nmyServer.start();\n")),Object(c.b)("p",null,"This initializes and starts a server on TCP port 4040 and UDP port 5050.\nNow it's time to connect a client:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'Client client = new Client("localhost", 4040, 5050);\nclient.start();\n')),Object(c.b)("p",null,"This initializes and starts a client, and it will immediately connect to\nlocalhost, TCP port 4040, and UDP port 5050. In the log, you'll get to\nsee this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{}),"Sep 16, 2010 11:52:16 AM com.jme3.network.connection.TCPConnection bind\nINFO: [Server#1][TCP] Bound to 0.0.0.0/0.0.0.0:4040\nSep 16, 2010 11:52:16 AM com.jme3.network.connection.UDPConnection bind\nINFO: [Server#1][UDP] Bound to 0.0.0.0/0.0.0.0:5050\nSep 16, 2010 11:52:16 AM com.jme3.network.connection.Server start\nINFO: [Server#1][???] Started server.\nSep 16, 2010 11:52:16 AM com.jme3.network.connection.TCPConnection connect\nINFO: [Client#1][TCP] Connecting to localhost/127.0.0.1:4040\nSep 16, 2010 11:52:16 AM com.jme3.network.connection.UDPConnection connect\nINFO: [Client#1][UDP] Set target to localhost/127.0.0.1:5050\nSep 16, 2010 11:52:16 AM com.jme3.network.connection.TCPConnection accept\nINFO: [Server#1][TCP] A client connected with address /127.0.0.1\nSep 16, 2010 11:52:16 AM com.jme3.network.connection.TCPConnection connect\nINFO: [Client#1][TCP] Connection succeeded.\n")),Object(c.b)("p",null,"As you can see, this is a combined log of the client and server. Even\nthough it looks like only a connection has been made, the Client\nregistration has already happened at this point as well. Client\nregistration is necessary so you can call TCP and UDP methods on only\none Client instance on the server. You don't have to worry about client\nregistration, since SpiderMonkey does this automatically on connection."),Object(c.b)("h1",{id:"connector-filters"},"Connector filters"),Object(c.b)("p",null,"You can also filter connections (or connectors as I call them) in\nSpiderMonkey. You can do this by implementing the ConnectorFilter\ninterface:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'public class MyConnectorFilter implements ConnectorFilter {\n   public String filterConnector(InetSocketAddress address) {\n      if (address.isLoopbackAddress()) return "I don\'t like locals!";\n      return null;\n   }\n}\n')),Object(c.b)("p",null,"Return null for no filtering, or a String with the reason if you want to\nfilter this person."),Object(c.b)("h1",{id:"discover-hosts"},"Discover hosts"),Object(c.b)("p",null,"SpiderMonkey Clients are also able to discover hosts running in the LAN.\nThis is also a very simple process, and can be done as follows:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),"Client client = new Client();\nList<InetAddress> foundHosts = client.discoverHosts(5050, 5000);\n")),Object(c.b)("p",null,"This starts the host discovery on port 5050, and listens for servers for\n5 seconds. Typically, servers respond pretty fast so a few seconds\nshould be enough. To do something with these hosts it's as simple as\ndoing:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),"for (InetAddress host : foundHosts) {\n    client.connect(host.getCanonicalHostName(), 4040, 5050);\n}\nclient.start();\n")),Object(c.b)("p",null,"Do note that this would connect to every host found, so this does not\nwork properly, but the idea is that you can configure it the way you\nwant it. Don't forget to start() the client."),Object(c.b)("p",null,"This concludes the first tutorial. In the next tutorial, it's time to\nsend and listen for messages!"))}p.isMDXComponent=!0},441:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var o=t(0),r=t.n(o);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a({},n,{},e)),t},u=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),b=o,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||c;return t?r.a.createElement(m,a({ref:n},l,{components:t})):r.a.createElement(m,a({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,i=new Array(c);i[0]=b;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<c;l++)i[l]=t[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);
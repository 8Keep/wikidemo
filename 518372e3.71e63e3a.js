(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{239:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(1),r=n(9),o=(n(0),n(441)),i={},s={id:"jme3/contributions/vegetationsystem",title:"vegetationsystem",description:"This is the wiki page for the Forester grass/tree loading system. It",source:"@site/docs/jme3/contributions/vegetationsystem.md",permalink:"/wikidemo/docs/jme3/contributions/vegetationsystem",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/contributions/vegetationsystem.md"},c=[{value:"Manipulating the cache",id:"manipulating-the-cache",children:[]},{value:"Changing the tile size &amp; resolution",id:"changing-the-tile-size--resolution",children:[]}],l={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This is the wiki page for the Forester grass/tree loading system. It\ncontains information on how to add vegetation to a scene, and how to\nmanage it. Grass and trees are treated differently, but the approaches\nare very similar."),Object(o.b)("p",null,"Topics are flagged as (basic) or (advanced). Advanced topics can be\nskipped."),Object(o.b)("p",null,"The library can be found in the Github ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine-Contributions"}),"jMonkeyEngine Contributions\nrepository"),"."),Object(o.b)("h1",{id:"the-forester-basic"},"The Forester (Basic)"),Object(o.b)("p",null,"The Forester class is the root class of this lib. You can use it to\ncreate grass/treeloaders, and a few other things. It also manages random\nnumber tables and a few other things."),Object(o.b)("p",null,"It is a singleton class, so it can be used anywhere for easy access to\nForester data."),Object(o.b)("h1",{id:"the-grass"},"The grass"),Object(o.b)("p",null,"Proceed to the grass section:\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/contributions/vegetationsystem/grass"}),"jme3:contributions:vegetationsystem:grass")),Object(o.b)("h1",{id:"the-trees"},"The trees"),Object(o.b)("p",null,"Proceed to the tree section:\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/contributions/vegetationsystem/trees"}),"jme3:contributions:vegetationsystem:trees")),Object(o.b)("h1",{id:"tuning-the-paging-engine-advanced"},"Tuning the paging engine (Advanced)"),Object(o.b)("p",null,"All tree/grassloaders use a paging engine to load/unload data. There are\nsome things you can do that affects performance and memory usage for\nboth trees and grass."),Object(o.b)("h2",{id:"manipulating-the-cache"},"Manipulating the cache"),Object(o.b)("p",null,"The cache saves expired tiles for some time before disposing of them.\nThis makes it possible for the engine to re-use pages instead of having\nto load and prepare them again."),Object(o.b)("p",null,"An example: Lets say you walk across the border between two tiles.\nPassing the border between two tiles prompts the engine to load new\ntiles in the direction you are moving, and toss old ones away. Lets say\nyou then walk back directly. Or keep walking back and forth across that\nborder. Without the cache, you'd be loading and unloading tiles all the\ntime."),Object(o.b)("p",null,"There is no point in turning it off, unless maybe if you use extremely\nsmall tiles. You can change the cache timer however. Default time is 2\nseconds (2000 ms actually, the value is in ms). After 2 seconds the\ntiles are dropped from the cache."),Object(o.b)("p",null,"To change the value, do this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"grassLoader.getPagingManager().setCacheTime(6000);\n")),Object(o.b)("p",null,"That would increase the cache time to 6 seconds."),Object(o.b)("h2",{id:"changing-the-tile-size--resolution"},"Changing the tile size & resolution"),Object(o.b)("p",null,"The tile size determines how much geometry is being loaded at the same\ntime. The resolution determines how many sub-geometries are in a tile.\nIf you increase resolution from 2 to 4, it would change the amount of\ngeometries in a tile from 4 to 16. You can think of resolution as being\nthe height/width of an image. If you double it, the size of the image is\nsquared."),Object(o.b)("p",null,"Having few but large geometries is more efficient when rendering,\nhowever. That is how GPUs work; they rather take a few large blocks of\ndata then many small ones. It also leads to less java objects, less\noverhead etc."),Object(o.b)("p",null,"Having many geometries, on the other side, ensures more geometry is\nculled on average. If you use one mega-block of 512x512 square units,\nyou'd have to render the entire block even if you can only see a tiny\nfraction of it. Also, when massive blocks are pushed in and out of the\nrendering queue you might get noticeable increases/drops in frame-rate."),Object(o.b)("p",null,"It is very hard to say what is the correct resolution in an application,\nbecause it depends on very much, but it is possible to try a few\ndifferent settings and see which is best. This may have an effect on\nperformance; particularly if you're using massive amounts of grass."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"It is generally not good to use gigantic geometries, or tiny ones - but larger is better than smaller.\n")))),Object(o.b)("p",null,"More to come."))}u.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},b=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=u(n),d=a,m=b["".concat(i,".").concat(d)]||b[d]||h[d]||o;return n?r.a.createElement(m,s({ref:t},l,{components:n})):r.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);
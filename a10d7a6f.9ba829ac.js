(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{325:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return o})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return u}));var n=r(1),a=r(9),s=(r(0),r(441)),i={},o={id:"spidermonkey/tutorial/streaming",title:"streaming",description:"::: {.warning}",source:"@site/docs/spidermonkey/tutorial/streaming.md",permalink:"/wikidemo/docs/spidermonkey/tutorial/streaming",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/spidermonkey/tutorial/streaming.md"},c=[],l={rightToc:c};function u(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"::: {.warning}\nThis article covers a deprecated API! See\n",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"../../jme3/advanced/networking"}),"networking")," for current\ndocumentation.\n:::"),Object(s.b)("p",null,"The streaming service is meant for situations where you want to transfer\nfiles, or other types of data to clients. In this tutorial we'll discuss\nhow it works, and how to use it."),Object(s.b)("p",null,"Let's start off with how it works; streaming service uses messages to\ntransfer data. This is done so it doesn't block other messages from\nbeing sent, while transferring. First a message is sent the describes\nthe stream. The peer can now choose whether to accept or reject the\nstream. When the peer accepts, the data will be sent. You have to handle\nthis data yourself. At the end of the stream you get the same message as\nwhen the stream was offered, to indicate the end of the stream."),Object(s.b)("p",null,"Let's transfer a file to a client:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"StreamingService sService = client.getService(StreamingService.class);\nsService.addStreamListener(this);\n\nsService = server.getService(StreamingService.class);\nClient receiver = server.getConnectors().get(0); // Note that you can't use 'client' here, since it's not a connector.\nsService.offerStream(receiver, new StreamMessage(), new FileInputStream(\"test.txt\")); // StreamMessage used here as start and end message, but can be anything to describe the stream on the other end.\n")),Object(s.b)("p",null,"As you can see, this system uses the Service system. First, we get the\nclient's StreamingService, and register ourselves as a listener. Then we\nget the server's version of the StreamingService, from which you can\nstream things. Then we get a connector client (the first one), and send\nthe file via an InputStream."),Object(s.b)("p",null,"Now to receive this stuff is simple;"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"public boolean streamOffered(StreamMessage message) {\n   // Here you'd normally check the message what this stream is all about, and\n   // base your acception criteria on that.\n   fileStream = new FileOutputStream(\"test.txt\");\n   return true; // Sure, we'll just accept this message.\n}\n\npublic void streamDataReceived(StreamDataMessage message) {\n   fileStream.write(message.getData());\n}\n\npublic void streamCompleted(StreamMessage message) {\n   fileStream.flush();\n   fileStream.close();\n}\n")),Object(s.b)("p",null,"That was all; simple right?"))}u.isMDXComponent=!0},441:function(e,t,r){"use strict";r.d(t,"a",(function(){return m})),r.d(t,"b",(function(){return d}));var n=r(0),a=r.n(n);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o({},t,{},e)),r},m=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},f=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(r),f=n,d=m["".concat(i,".").concat(f)]||m[f]||p[f]||s;return r?a.a.createElement(d,o({ref:t},l,{components:r})):a.a.createElement(d,o({ref:t},l))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=f;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var l=2;l<s;l++)i[l]=r[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);
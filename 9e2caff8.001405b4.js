(window.webpackJsonp=window.webpackJsonp||[]).push([[180],{319:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(1),r=a(9),i=(a(0),a(441)),l={},o={id:"jme3/advanced/material_specification",title:"material_specification",description:"General Syntax",source:"@site/docs/jme3/advanced/material_specification.md",permalink:"/wikidemo/docs/jme3/advanced/material_specification",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/material_specification.md"},s=[{value:"Shaders",id:"shaders",children:[]},{value:"Syntax of a J3MD file",id:"syntax-of-a-j3md-file",children:[]},{value:"Techniques",id:"techniques",children:[]},{value:"World/Global parameters",id:"worldglobal-parameters",children:[]},{value:"RenderState",id:"renderstate",children:[]},{value:"Java interface for J3M",id:"java-interface-for-j3m",children:[]}],c={rightToc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"general-syntax"},"General Syntax"),Object(i.b)("p",null,'Material definitions and material instance files are formatted similarly\nto curly-bracket languages, in other words, you have "blocks" and other\n"blocks" nested in them, surrounded by curly-brackets. There are\nstatements inside the blocks, the next statement begins after a new\nline, or a semi-colon to allow two statements on the same line. Comments\nare made by prefixing with two slashes, the ',Object(i.b)("inlineCode",{parentName:"p"},"/* */")," style comments are\nnot allowed."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"RootBlock {\n  // Comment\n  SubBlock NameForTheBlock {\n    Statement1 // Another comment\n  }\n  SubBlock2 {\n    SubSubBlock {\n      Statement2\n      Statement3\n      // two statements on the same line\n      Statement4; Statement5\n    }\n  }\n  SubBlock3\n    { // bracket can be on next line as well\n    }\n}\n")),Object(i.b)("p",null,"The syntax for J3MD and J3M files follows from this base format."),Object(i.b)("h1",{id:"material-definition-files-j3md"},"Material Definition files (J3MD)"),Object(i.b)("p",null,'Material definitions provide the "logic" for the material. Usually a\nshader that will handle drawing the object, and corresponding parameters\nthat allow configuration of the shader. The J3MD file abstracts the\nshader and its configuration away from the user, allowing a simple\ninterface where one can simply set a few parameters on the material to\nchange its appearance and the way it\'s handled.'),Object(i.b)("p",null,"Material definitions support multiple techniques, each technique\ndescribes a different way to draw the object. For example, currently in\njME3, an additional technique is used to render shadow maps for example."),Object(i.b)("h2",{id:"shaders"},"Shaders"),Object(i.b)("p",null,'Shader support inside J3MD files is rather sophisticated. First, shaders\nmay reference shader libraries, in a similar way to Java\'s "import"\nstatement, or C++\\\'s "include" pre-processor directive. Shader libraries\nin turn, can also reference other shader libraries this way. In the end,\nit is possible for a shader to use many functions together from many\nlibraries and combine them in ways to create a more advanced effect. For\nexample, any shader that wishes to take advantage of hardware skinning,\ncan just import the skinning shader library and use the function,\nwithout having to write the specific logic needed for hardware skinning.'),Object(i.b)("p",null,'Shaders can also take advantage of "defines" that are specified inside\nmaterial definitions. The defines "bind" into material parameters, so\nthat a change in a material parameter can apply or remove a define from\nthe corresponding shader. This allows the shader to completely change in\nbehavior during run-time.'),Object(i.b)("p",null,"Although it is possible to use shader uniforms for the very same\npurpose, those may introduce slowdowns in older GPUs, that do not\nsupport branching. In that case, using defines can allow changing the\nway the shader works without using shader uniforms. In order to\nintroduce a define into a shader, however, its source code must be\nchanged, and therefore, it must be re-compiled. It is therefore not\nrecommended to change define bound parameters often."),Object(i.b)("h2",{id:"syntax-of-a-j3md-file"},"Syntax of a J3MD file"),Object(i.b)("p",null,"All J3MD files begin with ",Object(i.b)("inlineCode",{parentName:"p"},"MaterialDef")," as the root block, following\nthat, is the name of the material def (in this example\n",Object(i.b)("inlineCode",{parentName:"p"},"Test Material 123"),"). The name is not used for anything important\ncurrently, except for debugging. The name is typed as is without quotes,\nand can have spaces."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example of a first line of a J3MD file:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"MaterialDef Test Material 123 {\n")),Object(i.b)("p",null,"Inside a MaterialDef block, there can be at most one MaterialParameters\nblock, and one or more ",Object(i.b)("inlineCode",{parentName:"p"},"Technique")," blocks."),Object(i.b)("p",null,'Techniques may have an optional name, which specifies the name of the\ntechnique. If no name is specified for a technique, then its name is\n"Default", and it is used by default if the user does not specify\nanother technique to use for the material.'),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example of J3MD:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"MaterialDef Test Material 123 {\n  MaterialParameters { }\n  Technique { }\n  Technique NamedTech { }\n}\n")),Object(i.b)("p",null,"Inside the MaterialParameters block, the parameters are specified. Every\nparameter has a type and a name. Material parameters are similar to Java\nvariables in that aspect."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example of a MaterialParameters block:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"MaterialParameters {\n    Texture2D TexParam\n    Color     ColorParam\n    Vector3   VectorParam\n    Boolean   BoolParam\n// ...\n}\n")),Object(i.b)("p",null,"Whereas in the J3MD file, the parameter names and types are specified,\nin a J3M (Material instance) file, the values for these parameters are\nassigned, as will be shown later. This is how the materials are\nconfigured."),Object(i.b)("p",null,"At the time of writing, the following types of parameters are allowed\ninside J3MD files: Int, Boolean, Float, Vector2, Vector3, Vector4,\nTexture2D, TextureCubeMap."),Object(i.b)("p",null,"You can specify a default value for material parameters, inside material\ndefinitions, in the case that no value is specified in the material\ninstance."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"MaterialParameters {\n     Float MyParam : 1\n// ...\n}\n")),Object(i.b)("p",null,"1 will be used as the default value and sent to the shader if it has not\nbeen set by a meterial.setFloat() call."),Object(i.b)("h2",{id:"techniques"},"Techniques"),Object(i.b)("p",null,"Techniques are more advanced blocks than the MaterialParameters block.\nTechniques may have nested blocks, any many types of statements."),Object(i.b)("p",null,"In this section, the statements and nested blocks that are allowed\ninside the Technique block will be described."),Object(i.b)("p",null,"The two most important statements, are the ",Object(i.b)("inlineCode",{parentName:"p"},"FragmentShader")," and\n",Object(i.b)("inlineCode",{parentName:"p"},"VertexShader"),' statements. These statements specify the shader to use\nfor the technique, and are required inside the "Default" technique. Both\noperate in the same way, after the statement, the language of the shader\nis specified, usually with a version number as well, for example\n',Object(i.b)("inlineCode",{parentName:"p"},"GLSL100")," for OpenGL Shading Language version 1.00. Followed by a colon\nand an absolute path for an asset describing the actual shader source\ncode. For GLSL, it is permitted to specify .glsl, .frag, and .vert\nfiles."),Object(i.b)("p",null,'When the material is applied to an object, the shader has its uniforms\nset based on the material parameter values specified in the material\ninstance. but the parameter is prefixed with an "m',"_",'".'),Object(i.b)("p",null,"For example, assuming the parameter ",Object(i.b)("inlineCode",{parentName:"p"},"Shininess")," is defined in the\nMaterialParameters block like so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"MaterialParameters {\n  Float Shininess\n}\n")),Object(i.b)("p",null,'The value of that parameter will map into an uniform with same name with\nthe "m',"_",'" prefix in the GLSL shader:'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"uniform float m_Shininess;\n")),Object(i.b)("p",null,"The letter ",Object(i.b)("inlineCode",{parentName:"p"},"m")," in the prefix stands for material."),Object(i.b)("h2",{id:"worldglobal-parameters"},"World/Global parameters"),Object(i.b)("p",null,"An important structure, that also relates to shaders, is the\nWorldParameters structure. It is similar in purpose to the\nMaterialParameters structure; it exposes various parameters to the\nshader, but it works differently. Whereas the user specified material\nparameters, world parameters are specified by the engine. In addition,\nthe WorldParameters structure is nested in the Technique, because it is\nspecific to the shader being used. For example, the Time world parameter\nspecifies the time in seconds since the engine started running, the\nmaterial can expose this parameter to the shader by specifying it in the\nWorldParameters structure like so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"WorldParameters {\n  Time\n// ...\n}\n")),Object(i.b)("p",null,"The shader will be able to access this parameter through a uniform, also\nnamed ",Object(i.b)("inlineCode",{parentName:"p"},"Time")," but prefixed with ",Object(i.b)("inlineCode",{parentName:"p"},"g_"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"uniform float g_Time;\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"g"),' letter stands for "global", which is considered a synonym with\n"world" in the context of parameter scope.'),Object(i.b)("p",null,"There are many world parameters available for shaders, a comprehensive\nlist will be specified elsewhere."),Object(i.b)("h2",{id:"renderstate"},"RenderState"),Object(i.b)("p",null,"The RenderState block specifies values for various render states in the\nrendering context. The RenderState block is nested inside the Technique\nblock. There are many types of render states, and a comprehensive list\nwill not be included in this document."),Object(i.b)("p",null,"The most commonly used render state is alpha blending, to specify it for\na particular technique, including a RenderState block with the statement\n",Object(i.b)("inlineCode",{parentName:"p"},"Blend Alpha"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"RenderState {\n Blend Alpha\n}\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Full Example of a J3MD")),Object(i.b)("p",null,"Included is a full example of a J3MD file using all the features\nlearned:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"MaterialDef Test Material 123 {\n  MaterialParameters {\n    Float m_Shininess\n    Texture2D m_MyTex\n  }\n  Technique {\n    VertexShader GLSL100 : Common/MatDefs/Misc/MyShader.vert\n    FragmentShader GLSL100 : Common/MatDefs/Misc/MyShader.frag\n    WorldParameters {\n      Time\n    }\n    RenderState {\n      Blend Alpha\n    }\n  }\n}\n")),Object(i.b)("h1",{id:"material-instance-files-j3m"},"Material Instance files (J3M)"),Object(i.b)("p",null,"In comparison to J3MD files, material instance (J3M) files are\nsignificantly simpler. In most cases, the user will not have to modify\nor create his/her own J3MD files."),Object(i.b)("p",null,"All J3M files begin with the word ",Object(i.b)("inlineCode",{parentName:"p"},"Material")," followed by the name of the\nmaterial (once again, used for debugging only). Following the name, is a\ncolon and the absolute asset path to the material definition (J3MD) file\nextended or implemented, followed by a curly-bracket."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"Material MyGrass : Common/MatDefs/Misc/TestMaterial.j3md {\n")),Object(i.b)("p",null,'The material definition is a required component, depending on the\nmaterial definition being used, the appearance and functionality of the\nmaterial changes completely. Whereas the material definition provided\nthe "logic" for the material, the material instance provides the\nconfiguration for how this logic operates.'),Object(i.b)("p",null,"The J3M file includes only a single structure; MaterialParameters,\nanalogous to the same-named structure in the J3MD file. Whereas the J3MD\nfile specified the parameter names and types, the J3M file specifies the\nvalues for these parameters. By changing the parameters, the\nconfiguration of the parent J3MD changes, allowing a different effect to\nbe achieved."),Object(i.b)("p",null,'To specify a value for a parameter, one must specify first the parameter\nname, followed by a colon, and then followed by the parameter value. For\ntexture parameters, the value is an absolute asset path pointing to the\nimage file. Optionally, the path can be prefixed with the word "Flip" in\norder to flip the image along the Y-axis, this may be needed for some\nmodels.'),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example of a MaterialParameters block in J3M:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"MaterialParameters {\n  m_Shininess : 20.0\n}\n")),Object(i.b)("p",null,"+-----------------------------------+-----------------------------------+\n| Param type                        | Value example                     |\n+===================================+===================================+\n| Int                               | 123                               |\n+-----------------------------------+-----------------------------------+\n| Boolean                           | true                              |\n+-----------------------------------+-----------------------------------+\n| Float                             | 0.1                               |\n+-----------------------------------+-----------------------------------+\n| Vector2                           | 0.1 5.6                           |\n+-----------------------------------+-----------------------------------+\n| Vector3                           | 0.1 5.6 2.99                      |\n+-----------------------------------+-----------------------------------+\n| Vector4=Color                     | 0.1 5.6 2.99 3                    |\n+-----------------------------------+-----------------------------------+\n| Texture2D=TextureCubeMap          | Textures/MyTex.jpg                |\n+-----------------------------------+-----------------------------------+"),Object(i.b)("p",null,"The formatting of the value, depends on the type of the value that was\nspecified in the J3MD file being extended. Examples are provided for\nevery parameter type:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Full example of a J3M")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"Material MyGrass : Common/MatDefs/Misc/TestMaterial.j3md {\n  MaterialParameters {\n    m_MyTex : Flip Textures/GrassTex.jpg\n    m_Shininess : 20.0\n  }\n}\n")),Object(i.b)("h2",{id:"java-interface-for-j3m"},"Java interface for J3M"),Object(i.b)("p",null,"It is possible to generate an identical J3M file using Java code, by\nusing the classes in the com.jme3.material package. Specifics of the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"%7Blink-javadoc%7D/com/jme3/material/Material.html"}),"Material API")," will not\nbe provided in this document. The J3M file above is represented by this\nJava code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'// Create a material instance\nMaterial mat = new Material(assetManager, "Common/MatDefs/Misc/\n    TestMaterial.j3md");\n// Load the texture. Specify "true" for the flip flag in the TextureKey\nTexture tex =\nassetManager.loadTexture(new TextureKey("Textures/GrassTex.jpg", true));\n// Set the parameters\nmat.setTexture("MyTex", tex);\nmat.setFloat("Shininess", 20.0f);\n')),Object(i.b)("h1",{id:"conclusion"},"Conclusion"),Object(i.b)("p",null,"Congratulations on being able to read this entire document! To reward\nyour efforts, jMonkeyEngine.com will offer a free prize, please contact\nMomoko","_",'Fan aka "Kirill" Vainer with the password "bananapie" to claim.'))}p.isMDXComponent=!0},441:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o({},t,{},e)),a},d=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),m=n,h=d["".concat(l,".").concat(m)]||d[m]||b[m]||i;return a?r.a.createElement(h,o({ref:t},c,{components:a})):r.a.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{345:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var o=n(1),r=n(9),a=(n(0),n(441)),i={},s={id:"jme3/advanced/combo_moves",title:"combo_moves",description:"The ComboMoves class allows you to define combinations of inputs that",source:"@site/docs/jme3/advanced/combo_moves.md",permalink:"/wikidemo/docs/jme3/advanced/combo_moves",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/combo_moves.md"},c=[{value:"ComboMove Class Methods",id:"combomove-class-methods",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The ComboMoves class allows you to define combinations of inputs that\ntrigger special actions. Entering an input combo correctly can bring the\nplayer incremental rewards, such as an increased chance to hit, an\nincreased effectiveness, or decreased change of being blocked, whatever\nthe game designer chooses. ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Combo_%28video_gaming%29"}),"More background\ninfo")),Object(a.b)("p",null,'Combos are usually a series of inputs, in a fixed order: For example a\nkeyboard combo can look like: "press Down, then Down+Right together,\nthen Right.'),Object(a.b)("p",null,"Usage:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Create input triggers")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Define combos")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Detect combos in ActionListener")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Execute combos in update loop"))),Object(a.b)("p",null,"Copy the two classes ComboMoveExecution.java and ComboMove.java into\nyour application and adjust them to your package paths."),Object(a.b)("h1",{id:"example-code"},"Example Code"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"http://code.google.com/p/jmonkeyengine/source/browse/trunk/engine/src/test/jme3test/input/combomoves/TestComboMoves.java"}),"TestComboMoves.java"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"http://code.google.com/p/jmonkeyengine/source/browse/trunk/engine/src/test/jme3test/input/combomoves/ComboMoveExecution.java"}),"ComboMoveExecution.java"),"\n\u2190 required")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"http://code.google.com/p/jmonkeyengine/source/browse/trunk/engine/src/test/jme3test/input/combomoves/ComboMove.java"}),"ComboMove.java"),"\n\u2190 required"))),Object(a.b)("h1",{id:"create-input-triggers"},"Create Input Triggers"),Object(a.b)("p",null,"First you ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"../../jme3/advanced/input_handling"}),"define your game's\ninputs")," as you usually do:\nImplement the com.jme3.input.controls.ActionListener interface for your\nclass, and add triggers mappings such as\ncom.jme3.input.controls.KeyTrigger and com.jme3.input.KeyInput."),Object(a.b)("p",null,"For example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'inputManager.addMapping("Left",    new KeyTrigger(KeyInput.KEY_LEFT));\ninputManager.addMapping("Right",   new KeyTrigger(KeyInput.KEY_RIGHT));\ninputManager.addMapping("Up",      new KeyTrigger(KeyInput.KEY_UP));\ninputManager.addMapping("Down",    new KeyTrigger(KeyInput.KEY_DOWN));\ninputManager.addMapping("Attack1", new KeyTrigger(KeyInput.KEY_SPACE));\n...\ninputManager.addListener(this, "Left", "Right", "Up", "Down", "Attack1");\n')),Object(a.b)("h1",{id:"define-combos"},"Define Combos"),Object(a.b)("p",null,"For each of your combo moves, you specify the series of inputs that will\ntrigger it. The order in which you define them is the order the player\nhas to press them for the step to be recorded. When all steps have been\nrecorded, the combo is triggered."),Object(a.b)("p",null,'The following example shows how a fireball combo move is triggered by\npressing the navigation keys for "down, down+right, right, in this\norder.'),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'ComboMove fireball = new ComboMove("Fireball");\nfireball.press("Down").notPress("Right").done();\nfireball.press("Right", "Down").done();\nfireball.press("Right").notPress("Down").done();\nfireball.notPress("Right", "Down").done();\nfireball.setUseFinalState(false);\n')),Object(a.b)("p",null,"Also create a ComboMoveExecution object for each ComboMove. You need it\nlater to execute the detected combo."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),"ComboMoveExecution fireballExec = new ComboMoveExecution(fireball);\n")),Object(a.b)("h2",{id:"combomove-class-methods"},"ComboMove Class Methods"),Object(a.b)("p",null,"Use the following ComboMove methods to specify the combo:"),Object(a.b)("p",null,'+-----------------------------------+-----------------------------------+\n| ComboMove Method                  | Description                       |\n+===================================+===================================+\n| press("A).done();                 | Combo step is recorded if A is    |\n| +press("A,"B).done();             | entered. +Combo step is recorded  |\n|                                   | if A and B are entered            |\n|                                   | simultaneously.                   |\n+-----------------------------------+-----------------------------------+\n| notPress("A).done();              | Combo step is recorded if A is    |\n| +notPress("A,"B).done();          | released. +Combo step is recorded |\n|                                   | if A and B are both released.     |\n+-----------------------------------+-----------------------------------+\n| press("A).notPress("B).done();    | Combo step is recorded if A is    |\n|                                   | entered, and not B                |\n+-----------------------------------+-----------------------------------+\n| press("A).notPre                  | Combo step is recorded a certain  |\n| ss("B).timeElapsed(0.11f).done(); | time after A and not B is         |\n|                                   | entered. +etc, etc ...            |\n+-----------------------------------+-----------------------------------+\n| setPriority(0.5f);                | If there is an ambiguity, a       |\n|                                   | high-priority combo will trigger  |\n|                                   | instead of a low-priority combo.  |\n|                                   | This prevents that a similar      |\n|                                   | looking combo step "hijacks       |\n|                                   | another Combo. Use only once per  |\n|                                   | ComboMove.                        |\n+-----------------------------------+-----------------------------------+\n| setUseFinalState(false);          | This is the final command of the  |\n| +setUseFinalState(true);          | series. +False: Do not wait on a  |\n|                                   | final state, chain combo steps.   |\n|                                   | (?) +True: This is the final      |\n|                                   | state, do not chain combo steps.  |\n|                                   | (?)                               |\n+-----------------------------------+-----------------------------------+'),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"press()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"notPress()")," methods accept sets of Input Triggers,\ne.g. ",Object(a.b)("inlineCode",{parentName:"p"},"fireball.press(\u201cA,\u201cB,\u201cC).done()"),"."),Object(a.b)("p",null,"The following getters give you more information about the game state:"),Object(a.b)("p",null,"+-----------------------------------+-----------------------------------+\n| ComboMove Method                  | Usage                             |\n+===================================+===================================+\n| getCastTime()                     | Returns the time since the last   |\n|                                   | step has been recorded. (?)       |\n+-----------------------------------+-----------------------------------+\n| getMoveName()                     | Returns the string of the current |\n|                                   | combo                             |\n+-----------------------------------+-----------------------------------+\n| getPriority()                     | Returns the priority of this move |\n+-----------------------------------+-----------------------------------+"),Object(a.b)("h1",{id:"detect-combos-in-actionlistener"},"Detect Combos in ActionListener"),Object(a.b)("p",null,"Now that you have specified the combo steps, you want to detect them.\nYou do that in the onAction() method that you get from the\nActionListener interface."),Object(a.b)("p",null,"Create a HashSet ",Object(a.b)("inlineCode",{parentName:"p"},"pressMappings")," to track curently pressed mappings, and\na ComboMove object ",Object(a.b)("inlineCode",{parentName:"p"},"currentMove")," to track the current move."),Object(a.b)("p",null,"We also track the cast time of a combo to determine if it has timed out\n(see update loop below)."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),"private HashSet<String> pressedMappings = new HashSet<String>();\nprivate ComboMove currentMove = null;\nprivate float currentMoveCastTime = 0;\nprivate float time = 0;\n...\n\npublic void onAction(String name, boolean isPressed, float tpf) {\n    // Record pressed mappings\n    if (isPressed){\n        pressedMappings.add(name);\n    }else{\n        pressedMappings.remove(name);\n    }\n\n    // The pressed mappings have changed: Update ComboExecution objects\n    List<ComboMove> invokedMoves = new ArrayList<ComboMove>();\n    if (fireballExec.updateState(pressedMappings, time)){\n        invokedMoves.add(fireball);\n    }\n    // ... add more ComboExecs here...\n\n    // If any ComboMoves have been sucessfully triggered:\n    if (invokedMoves.size() > 0){\n        // identify the move with highest priority\n        float priority = 0;\n        ComboMove toExec = null;\n        for (ComboMove move : invokedMoves){\n            if (move.getPriority() > priority){\n                priority = move.getPriority();\n                toExec = move;\n            }\n        }\n        if (currentMove != null && currentMove.getPriority() > toExec.getPriority()){\n            return; // skip lower-priority moves\n        }\n\n        // If a ComboMove has been identified, store it in currentMove\n        currentMove = toExec;\n        currentMoveCastTime = currentMove.getCastTime();\n    }\n}\n")),Object(a.b)("h1",{id:"execute-combos-in-the-update-loop"},"Execute Combos in the Update Loop"),Object(a.b)("p",null,"Now that you have detected the current move, you want to execute it. You\ndo that in the update loop."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'@Override\npublic void simpleUpdate(float tpf){\n    time += tpf;\n    fireballExec.updateExpiration(time);\n    // ... update more ComboExecs here....\n\n    if (currentMove != null){\n        currentMoveCastTime -= tpf;\n        if (currentMoveCastTime <= 0){\n            System.out.println("THIS COMBO WAS TRIGGERED: " + currentMove.getMoveName());\n            // TODO: for each combo, implement special actions here\n            currentMoveCastTime = 0;\n            currentMove = null;\n        }\n    }\n}\n')),Object(a.b)("p",null,"Test ",Object(a.b)("inlineCode",{parentName:"p"},"currentMove.getMoveName()")," and proceed to call methods that\nimplement any special actions and bonuses. This is up to you and depends\nindividually on your game."),Object(a.b)("h1",{id:"why-combos"},"Why Combos?"),Object(a.b)("p",null,"Depending on the game genre, the designer can reward the players\\'\nintrinsical or extrinsical skills:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"(intrinsical:) RPGs typically calculate the success of an attack\nfrom the character's in-game training level: The player plays the\nrole of a character whose skill level is defined in numbers. RPGs\ntypically do not offer any Combos.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"(extrinsical:) Sport and fighter games typically choose to reward\nthe player's \"manual skills: The success of a special move solely\ndepends on the player's own dexterity. These games typically offer\noptional Combos."))))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(n),d=o,u=b["".concat(i,".").concat(d)]||b[d]||m[d]||a;return n?r.a.createElement(u,s({ref:t},l,{components:n})):r.a.createElement(u,s({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{150:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(1),o=n(9),r=(n(0),n(441)),i={},p={id:"jme3/advanced/update_loop",title:"update_loop",description:"Extending your application from",source:"@site/docs/jme3/advanced/update_loop.md",permalink:"/wikidemo/docs/jme3/advanced/update_loop",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/update_loop.md"},c=[],l={rightToc:c};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Extending your application from\ncom.jme3.app.",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/intermediate/simpleapplication"}),"SimpleApplication"),"\nprovides you with an update loop. This is where you implement your game\nlogic (game mechanics)."),Object(r.b)("p",null,"Some usage examples: Here you remote-control NPCs (computer controlled\ncharacters), generate game events, and respond to user input."),Object(r.b)("p",null,"To let you see the main update loop in context, understand that the\nSimpleApplication does the following:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Initialization")," -- Execute ",Object(r.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method once.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Main Update Loop")),Object(r.b)("p",{parentName:"li"},"a.  Input listeners respond to mouse clicks and keyboard presses --\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/input_handling"}),"Input handling")),Object(r.b)("p",{parentName:"li"},"b.  Update game state:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"i.  Update overall game state -- Execute [Application\n    States](../../jme3/advanced/application_states)\n\nii. User code update -- Execute `simpleUpdate()` method\n\niii. Logical update of entities -- Execute [Custom\n     Controls](../../jme3/advanced/custom_controls)\n")),Object(r.b)("p",{parentName:"li"},"c.  Render audio and video"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"i.  [Application\n    States](../../jme3/advanced/application_states)\n    rendering.\n\nii. Scene rendering.\n\niii. User code rendering -- Execute `simpleRender()` method.\n")),Object(r.b)("p",{parentName:"li"},"d.  Repeat loop.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Quit")," -- If user requests ",Object(r.b)("inlineCode",{parentName:"p"},"exit()"),", execute ",Object(r.b)("inlineCode",{parentName:"p"},"cleanup()")," and\n",Object(r.b)("inlineCode",{parentName:"p"},"destroy()"),".\\\nThe jME window closes and the loop ends."))),Object(r.b)("h1",{id:"usage"},"Usage"),Object(r.b)("p",null,"In a trivial\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/intermediate/simpleapplication"}),"SimpleApplication")," (such\nas a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/beginner"}),"Hello World tutorial"),"), all code is\neither in the ",Object(r.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," (initialization) or ",Object(r.b)("inlineCode",{parentName:"p"},"simpleUpdate()"),"\n(behaviour) method -- or in a helper method/class that is called from\none of these two. This trivial approach will make your main class very\nlong, hard to read, and hard to maintain. You don't need to load the\nwhole scene at once, and you don't need to run all conditionals tests\nall the time."),Object(r.b)("p",null,"It's a best practice to modularize your game mechanics and spread out\ninitialization and update loop code over several Java objects:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Move modular code blocks from the ",Object(r.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method into\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"AppStates"),'. Attach\nAppStates to initialize custom subsets of "one dungeon, and detach\nit when the player exits this "dungeon.\\\nExamples: Weather/sky audio and visuals, physics collision shapes,\nsub-rootnodes of individual dungeons including dungeon NPCs, etc.')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Move modular code blocks from the ",Object(r.b)("inlineCode",{parentName:"p"},"simpleUpdate()")," method into the\nupdate loops of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/custom_controls"}),"Custom\nControls")," to control\nindividual entity behavior (NPCs), and into the update method of\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/application_states"}),"AppStates")," to control\nworld events.\\\nExamples: Weather behaviour, light behaviour, physics behaviour,\nindividual NPC behaviour, trap behaviour, etc."))))}d.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return b}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),d=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p({},t,{},e)),n},s=function(e){var t=d(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),s=d(n),m=a,b=s["".concat(i,".").concat(m)]||s[m]||u[m]||r;return n?o.a.createElement(b,p({ref:t},l,{components:n})):o.a.createElement(b,p({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var l=2;l<r;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
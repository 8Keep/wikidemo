(window.webpackJsonp=window.webpackJsonp||[]).push([[292],{431:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(1),r=n(9),i=(n(0),n(441)),o={},l={id:"sdk/development",title:"development",description:"Developing for jMonkeyEngine SDK",source:"@site/docs/sdk/development.md",permalink:"/wikidemo/docs/sdk/development",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/sdk/development.md"},c=[{value:"Creating plugins and components",id:"creating-plugins-and-components",children:[]},{value:"Extending jMonkeyEngine SDK",id:"extending-jmonkeyengine-sdk",children:[]},{value:"Recipes",id:"recipes",children:[]},{value:"General Notes",id:"general-notes",children:[]},{value:"Teminology used here",id:"teminology-used-here",children:[]},{value:"Handy things in jMonkeyEngine SDK Core",id:"handy-things-in-jmonkeyengine-sdk-core",children:[]}],s={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"developing-for-jmonkeyengine-sdk"},"Developing for jMonkeyEngine SDK"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Note that all info is subject to change while jMonkeyEngine SDK is\nstill in beta!")),Object(i.b)("p",null,"In general, developing plugins for jMonkeyEngine SDK is not much\ndifferent than creating plugins for the NetBeans Platform which in turn\nis not much different than creating Swing applications. You can use\njMonkeyEngine SDK to develop plugins, be it for personal use or to\ncontribute to the community."),Object(i.b)("p",null,"If you feel like you want to make an addition to jMonkeyEngine SDK,\ndon't hesitate to contact the jme team regardless of your knowledge in\nNetBeans platform development. For new plugins, the basic project\ncreation and layout of the plugin can always be handled by a core\ndeveloper and you can go on from there fleshing out the plugin. By using\nthe Platform functions, your plugin feels more like a Platform\napplication (global save button, file type support etc.)."),Object(i.b)("h2",{id:"creating-plugins-and-components"},"Creating plugins and components"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../sdk/development/setup"}),"Creating a plugin"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../sdk/development/general"}),"Creating components"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../sdk/build_platform"}),"Building the jME SDK from scratch")," (not\nnecessary for plugin development, only for contributors)"))),Object(i.b)("h2",{id:"extending-jmonkeyengine-sdk"},"Extending jMonkeyEngine SDK"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../sdk/development/scene"}),"The Main Scene"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../sdk/development/sceneexplorer"}),"The Scene Explorer"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../sdk/development/projects_assets"}),"Projects and Assets")))),Object(i.b)("h2",{id:"recipes"},"Recipes"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../sdk/development/extension_library"}),"Create a library plugin from a jar\nfile"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../sdk/development/model_loader"}),"Create a new or custom model filetype and\nloader")))),Object(i.b)("h2",{id:"general-notes"},"General Notes"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Remember the scene runs on the render thread and most everything\nyou do in the plugin (button events etc.) runs on the AWT thread,\nalways encapsulate calls to either side correctly via\nCallables/Runnables or register as an AppState to the\nSceneApplication to have an update() call by the render thread."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Although the scene can be accessed at any time via\nSceneApplication.getApplication() it is not recommended to modify\nthe scene like that. Other plugins might be accessing the scene and\nupdates will not be properly recognized. Use the sceneRequest object\nand the lookup of selected nodes and files to access things like the\nassetManager etc.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'It became a standard in jMonkeyEngine SDK to start the name of\nmethods that execute directly on the OpenGL thread with "do e.g\n"doMoveSpatial, this makes identifying threading issues easier.')),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The AssetManager of jme3 is threadsafe and can be used from any\nthread to load assets")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"You can get access to the ProjectAssetManager via the Lookup of a\nJmeSpatial and other objects")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'Use org.openide.filesystems.FileObject instead of java.io.File for\nfile access, it always uses system-independent "/ path separators\nand has some more advanced functions that make file handling easier.')),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'You can get a file from a string using\nRepository.getDefault().getDefaultFileSystem().getRoot().getFileObject("aaa/bbb/ccc/whatever);')),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"You can convert a regular java File to a FileObject and vice versa\nusing org.openide.filesystems.FileUtil")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"If you have problems with unresolved classes, check if all needed\nLibraries are registered in the settings of your Project. To find\nout which library contains a certain class, just enter the name in\nthe library search field."))),Object(i.b)("h2",{id:"teminology-used-here"},"Teminology used here"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'A "plugin" is anything you can tick in the plugin manager of the\nSDK. It can contain editors, simple "Java SE Libraries" that you can\nadd to your projects as jar files and other things like project\ntemplates etc.')),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'A "module" is the project type that allows you to create plugins,\nstrictly speaking all plugins are modules but there can be modules\nthat are never shown in the plugin list and only exist as\ndependencies of other modules.')),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'A "library" is an entry for a jar file (and optionally sources and\njavadocs) which can be added to a SDK project to be used and\ndistributed with it')),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'An "extension" is a generic name for stuff that extends the jME\nengine, like pathfinding algorithms or anything that can be used at\nthe game runtime..'))),Object(i.b)("p",null,"So if you have some cool code that others can use in their games too,\nyou would make your extension a library by creating a module that the\nusers can download as a plugin :)"),Object(i.b)("h2",{id:"handy-things-in-jmonkeyengine-sdk-core"},"Handy things in jMonkeyEngine SDK Core"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"com.jme3.gde.core.scene.controller"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'AbstractCameraController \u2192 A basic camera control for plugins,\nused by SimpleSceneComposer and "View Model')),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"SceneToolController \u2192 A basic controller for having selection,\ncursor etc. displayed in the scene, used by SimpleSceneComposer")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"com.jme3.gde.core.scene"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"OffViewPanel \u2192 A panel that renders a 3d scene in a preview and\ndisplays it in a lightweight swing panel"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"com.jme3.gde.core.util"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"DataObjectSaveNode \u2192 Allows enabling the save all button by\nusing any file and implementing the SvaeCookie yourself.")))),Object(i.b)("p",null,"Learn more about NetBeans Plugin Development at\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://platform.netbeans.org"}),"http://platform.netbeans.org")),Object(i.b)("p",null,"Also check out this Essential NetBeans Platform Refcard:\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://refcardz.dzone.com/refcardz/essential-netbeans-platform"}),"http://refcardz.dzone.com/refcardz/essential-netbeans-platform")))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},b=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,m=b["".concat(o,".").concat(d)]||b[d]||u[d]||i;return n?r.a.createElement(m,l({ref:t},s,{components:n})):r.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[295],{434:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(1),o=n(9),l=(n(0),n(441)),i={},r={id:"jme3/advanced/ragdoll",title:"ragdoll",description:"The jMonkeyEngine3 has built-in support for [jBullet",source:"@site/docs/jme3/advanced/ragdoll.md",permalink:"/wikidemo/docs/jme3/advanced/ragdoll",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/ragdoll.md"},c=[{value:"Limbs",id:"limbs",children:[]},{value:"Joints",id:"joints",children:[]},{value:"Attaching Everything to the Scene",id:"attaching-everything-to-the-scene",children:[]},{value:"Sample Code",id:"sample-code-1",children:[]},{value:"Sample Code",id:"sample-code-2",children:[]}],s={rightToc:c};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The jMonkeyEngine3 has built-in support for ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"http://jbullet.advel.cz"}),"jBullet\nphysics")," via the ",Object(l.b)("inlineCode",{parentName:"p"},"com.jme3.bullet")," package.\nPhysics are not only responsible for handing collisions, but they also\nmake ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/hinges_and_joints"}),"hinges and joints"),"\npossible. One special example of physical joints are ragdoll physics,\nshown here."),Object(l.b)("p",null,Object(l.b)("img",Object(a.a)({parentName:"p"},{src:"/images/jme3/advanced/ragdoll.png",alt:"ragdoll.png"}))),Object(l.b)("h1",{id:"sample-code"},"Sample Code"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestRagDoll.java"}),"TestRagDoll.java"),"\n(Tip: Click to pull the ragdoll up)")),Object(l.b)("h1",{id:"preparing-the-physics-game"},"Preparing the Physics Game"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Create a SimpleApplication with a\n",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/physics"}),"BulletAppState")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"This gives us a PhysicsSpace for PhysicControls"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Add a physical floor (A box collision shape with mass zero)"))),Object(l.b)("h1",{id:"creating-the-ragdoll"},"Creating the Ragdoll"),Object(l.b)("p",null,'A ragdoll is a simple "person (dummy) that you build out of cylinder\ncollision shapes. The ragdoll has 11 limbs: 1 for shoulders, 1 for the\nbody, 1 for hips; plus 2 arms and 2 legs that are made up of two limbs\neach. In your game, you will likely replace the cylinders with your own\n(better looking) limb models. In this example here we just use simple\ncylinders.'),Object(l.b)("h2",{id:"limbs"},"Limbs"),Object(l.b)("p",null,"Since you're just creating the ragdoll for this example, all the limbs\nhave the same shape, and you can write a simple helper method to create\nthem. The function returns a PhysicsControl with CollisionShape with the\nwidth, height, location, and rotation (vertical or horizontal) that you\nspecify. You choose a CapsuleCollisionShape (a cylinder with rounded top\nand bottom) so the limbs collide smoothly against one another."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'private Node createLimb(float width, float height, Vector3f location, boolean rotate) {\n        int axis = rotate ? PhysicsSpace.AXIS_X : PhysicsSpace.AXIS_Y;\n        CapsuleCollisionShape shape = new CapsuleCollisionShape(width, height, axis);\n        Node node = new Node("Limb");\n        RigidBodyControl rigidBodyControl = new RigidBodyControl(shape, 1);\n        node.setLocalTranslation(location);\n        node.addControl(rigidBodyControl);\n        return node;\n}\n')),Object(l.b)("p",null,"You write a custom helper method to initialize the limbs. Look at the\nscreenshot above for orientation."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"All cylinders have the same diameter, 0.2f.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"You make the body and shoulders longer than the other limbs, 1.0f\ninstead of 0.5f.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"You determine the coordinates for positioning the limbs to form a\nperson.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The shoulders and hips are ",Object(l.b)("em",{parentName:"p"},"vertical")," cylinders, this is why we set\nthe rotation to true."))),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Node shoulders = createLimb(0.2f, 1.0f, new Vector3f( 0.00f, 1.5f, 0), true);\nNode     uArmL = createLimb(0.2f, 0.5f, new Vector3f(-0.75f, 0.8f, 0), false);\nNode     uArmR = createLimb(0.2f, 0.5f, new Vector3f( 0.75f, 0.8f, 0), false);\nNode     lArmL = createLimb(0.2f, 0.5f, new Vector3f(-0.75f,-0.2f, 0), false);\nNode     lArmR = createLimb(0.2f, 0.5f, new Vector3f( 0.75f,-0.2f, 0), false);\nNode      body = createLimb(0.2f, 1.0f, new Vector3f( 0.00f, 0.5f, 0), false);\nNode      hips = createLimb(0.2f, 0.5f, new Vector3f( 0.00f,-0.5f, 0), true);\nNode     uLegL = createLimb(0.2f, 0.5f, new Vector3f(-0.25f,-1.2f, 0), false);\nNode     uLegR = createLimb(0.2f, 0.5f, new Vector3f( 0.25f,-1.2f, 0), false);\nNode     lLegL = createLimb(0.2f, 0.5f, new Vector3f(-0.25f,-2.2f, 0), false);\nNode     lLegR = createLimb(0.2f, 0.5f, new Vector3f( 0.25f,-2.2f, 0), false);\n")),Object(l.b)("p",null,"You now have the outline of a person. But if you ran the application\nnow, the individual limbs would fall down independently of one another\n-- the ragdoll is still lacking joints."),Object(l.b)("h2",{id:"joints"},"Joints"),Object(l.b)("p",null,"As before, you write a small helper method. This time its purpose is to\nquickly join two limbs A and B at the connection point that we specify."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Convert A's and B's connectionPoint vector from world coordinate\nspace to local coordinate space.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Use a ConeJoint, a special joint that approximates the degree of\nfreedom that limbs typically have. The ConeJoint constructor\nrequires the two nodes, and the two local pivot coordinates that we\njust determined.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Set the joints limits to allow swinging, but not twisting."))),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-{=html}"}),"\x3c!-- --\x3e\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"private PhysicsJoint join(Node A, Node B, Vector3f connectionPoint) {\n        Vector3f pivotA = A.worldToLocal(connectionPoint, new Vector3f());\n        Vector3f pivotB = B.worldToLocal(connectionPoint, new Vector3f());\n        ConeJoint joint = new ConeJoint(A.getControl(RigidBodyControl.class),\n                                        B.getControl(RigidBodyControl.class),\n                                        pivotA, pivotB);\n        joint.setLimit(1f, 1f, 0);\n        return joint;\n}\n")),Object(l.b)("p",null,"Use the helper method to connect all limbs with joints where they\nbelong, at one end of the limb."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"join(body,  shoulders, new Vector3f( 0.00f,  1.4f, 0));\njoin(body,       hips, new Vector3f( 0.00f, -0.5f, 0));\njoin(uArmL, shoulders, new Vector3f(-0.75f,  1.4f, 0));\njoin(uArmR, shoulders, new Vector3f( 0.75f,  1.4f, 0));\njoin(uArmL,     lArmL, new Vector3f(-0.75f,  0.4f, 0));\njoin(uArmR,     lArmR, new Vector3f( 0.75f,  0.4f, 0));\njoin(uLegL,      hips, new Vector3f(-0.25f, -0.5f, 0));\njoin(uLegR,      hips, new Vector3f( 0.25f, -0.5f, 0));\njoin(uLegL,     lLegL, new Vector3f(-0.25f, -1.7f, 0));\njoin(uLegR,     lLegR, new Vector3f( 0.25f, -1.7f, 0));\n")),Object(l.b)("p",null,"Now the ragdoll is connected. If you ran the app now, the doll would\ncollapse, but the limbs would stay together."),Object(l.b)("h2",{id:"attaching-everything-to-the-scene"},"Attaching Everything to the Scene"),Object(l.b)("p",null,"We create one (non-physical) Node named ragDoll, and attach all other\nnodes to it."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"ragDoll.attachChild(shoulders);\nragDoll.attachChild(body);\nragDoll.attachChild(hips);\nragDoll.attachChild(uArmL);\nragDoll.attachChild(uArmR);\nragDoll.attachChild(lArmL);\nragDoll.attachChild(lArmR);\nragDoll.attachChild(uLegL);\nragDoll.attachChild(uLegR);\nragDoll.attachChild(lLegL);\nragDoll.attachChild(lLegR);\n")),Object(l.b)("p",null,"To use the ragdoll in a scene, we attach its main node to the rootNode,\nand to the PhysicsSpace."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"rootNode.attachChild(ragDoll);\nbulletAppState.getPhysicsSpace().addAll(ragDoll);\n")),Object(l.b)("h1",{id:"applying-forces"},"Applying Forces"),Object(l.b)("p",null,"To pull the doll up, you could add an input handler that triggers the\nfollowing action:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Vector3f upforce = new Vector3f(0, 200, 0);\nshoulders.applyContinuousForce(true, upforce);\n")),Object(l.b)("p",null,"We can use the action to pick the doll up and put it back on its feet,\nor what ever. Read more about\n",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/physics.xml#forcesmoving_physical_objects"}),"Forces"),"\nhere."),Object(l.b)("h1",{id:"detecting-collisions"},"Detecting Collisions"),Object(l.b)("p",null,"Read the ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/physics.xml#responding_to_a_physicscollisionevent"}),"Responding to a\nPhysicsCollisionEvent"),"\nchapter in the general physics documentation on how to detect\ncollisions. You can detect collisions between limbs or between limbs and\nthe floor, and trigger game events."),Object(l.b)("h1",{id:"best-practices"},"Best Practices"),Object(l.b)("p",null,"If you experience weird behaviour in a ragdoll -- such as exploding into\npieces and then reassembling -- check your collision shapes. Verify you\ndid not position the limbs too close to one another when assmebling the\nragdoll. You typically see physical nodes being ejected when their\ncollision shapes intersect, which puts physics in an impossible state."),Object(l.b)("h1",{id:"ragdoll-physics-using-kinematicragdollcontrol-deprecated-as-of-jmonkeyengine-v33"},"Ragdoll Physics using KinematicRagdollControl (deprecated as of JMonkeyEngine v3.3)"),Object(l.b)("p",null,"KinematicRagdollControl is an unfinished work in progress. The intent\nwas to automate the creation of limbs and joints for ragdoll physics.\nThe idea was to create a control,"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"ragdoll = new KinematicRagdollControl(0.5f);\n")),Object(l.b)("p",null,"and add it to a rigged model and also to physics space:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"model.addControl(ragdoll);\ngetPhysicsSpace().add(ragdoll);\n")),Object(l.b)("p",null,"A rigid body and a physics joint would be created automatically for each\nbone in the skeleton, or alternatively just for the bones specified by\ninvoking the addBoneName() method. As long as the control was in\nkinematic mode, the physics objects would mimic the motion of the bones,\nincluding skeletal animations and rotation/translation of the model.\nWhen it was time to simulate a ragdoll, you would invoke"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"ragdoll.setRagdollMode();\n")),Object(l.b)("p",null,"and thereafter physical forces would override any skeletal animation."),Object(l.b)("h2",{id:"sample-code-1"},"Sample Code"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/v3.2/jme3-examples/src/main/java/jme3test/bullet/TestRagdollCharacter.java"}),"v3.2-branch\nTestRagdollCharacter.java"),'\nIn this example, the control remains in kinematic mode. Hold down\nthe \\"U\\" key to advance the model toward the wall. Press the\nspacebar to play the \\"Slice\\" animation. When the model comes into\ncontact with the wall, the blocks will tumble.')),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/v3.2/jme3-examples/src/main/java/jme3test/bullet/TestBoneRagdoll.java"}),"v3.2-branch\nTestBoneRagdoll.java"),"\nPress the left mouse button to shoot a cannonball at the model.\nRagdoll physics starts when a cannonball touches the model. Press\nthe spacebar to resume kinematic mode and cause the model to rise to\nhis feet."))),Object(l.b)("h1",{id:"ragdoll-physics-using-dynamicanimcontrol-jme-33-and-later"},"Ragdoll Physics using DynamicAnimControl (JME 3.3 and later)"),Object(l.b)("p",null,"DynamicAnimControl is a replacement for KinematicRagdollControl. The\nintent is similar, except that a DynamicAnimControl can be\nsimultaneously kinematic for some bones and dynamic for others. Also,\nDynamicAnimControl can be configured to work with a wider variety of\nmodels than KinematicRagdollControl."),Object(l.b)("p",null,'To simplify the implementation, the ragdoll created by a\nDynamicAnimControl is composed of \\"links\\". Just as a RigidBodyControl\nconnects a rigid body to a spatial, a link connects a rigid body to one\nor more bones in the model\'s skeleton. Just like a RigidBodyControl, a\nlink can be in kinematic mode or dynamic mode.'),Object(l.b)("p",null,'And just as the bones in a skeleton are arranged in parent/child\nhierarchy, so are the links in a DynamicAnimControl ragdoll. In the\nragdoll hierarchy, there is exactly one link that has no parent; it is\nreferred to as the \\"torso\\". Every other link is a \\"bone link\\" which\nhas another link as its parent. Each bone link is connected to its\nparent by a physics joint.'),Object(l.b)("p",null,"As with KinematicRagdollControl, you start by creating a control,"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"ragdoll = new DynamicAnimControl();\n")),Object(l.b)("p",null,"but before adding it to the model, you must configure it by specifying\nthe mass of the torso and also the mass and range of motion for each\nlinked bone:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'ragdoll.setMass(DacConfiguration.torsoName, 1f);\nragdoll.link("Waist", 1f, new RangeOfMotion(1f, -0.4f, 0.8f, -0.8f, 0.4f, -0.4f));\n...\n')),Object(l.b)("p",null,"You probably don't want to link every bone in the model's skeleton. For\ninstance, if the model has articulated fingers, you probably want to\nlink the hand bones but not the individual finger bones. Unlinked bones\nwill be managed by their nearest linked ancestor, and the torso will\nmanage any bones for which no ancestor is linked. If you link too many\nbones, the ragdoll may become inflexible or jittery due to collisions\nbetween rigid bodies that don't share a physics joint."),Object(l.b)("p",null,"Only after the control is configured should you add it to the model and\nto physics space:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"model.addControl(ragdoll);\ngetPhysicsSpace().add(ragdoll);\n")),Object(l.b)("p",null,"Note that the control must be added to the Spatial with the\nSkinningControl, which isn't necessarily the model's root spatial."),Object(l.b)("p",null,"As long as a link is in kinematic mode, its physics objects will mimic\nthe motion of the bones, including skeletal animations. When it's time\nto simulate a ragdoll, you can invoke"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"ragdoll.setRagdollMode();\n")),Object(l.b)("p",null,"to put all links into dynamic mode. Thereafter, physical forces will\noverride any skeletal animation."),Object(l.b)("h2",{id:"sample-code-2"},"Sample Code"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/jme3-examples/src/main/java/jme3test/bullet/TestBoneRagdoll.java"}),"master-branch\nTestBoneRagdoll.java"),"\nPress the left mouse button to shoot a cannonball at the model.\nRagdoll physics starts when a cannonball touches the model. Press\nthe spacebar to resume kinematic mode and cause the model to rise to\nhis feet.")))}d.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),d=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r({},t,{},e)),n},b=function(e){var t=d(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=d(n),p=a,m=b["".concat(i,".").concat(p)]||b[p]||h[p]||l;return n?o.a.createElement(m,r({ref:t},s,{components:n})):o.a.createElement(m,r({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=p;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var s=2;s<l;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);
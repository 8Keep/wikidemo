(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{251:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(1),o=n(9),r=(n(0),n(441)),i={},l={id:"jme3/quaternion",title:"quaternion",description:"Quaternion",source:"@site/docs/jme3/quaternion.md",permalink:"/wikidemo/docs/jme3/quaternion",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/quaternion.md"},s=[{value:"Definition",id:"definition",children:[]},{value:"Angle Axis",id:"angle-axis",children:[{value:"Example - Rotate a Spatial Using fromAngleAxis",id:"example---rotate-a-spatial-using-fromangleaxis",children:[]}]},{value:"Three Angles",id:"three-angles",children:[{value:"Example - Rotate a Spatial Using fromAngles",id:"example---rotate-a-spatial-using-fromangles",children:[]}]},{value:"Three Axes",id:"three-axes",children:[{value:"Example - Rotate a Spatial Using fromAxes",id:"example---rotate-a-spatial-using-fromaxes",children:[]}]},{value:"Rotation Matrix",id:"rotation-matrix",children:[{value:"Example - Rotate a Spatial Using a Rotation Matrix",id:"example---rotate-a-spatial-using-a-rotation-matrix",children:[]}]},{value:"Slerp",id:"slerp",children:[{value:"Example - Use Slerp to Rotate Between two Quaternions",id:"example---use-slerp-to-rotate-between-two-quaternions",children:[]}]}],c={rightToc:s};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"quaternion"},"Quaternion"),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"%7Blink-javadoc%7D/com/jme3/math/Quaternion.html"}),"Javadoc")),Object(r.b)("h2",{id:"definition"},"Definition"),Object(r.b)("p",null,"Quaternions define a subset of a hypercomplex number system. Quaternions\nare defined by (i^2^ = j^2^ = k^2^ = ijk = -1). jME makes use of\nQuaternions because they allow for compact representations of rotations,\nor correspondingly, orientations, in 3D space. With only four float\nvalues, we can represent an object's orientation, where a rotation\nmatrix would require nine. They also require fewer arithmetic operations\nfor concatenation."),Object(r.b)("p",null,"Additional benefits of the Quaternion is reducing the chance of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Gimbal_lock"}),"Gimbal\nLock")," and allowing for easily\ninterpolation between two rotations (spherical linear interpolation or\nslerp)."),Object(r.b)("p",null,"While Quaternions are quite difficult to fully understand, there are an\nexceeding number of convenience methods to allow you to use them without\nhaving to understand the math behind it. Basically, these methods\ninvolve nothing more than setting the Quaternion's x,y,z,w values using\nother means of representing rotations. The Quaternion is then contained\nin ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../jme3/advanced/spatial"}),"Spatial")," as its local rotation\ncomponent."),Object(r.b)("p",null,"Quaternion ",Object(r.b)("strong",{parentName:"p"},"q")," has the form"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"q")," = \\<","_","w,x,y,z","_",">"," = ",Object(r.b)("em",{parentName:"p"},"w + xi + yj + zk")),Object(r.b)("p",null,"or alternatively, it can be written as:"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"q")," = ",Object(r.b)("strong",{parentName:"p"},"s")," + ",Object(r.b)("strong",{parentName:"p"},"v"),", where ",Object(r.b)("strong",{parentName:"p"},"s")," represents the scalar part\ncorresponding to the w-component of ",Object(r.b)("strong",{parentName:"p"},"q"),", and ",Object(r.b)("strong",{parentName:"p"},"v")," represents the\nvector part of the (x, y, z) components of ",Object(r.b)("strong",{parentName:"p"},"q"),"."),Object(r.b)("p",null,"Multiplication of Quaternions uses the distributive law and adheres to\nthe following rules with multiplying the imaginary components (i, j, k):"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"i2 = j2 = k2 = -1"),"+ ",Object(r.b)("inlineCode",{parentName:"p"},"ij = -ji = k"),"+ ",Object(r.b)("inlineCode",{parentName:"p"},"jk = -kj = i"),"+ ",Object(r.b)("inlineCode",{parentName:"p"},"ki = -ik = j")),Object(r.b)("p",null,"However, Quaternion multiplication is ",Object(r.b)("em",{parentName:"p"},"not")," commutative, so we have to\npay attention to order."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"q~1~q~2~")," = s~1~s~2~ - ",Object(r.b)("strong",{parentName:"p"},"v~1~")," dot ",Object(r.b)("strong",{parentName:"p"},"v~2~")," + s~1~",Object(r.b)("strong",{parentName:"p"},"v~2~")," +\ns~2~",Object(r.b)("strong",{parentName:"p"},"v~1~")," + ",Object(r.b)("strong",{parentName:"p"},"v~1~")," X ",Object(r.b)("strong",{parentName:"p"},"v~2~")),Object(r.b)("p",null,"Quaternions also have conjugates where the conjugate of ",Object(r.b)("strong",{parentName:"p"},"q")," is (s -\n",Object(r.b)("strong",{parentName:"p"},"v"),")"),Object(r.b)("p",null,"These basic operations allow us to convert various rotation\nrepresentations to Quaternions."),Object(r.b)("h2",{id:"angle-axis"},"Angle Axis"),Object(r.b)("p",null,"You might wish to represent your rotations as Angle Axis pairs. That is,\nyou define a axis of rotation and the angle with which to rotate about\nthis axis. Quaternion defines a method ",Object(r.b)("inlineCode",{parentName:"p"},"fromAngleAxis")," (and\n",Object(r.b)("inlineCode",{parentName:"p"},"fromAngleNormalAxis"),") to create a Quaternion from this pair. This is\nacutally used quite a bit in jME demos to continually rotate objects.\nYou can also obtain a Angle Axis rotation from an existing Quaternion\nusing ",Object(r.b)("inlineCode",{parentName:"p"},"toAngleAxis"),"."),Object(r.b)("h3",{id:"example---rotate-a-spatial-using-fromangleaxis"},"Example - Rotate a Spatial Using fromAngleAxis"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"//rotate about the Y-Axis by approximately 1 pi\nVector3f axis = Vector3f.UNIT_Y; // this equals (0, 1, 0) and does not require to create a new object\nfloat angle = 3.14f;\ns.getLocalRotation().fromAngleAxis(angle, axis);\n")),Object(r.b)("h2",{id:"three-angles"},"Three Angles"),Object(r.b)("p",null,"You can also represent a rotation by defining three angles. The angles\nrepresent the rotation about the individual axes. Passing in a\nthree-element array of floats defines the angles where the first element\nis X, second Y and third is Z. The method provided by Quaternion is\n",Object(r.b)("inlineCode",{parentName:"p"},"fromAngles")," and can also fill an array using ",Object(r.b)("inlineCode",{parentName:"p"},"toAngles")),Object(r.b)("h3",{id:"example---rotate-a-spatial-using-fromangles"},"Example - Rotate a Spatial Using fromAngles"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"//rotate 1 radian on the x, 3 on the y and 0 on z\nfloat[] angles = {1, 3, 0};\ns.getLocalRotation().fromAngles(angles);\n")),Object(r.b)("h2",{id:"three-axes"},"Three Axes"),Object(r.b)("p",null,"If you have three axes that define your rotation, where the axes define\nthe left axis, up axis and directional axis respectively) you can make\nuse of ",Object(r.b)("inlineCode",{parentName:"p"},"fromAxes")," to generate the Quaternion. It should be noted that\nthis will generate a new ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../jme3/matrix"}),"Matrix")," object that is\nthen garbage collected, thus, this method should not be used if it will\nbe called many times. Again, ",Object(r.b)("inlineCode",{parentName:"p"},"toAxes")," will populate a\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../jme3/terminology.xml#vectors"}),"Vector3f")," array."),Object(r.b)("h3",{id:"example---rotate-a-spatial-using-fromaxes"},"Example - Rotate a Spatial Using fromAxes"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"//rotate a spatial to face up ~45 degrees\nVector3f[] axes = new Vector3f[3];\naxes[0] = new Vector3f(-1, 0, 0); //left\naxes[1] = new Vector3f(0, 0.5f, 0.5f); //up\naxes[2] = new Vector3f(0, 0.5f, 0.5f); //dir\n\ns.getLocalRotation().fromAxes(axes);\n")),Object(r.b)("h2",{id:"rotation-matrix"},"Rotation Matrix"),Object(r.b)("p",null,"Commonly you might find yourself with a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../jme3/matrix"}),"Matrix"),"\ndefining a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../jme3/rotate.xml#toolbar"}),"rotation"),". In fact, it's very\ncommon to contain a rotation in a Matrix, create a Quaternion, rotate\nthe Quaternion, and then get the Matrix back. Quaternion contains a\n",Object(r.b)("inlineCode",{parentName:"p"},"fromRotationMatrix")," method that will create the appropriate Quaternion\nbased on the given Matrix. The ",Object(r.b)("inlineCode",{parentName:"p"},"toRotationMatrix")," will populate a given\nMatrix."),Object(r.b)("h3",{id:"example---rotate-a-spatial-using-a-rotation-matrix"},"Example - Rotate a Spatial Using a Rotation Matrix"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Matrix3f mat = new Matrix3f();\nmat.setColumn(0, new Vector3f(1,0,0));\nmat.setColumn(1, new Vector3f(0,-1,0));\nmat.setColumn(2, new Vector3f(0,0,1));\n\ns.getLocalRotation().fromRotationMatrix(mat);\n")),Object(r.b)("p",null,"As you can see there are many ways to build a Quaternion. This allows\nyou to work with rotations in a way that is conceptually easier to\npicture, but still build Quaternions for internal representation."),Object(r.b)("h2",{id:"slerp"},"Slerp"),Object(r.b)("p",null,"One of the biggest advantages to using Quaternions is allowing\ninterpolation between two rotations. That is, if you have an initial\nQuaternion representing the original orientation of an object, and you\nhave a final Quaternion representing the orientation you want the object\nto face, you can do this very smoothly with slerp. Simply supply the\ntime, where time is ","[","0, 1","]"," and 0 is the initial rotation and 1 is the\nfinal rotation."),Object(r.b)("h3",{id:"example---use-slerp-to-rotate-between-two-quaternions"},"Example - Use Slerp to Rotate Between two Quaternions"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Quaternion q1;\nQuaternion q2;\n\n//the rotation half-way between these two\nQuaternion q3 = q1.slerp(q2, 0.5f);\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"See ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"../jme3/rotate"}),"3D-Rotations")," for troubleshooting and extra\ninformation on using quaternions.")))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},b=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),m=a,h=b["".concat(i,".").concat(m)]||b[m]||u[m]||r;return n?o.a.createElement(h,l({ref:t},c,{components:n})):o.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
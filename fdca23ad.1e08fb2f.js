(window.webpackJsonp=window.webpackJsonp||[]).push([[298],{437:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(1),r=n(9),o=(n(0),n(441)),i={},s={id:"jme3/advanced/statsview",title:"statsview",description:"When you create a SimpleApplication, you see the default StatsView and",source:"@site/docs/jme3/advanced/statsview.md",permalink:"/wikidemo/docs/jme3/advanced/statsview",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/statsview.md"},l=[],c={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"When you create a SimpleApplication, you see the default StatsView and\nFpsView in the left corner. The StatsView displays object statistics\nthat are used during development, for example for debugging and\noptimization. Below the StatsView is the FpsView that displays the\nframes that jMonkeyEngine can render per second."),Object(o.b)("p",null,"The main use case of these statistics is to find out why the application\nmay be running slow and where to start fixing the performance."),Object(o.b)("p",null,"The StatsView + FpsView look like this example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"FrameBuffers (M) = 2\nFrameBuffers (F) = 2\nFrameBuffers (S) = 2\nTextures (M) = 7\nTextures (F) = 3\nTextures (S) = 3\nShaders (M) = 6\nShaders (F) = 3\nShaders (S) = 4\nObjects = 24\nUniforms = 31\nTriangles = 582\nVertices = 1148\nFrames per Second: 30\n")),Object(o.b)("h1",{id:"onoff"},"On/Off"),Object(o.b)("p",null,"You switch the StatsView on an off in the simpleInitApp() method by\nsetting a boolean:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"setDisplayFps(false);       // to hide the FPS\nsetDisplayStatView(false);  // to hide the statistics\n")),Object(o.b)("h1",{id:"terminology"},"Terminology"),Object(o.b)("p",null,"Types of items counted:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"FrameBuffers: Total number of rendering surfaces used for off-screen\nrendering and render-to-texture functionality.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Textures: Total number of distinct textures used in the scene.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Shaders: Total number of shaders used for effects (shading, blur,\nlighting, glow, etc).")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Objects: Total number of objects in the OpenGL pipeline. That is,\nobjects attached to the rootNode and guiNode, etc.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Uniforms: Total number of shader uniforms. Uniforms are predefined\nvariables used as parameters in shader calculations, containing data\nsuch as matrices, vectors, time, and colors.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Triangles: Total number of triangles (faces) of the meshes of all\nobjects.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Vertices: Total number of vertices (corner points) of the meshes of\nall the objects."))),Object(o.b)("p",null,"Types of statistics:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"(M) = Memory")," -- Number of items currently in OpenGL memory.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"*","(F) = Frame ","*"," -- Number of items used by current frame (visible).")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"(S) = Switches")," -- Number of items that were state switched in\nthe last frame."))),Object(o.b)("p",null,"The StatsView does not include any Physics statistics."),Object(o.b)("h1",{id:"how-to-interpret-the-fps-when-optimizing"},"How to Interpret the FPS when Optimizing"),Object(o.b)("p",null,"The FPS (frames per second) shows you how fast jME runs the update loop.\nIf the FPS values goes below 30, the game slows down and runs jerky,\nwhich makes the game either frustrating or impossible to play. You need\neither decrease the number of operations in the update loop, or decrease\nmemory usage (object count)."),Object(o.b)("p",null,"If your application grows more and more sluggish, deactivate or decrease\none feature set at a time: Deactivate drop shadows, physics,\nanti-aliasing... Try fewer light sources, fewer NPCs, fewer samples in\nspheres (i.e. less smooth spheres). Temporarily replace the scene (or\nparts of it) with a simpler test scene to check whether the scene has to\nmany triangles, etc."),Object(o.b)("p",null,"Keep an eye on FPS and the StatsView and find out which element has the\nbiggest impact on performance. This is where you start optimizing."),Object(o.b)("h1",{id:"how-to-interpret-the-statistics"},"How to Interpret The Statistics"),Object(o.b)("p",null,"::: {.important}\nTo interpret the numbers correctly, consider that the 14 lines of text\nthemselves already count as 14 objects with 914 vertices. You need to\nsubtract these values from the totals for smaller performance\nexperiments.\n:::"),Object(o.b)("p",null,"What do you want to avoid?"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"FrameBuffers: If you don't use any post-processing effects\n(FilterPostProcessor), this count should be zero. The more effects\nyou use, the more FrameBuffers are in use. If this value is high\nwhile others are normal, and your game is sluggish, you can speed up\nthe application by using fewer post-processing effects.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The Object Count (Batch Count) is a very important value that\nindicates how many geometries were rendered in the last frame. In\ngeneral, if you keep the object count around 100-200, your game will\nbe fast and responsive. If the count is permanently higher,\nhand-code rules that detach remote objects, or optimize a complex\nmulti-material scene using:\n",Object(o.b)("inlineCode",{parentName:"p"},"GeometryBatchFactory.optimize(complexNode, true);")," or a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/texture_atlas"}),"Texture\nAtlas"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Triangle Counts. If your game is sluggish and triangle (polygon)\ncount is high, then you are rendering too many, too detailed meshes.\nTell your graphic designers to create models with lower polygon\ncounts, or use a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/level_of_detail"}),"Level of\nDetail")," (LOD) optimization.\nThe limit is around 100\\'000 vertices for a scene, considering that\nthe slowest currently used graphic cards cannot handle anything\nbeyond that.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Are any counts constantly increasing right before the game slows\ndown or runs out of memory? Check whether you are accidentally\nadding objects in a loop, instead of only once.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'Verify that the numbers are plausible. If you think you generated a\ntest scene out of "a few" boxes, but the StatsView shows ten\nthousands of triangles, then you probably have extra objects out of\nsight somewhere (due to barely visible materials, overlapping with\nother objects, scaled too big or too small to see, etc).'),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Example: In a test scene made up of boxes, you'd expect a\nvertex:triangle:object ratio of 8:12:1.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Terrains, models and spheres have higher counts, depending on\ntheir size and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/level_of_detail"}),"Level of\nDetail")," (LOD). A\nhigh-poly model looks pretty in Blender, but you must find a\nlower-poly, low-LOD compromise if you want several large objects\nin one scene!")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"If S (objects being switched) are high compared to F (objects used),\nthen you use or generate too many different Materials (etc). You are\nunnecessarily forcing jME to re-load and re-bind objects (=\nSwitches), which is bad for performance. Also if you have many\ntransparent materials in your scene, this results in more switches,\nand you should use fewer transparent materials.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"If the M values (objects in memory) are high compared to F (objects\nused), that means a lot more GL objects are kept in memory than are\nactually used. This can happen in large scenes with many materials.\nConsider breaking the scene up and detaching objects while they are\nout of sight, so the built-in culling can optimize the scene."))),Object(o.b)("p",null,"What goal are you trying to achieve in general?"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The values for (M) and (F) should be within the same order of\nmagnitude. This means your code only loads objects that it actually\nneeds, and that the hardware can actually handle.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"It's okay if Switches (S) are lower than Used in Current Frame (F).")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The FPS should be 30 or more on the slowest hardware that you\ntarget.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"10\\'000-50\\'000 vertices is a typical average value for a scene."))),Object(o.b)("p",null,"See also:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.jmonkeyengine.org/t/good-triangles-count/22843"}),"What's a good triangle\ncount?"),"\nForum discussion")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/level_of_detail"}),"Level of Detail")))))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(n),m=a,h=b["".concat(i,".").concat(m)]||b[m]||u[m]||o;return n?r.a.createElement(h,s({ref:t},c,{components:n})):r.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
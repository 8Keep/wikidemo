(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{276:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var a=n(1),i=n(9),o=(n(0),n(441)),r={},c={id:"jme3/ios",title:"ios",description:"iOS Deployment",source:"@site/docs/jme3/ios.md",permalink:"/wikidemo/docs/jme3/ios",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/ios.md"},l=[{value:"Enabling iOS deployment",id:"enabling-ios-deployment",children:[]},{value:"Building the iOS binaries",id:"building-the-ios-binaries",children:[]},{value:"Running and deploying the application",id:"running-and-deploying-the-application",children:[]},{value:"Creating native and java code for iOS",id:"creating-native-and-java-code-for-ios",children:[]}],p={rightToc:l};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"ios-deployment"},"iOS Deployment"),Object(o.b)("p",null,"To use iOS deployment you need a computer running MacOSX and a version\nof Xcode 4.0+ installed. To deploy to a device or the Apple App Store,\nyou need an Apple developer account."),Object(o.b)("p",null,"::: {.warning}\nNote that at the moment iOS deployment is in alpha state.\n:::"),Object(o.b)("p",null,"iOS deployment works via cross-compilation to native iOS ARM code, there\nis no virtual machine running on the device. The Avian JVM supports this\nfeature while maintaining general compatibility to OpenJDK and JNI for\nnative access. The minimum compatible iOS deployment target is 4.3."),Object(o.b)("p",null,"After creating a ",Object(o.b)("inlineCode",{parentName:"p"},"Basic Game")," project in the jMonkeyEngine SDK, add the\niOS library by RMB selecting your project and navigating to\n",Object(o.b)("inlineCode",{parentName:"p"},"Properties Libraries Add Library\u2026\u200b jme3-ios")," and when ready Add\nLibrary."),Object(o.b)("p",null,Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"../sdk/xcode_add_ios_lib.jpg",alt:"xcode_add_ios_lib.jpg"}))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"To install the iOS deployment plugin, go to ","[Tools ",">","\nPlugins]",'{.menuchoice} and under "Available Plugins" select:'),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},"\u2713 iOS Support")),Object(o.b)("p",{parentName:"div"},'If you dont see it there, check under the "Installed" tab as it may\nalready be activated.'))),Object(o.b)("h2",{id:"enabling-ios-deployment"},"Enabling iOS deployment"),Object(o.b)("p",null,"To enable iOS deployment, go to the project settings and under\n","[Application ",">"," iOS]","{.menuchoice} select:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"\u2713 Enable iOS deployment")),Object(o.b)("p",null,"If there is no number present then you need to install XCODE. In this\nexample, my SDK version is 11.3 and I'm using XCODE version 9.3"),Object(o.b)("p",null,Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"../sdk/xcode_enable_ios_deploy.jpg",alt:"xcode_enable_ios_deploy.jpg"}))),Object(o.b)("p",null,"Then adapt the application ID and press OK."),Object(o.b)("p",null,"After enabling deployment, a new ",Object(o.b)("inlineCode",{parentName:"p"},"ios")," directory is created in the\nproject root that contains a ",Object(o.b)("inlineCode",{parentName:"p"},"project")," and a ",Object(o.b)("inlineCode",{parentName:"p"},"src")," folder. The\n",Object(o.b)("inlineCode",{parentName:"p"},"ios/project")," folder contains an Xcode project that you will use to\nbuild and run the final iOS application for both iPhone and iOS. The\n",Object(o.b)("inlineCode",{parentName:"p"},"ios/src")," folder contains java and native source files for bridging iOS\nand native code, you can add .java and .m files with your own iOS code\nhere."),Object(o.b)("p",null,"::: {.important}\nWhen you enable iOS deployment for the first time or any time that the\nAvian library and OpenJDK is updated, they will be extracted to your SDK\nsettings folder, wait until it has been extracted before building an\niOS-enabled project.\n:::"),Object(o.b)("h2",{id:"building-the-ios-binaries"},"Building the iOS binaries"),Object(o.b)("p",null,"Compile your project. The iOS binaries are automatically built when you\nhave iOS deployment enabled and build your project in the jME3 SDK."),Object(o.b)("p",null,"When the iOS binaries are built, all needed classes, including a\ncomplete copy of the OpenJDK classes are run through a proguard process\nthat strips out the unnecessary classes for the project and optimizes\nthe code for the platform. This happens without changing the naming\nstructure so that reflection etc. still works. If necessary, adapt the\nproguard options in the ios properties file."),Object(o.b)("p",null,"After the iOS classpath has been created the avian compiler is used to\ncreate a native .o file from the classpath for both arm (device) and\ni386 (simulator). Furthermore the other needed avian .o files are\nextracted and a library list is compiled which is referenced in the\nXcode project."),Object(o.b)("p",null,"If an error occurs about jni.h not being found, either install the SDK\nfor 11.3 in XCode:"),Object(o.b)("p",null,"Run this command in terminal:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"xcode-select --install\n")),Object(o.b)("p",null,"or set the header search path in the XCode project settings, in the\ndefault project thats\\"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3.sdk/System/Library/Frameworks/JavaVM.framework/Headers/\n")),Object(o.b)("p",null,"When it's compiled successfully, load the XCODE PROJECT into XCODE,\nwhich is located in the IOS/PROJECT folder. As mentioned above, my SDK\nversion is 11.3 and I'm using XCODE version 9.3"),Object(o.b)("h2",{id:"running-and-deploying-the-application"},"Running and deploying the application"),Object(o.b)("p",null,"To run the application, open the Xcode project under ",Object(o.b)("inlineCode",{parentName:"p"},"ios/project")," in\nXcode and press the run button. You can make changes to the UI and\nnative invocation classes in the Xcode project as well. From here you\ncan also deploy the application to your devices or the App Store."),Object(o.b)("p",null,"You should also adapt the project settings like application name and\nregistration package in Xcode before deploying the final application."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'First change the selected "TARGET" at the top of the screen from\n',Object(o.b)("inlineCode",{parentName:"p"},"iPhone 7 Plus")," to ",Object(o.b)("inlineCode",{parentName:"p"},"Generic iOS Device"),". This is so we can do a full\nbuild. If you want to run it in a simulator then you can change it\nback later."),Object(o.b)("p",{parentName:"li"},Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"../sdk/xcode_generic_ios.jpg",alt:"xcode_generic_ios.jpg"})))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'From the "PROJECT" menu click BUILD and the build will fail. Click\nthe ISSUE NAVIGATOR button to show the compilation errors.'),Object(o.b)("p",{parentName:"li"},Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"../sdk/xcode_issue_nav.jpg",alt:"xcode_issue_nav.jpg"}))),Object(o.b)("p",{parentName:"li"},'We can see here that the "Developer" account is missing, the project\nsettings are out of date and there is a missing image for Retina\n4-inch support.'),Object(o.b)("p",{parentName:"li"},"a.  Click Validate Project Settings followed by PERFORM CHANGES to\naccept all the suggested amendments."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"![xcode\\_perform\\_changes.jpg](../sdk/xcode_perform_changes.jpg)\n")),Object(o.b)("p",{parentName:"li"},"b.  Click on the Missing Image warning and XCODE will automatically\nadd a placeholder for you."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"![xcode\\_add\\_placeholder.jpg](../sdk/xcode_add_placeholder.jpg)\n")),Object(o.b)("p",{parentName:"li"},"c.  Add your iOS developer account details by clicking on the target\nand then the Account Drop down."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"![xcode\\_add\\_account.jpg](../sdk/xcode_add_account.jpg)\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'Now click the "PROJECT" menu and "BUILD" again and it should compile\nnow but fails at the linking stage.'),Object(o.b)("p",{parentName:"li"},Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"../sdk/xcode_build.jpg",alt:"xcode_build.jpg"})))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"We need to amend the linker search paths."),Object(o.b)("p",{parentName:"li"},"a.  Click on PROJECT NAVIGATOR."),Object(o.b)("p",{parentName:"li"},"b.  Highlight the top row (JME-IOS)."),Object(o.b)("p",{parentName:"li"},'c.  Click jme-ios under "PROJECT" (Not "TARGETS").'),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'If you have done it correct then you will only see "INFO" &\n"BUILD SETTINGS" at the top.\n')),Object(o.b)("p",{parentName:"li"},"d.  Select BUILD SETTINGS."),Object(o.b)("p",{parentName:"li"},'e.  Scroll down to "LINKING" section.'),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"![xcode\\_linking.jpg](../sdk/xcode_linking.jpg)\n")),Object(o.b)("p",{parentName:"li"},"f.  Double click on OTHER LINKER FLAGS."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"![xcode\\_linker\\_flags.jpg](../sdk/xcode_linker_flags.jpg)\n")),Object(o.b)("p",{parentName:"li"},'g.  Double click on the line referencing "i386" and change it from:'),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"`\u2026/\u2026/build/ios-i386/libs.list`\n\nto\n\n`\u2026/\u2026/build/ios-x86_64/libs.list`\n")),Object(o.b)("p",{parentName:"li"},'h.  Add the additional flag for "ARM64" sub type issue introduced in\niOS SDK 11.'),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"-   With nothing selected click on the + sign and a new entry\n    will be added at the bottom.\n\n-   In here add:\n\n    `-force_cpusubtype_ALL`\n\nYour other linker flags should now look like this...\n\n![xcode\\_other\\_linker.png](../sdk/xcode_other_linker.png)\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'Disable "BITCODE".'),Object(o.b)("p",{parentName:"li"},"a.  Click on PROJECT NAVIGATOR."),Object(o.b)("p",{parentName:"li"},"b.  Highlight the top row (JME-IOS)."),Object(o.b)("p",{parentName:"li"},'c.  Click jme-ios under "TARGETS" (Not "PROJECT").'),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"If you have followed the directions correctly, then you will see\nGeneral/Capabilities/Resource Tags/Info/Build Settings/Build\nPhases/Build Rules at the top.\n")),Object(o.b)("p",{parentName:"li"},"d.  Select BUILD SETTINGS."),Object(o.b)("p",{parentName:"li"},'e.  Scroll down to "BUILD OPTIONS" section and change "ENABLE\nBITCODE" to "NO".'),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"![xcode\\_disable\\_bitcode.jpg](../sdk/xcode_disable_bitcode.jpg)\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'From the "PROJECT" menu click \\"BUILD\\" and the project should build\nand link fully.')),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'To publish to the "APP STORE" you select the "PROJECT" menu and\n"ARCHIVE".'),Object(o.b)("p",{parentName:"li"},"This will generate the App Store Archive and show in the organizer\nscreen."),Object(o.b)("p",{parentName:"li"},Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"../sdk/xcode_publish.png",alt:"xcode_publish.png"})))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Click Upload to APP Store and away you go."))),Object(o.b)("h2",{id:"creating-native-and-java-code-for-ios"},"Creating native and java code for iOS"),Object(o.b)("p",null,"To bridge between native and java code, JNI is used like in a normal\njava application. The ",Object(o.b)("inlineCode",{parentName:"p"},"ios/src")," folder is for Java and C/Obj-C source\nfiles that are specific to your iOS application. In these java files you\nhave access to the full project classpath as well as the iOS-specific\njME3 classes."),Object(o.b)("p",null,"The JmeAppHarness.java class is initialized and called from native code\nthrough the default project and you can extend it to perform other\nnative operations. It has a simple native popup method. The\nJmeAppHarness.m file contains the native method needed for that popup."),Object(o.b)("p",null,"Effectively native code can reside in both the Xcode project and in the\n",Object(o.b)("inlineCode",{parentName:"p"},"ios/src")," folder. To keep the dependencies clean and make code reusable\nyou should try to put generic native code that does not depend on the\nXcode project in the ",Object(o.b)("inlineCode",{parentName:"p"},"ios/src")," folder. You can also mix and match ARC\nand non-ARC code through this by converting the main project to use ARC\nand putting code with manual memory management in the ",Object(o.b)("inlineCode",{parentName:"p"},"ios/src")," folder."),Object(o.b)("p",null,"Java code for iOS should be in the ",Object(o.b)("inlineCode",{parentName:"p"},"ios/src")," folder as well for clean\nseparation, its also the only place where they will be compiled with a\nreference to the iOS specific jME classes. For information on how to\nconnect your application code and device specific code, see the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../jme3/android.xml#using_android_specific_functions"}),"notes\nin the android deployment\ndocumentation"),"."))}d.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),d=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=d(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},h=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=d(n),h=a,m=b["".concat(r,".").concat(h)]||b[h]||s[h]||o;return n?i.a.createElement(m,c({ref:t},p,{components:n})):i.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var p=2;p<o;p++)r[p]=n[p];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);
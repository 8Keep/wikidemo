(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{196:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var i=n(1),a=n(9),r=(n(0),n(441)),o={},s={id:"jme3/advanced/mouse_picking",title:"mouse_picking",description:"Mouse picking means that the user clicks an object in the scene to",source:"@site/docs/jme3/advanced/mouse_picking.md",permalink:"/wikidemo/docs/jme3/advanced/mouse_picking",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/mouse_picking.md"},c=[],l={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Mouse picking means that the user clicks an object in the scene to\nselect it, or to interact with it otherwise. Games use picking to\nimplement aiming and shooting, casting spells, picking up objects,\nselecting targets, dragging and moving objects, etc. Mouse picking can\nbe done using fixed crosshairs, or using the mouse pointer."),Object(r.b)("p",null,Object(r.b)("img",Object(i.a)({parentName:"p"},{src:"/images/jme3/advanced/mouse-picking.png",alt:"mouse-picking.png"}))),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"../../jme3/advanced/input_handling"}),"Input Handling")," for details\non how to define the necessary input triggers, input mappings, and input\nlisteners."),Object(r.b)("h1",{id:"pick-a-target-using-fixed-crosshairs"},"Pick a Target Using Fixed Crosshairs"),Object(r.b)("p",null,"The following ",Object(r.b)("inlineCode",{parentName:"p"},"pick target")," input mapping implements an action that\ndetermines what a user clicked. It assumes that the mouse pointer is\ninvisible and there are crosshairs painted in the center of the screen.\nIt assumes that the user aims the crosshairs at an object in the scene\nand clicks. You use Ray Casting to identify the geometry that was picked\nby the user. Use this method together with a first-person flyCam."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Activate the first-person camera: ",Object(r.b)("inlineCode",{parentName:"p"},"flyCam.setEnabled(true);"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Keep mouse pointer invisible using\n",Object(r.b)("inlineCode",{parentName:"p"},"inputManager.setCursorVisible(false)"),".")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Map the ",Object(r.b)("inlineCode",{parentName:"p"},"pick target")," action to a MouseButtonTrigger.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Implement the action in the Listener."))),Object(r.b)("p",null,'The following example rotates Spatials named "Red Box or "Blue Box when\nthey are clicked. Modify this code to do whatever your game needs to do\nwith the identified target (shoot it, take it, move it, etc).'),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'  private AnalogListener analogListener = new AnalogListener() {\n    public void onAnalog(String name, float intensity, float tpf) {\n        if (name.equals("pick target")) {\n         // Reset results list.\n         CollisionResults results = new CollisionResults();\n         // Aim the ray from camera location in camera direction\n         // (assuming crosshairs in center of screen).\n         Ray ray = new Ray(cam.getLocation(), cam.getDirection());\n         // Collect intersections between ray and all nodes in results list.\n         rootNode.collideWith(ray, results);\n         // Print the results so we see what is going on\n         for (int i = 0; i < results.size(); i++) {\n           // For each \u201chit\u201d, we know distance, impact point, geometry.\n           float dist = results.getCollision(i).getDistance();\n           Vector3f pt = results.getCollision(i).getContactPoint();\n           String target = results.getCollision(i).getGeometry().getName();\n           System.out.println("Selection #" + i + ": " + target + " at " + pt + ", " + dist + " WU away.");\n         }\n         // 5. Use the results -- we rotate the selected geometry.\n         if (results.size() > 0) {\n           // The closest result is the target that the player picked:\n           Geometry target = results.getClosestCollision().getGeometry();\n           // Here comes the action:\n           if(target.getName().equals("Red Box"))\n             target.rotate(0, - intensity, 0);\n           else if(target.getName().equals("Blue Box"))\n             target.rotate(0, intensity, 0);\n         }\n        } // else if ...\n    }\n  };\n')),Object(r.b)("h1",{id:"pick-a-target-using-the-mouse-pointer"},"Pick a Target Using the Mouse Pointer"),Object(r.b)("p",null,"The following ",Object(r.b)("inlineCode",{parentName:"p"},"pick target")," input mapping implements an action that\ndetermines what a user clicked. It assumes that the mouse pointer is\nvisible, and the user aims the cursor at an object in the scene. You use\nray casting to determine the geometry that was picked by the user."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note:")," Picking with a visible mouse pointer implies that your\napplication can no longer use the default flyCam where the\nMouseAxisTrigger rotates the camera. You have to deactivate the flyCam\nmappings and provide custom mappings. Either different inputs rotate the\ncamera, or the camera is fixed."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Map the ",Object(r.b)("inlineCode",{parentName:"p"},"pick target")," action to a MouseButtonTrigger.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Make the mouse pointer visible using\n",Object(r.b)("inlineCode",{parentName:"p"},"inputManager.setCursorVisible(true)"),".")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Remap the inputs for camera rotation, or deactivate camera rotation.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Implement the action in the Listener."))),Object(r.b)("p",null,'The following example rotates Spatials named "Red Box or "Blue Box when\nthey are clicked. Modify this code to do whatever your game needs to do\nwith the identified target (shoot it, take it, move it, etc).'),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'private AnalogListener analogListener = new AnalogListener() {\n    public void onAnalog(String name, float intensity, float tpf) {\n      if (name.equals("pick target")) {\n        // Reset results list.\n        CollisionResults results = new CollisionResults();\n        // Convert screen click to 3d position\n        Vector2f click2d = inputManager.getCursorPosition();\n        Vector3f click3d = cam.getWorldCoordinates(new Vector2f(click2d.x, click2d.y), 0f).clone();\n        Vector3f dir = cam.getWorldCoordinates(new Vector2f(click2d.x, click2d.y), 1f).subtractLocal(click3d).normalizeLocal();\n        // Aim the ray from the clicked spot forwards.\n        Ray ray = new Ray(click3d, dir);\n        // Collect intersections between ray and all nodes in results list.\n        rootNode.collideWith(ray, results);\n        // (Print the results so we see what is going on:)\n        for (int i = 0; i < results.size(); i++) {\n          // (For each \u201chit\u201d, we know distance, impact point, geometry.)\n          float dist = results.getCollision(i).getDistance();\n          Vector3f pt = results.getCollision(i).getContactPoint();\n          String target = results.getCollision(i).getGeometry().getName();\n          System.out.println("Selection #" + i + ": " + target + " at " + pt + ", " + dist + " WU away.");\n        }\n        // Use the results -- we rotate the selected geometry.\n        if (results.size() > 0) {\n          // The closest result is the target that the player picked:\n          Geometry target = results.getClosestCollision().getGeometry();\n          // Here comes the action:\n          if (target.getName().equals("Red Box")) {\n            target.rotate(0, -intensity, 0);\n          } else if (target.getName().equals("Blue Box")) {\n            target.rotate(0, intensity, 0);\n          }\n        }\n      } // else if ...\n    }\n  };\n')))}p.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},g=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),g=i,d=u["".concat(o,".").concat(g)]||u[g]||m[g]||r;return n?a.a.createElement(d,s({ref:t},l,{components:n})):a.a.createElement(d,s({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"}}]);
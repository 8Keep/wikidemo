(window.webpackJsonp=window.webpackJsonp||[]).push([[212],{351:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var r=n(1),a=n(9),i=(n(0),n(441)),s={},o={id:"spidermonkey/tutorial/serializing",title:"serializing",description:"::: {.warning}",source:"@site/docs/spidermonkey/tutorial/serializing.md",permalink:"/wikidemo/docs/spidermonkey/tutorial/serializing",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/spidermonkey/tutorial/serializing.md"},l=[],c={rightToc:l};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"::: {.warning}\nThis article covers a deprecated API! See\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"../../jme3/advanced/networking"}),"networking")," for current\ndocumentation.\n:::"),Object(i.b)("p",null,"In this lesson you'll learn about a pretty advanced system of\nSpiderMonkey. Why so early, you may ask; it's because it is an important\naspect of SpiderMonkey, that you need to understand to effectively\nnetwork your games."),Object(i.b)("p",null,"Let's start with a general explanation of how the serialization system\nworks. SpiderMonkey's Serializer class is the entry point for everything\nserializing. Serializing is the act of translating an object into bytes,\nso it can be transferred over the network. SpiderMonkey does this by\nhaving Serializer classes (they extend Serializer itself), and having\nsome static methods available in the Serializer class. A serializer does\nnot exist without a class it can serialize - this means that Serializers\nneed to be registered with a class. For example, the String type is\nregistered to the StringSerializer class. Without the String type being\nregistered, there'd be no instance of StringSerializer. So! Let's get\ndown to business!"),Object(i.b)("h1",{id:"writing-your-own-serializer"},"Writing your own serializer"),Object(i.b)("p",null,"There is going to be a situation where you need to serialize something\nyourself, whether you like it or not. We're going through how you're\ngoing to do, by writing a entirely new Serializer - please note that\nthis Serializer is not necessary in SpiderMonkey, since SpiderMonkey can\nserialize Serializable, and InetAddress4 implements Serializable (though\nit does save a LOT of bytes by doing it yourself). The field that makes\nan InetAddress4 an InetAddress4 is the IP address, so that's what we're\ngoing to serialize. Let's start by going through the basics of extending\nthe Serializer class:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"public class Inet4AddressSerializer extends Serializer {\n   public InetAddress readObject(ByteBuffer data, Class c) throws IOException\n      return null;\n   }\n\n   public void writeObject(ByteBuffer buffer, Object object) throws IOException {\n      InetAddress address = (InetAddress)object;\n   }\n}\n")),Object(i.b)("p",null,"As you can see, you have to extend Serializer and implement the methods\nT readObject(ByteBuffer, Class) and writeObject(ByteBuffer, Object).\nThese are the methods that actually do the job. Obviously, writeObject\nis used when sending, and readObject is used when reading. The next part\nis just Java coding - you just kind of have to know the API of those\nobjects you're serializing to convert into bytes. This one's really\nsimple though ;)"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"public class Inet4AddressSerializer extends Serializer {\n   @Override\n   public <T> T readObject(ByteBuffer data, Class<T> c) throws IOException {\n       byte[] address = new byte[4];\n       data.get(address);\n       return (T)Inet4Address.getByAddress(address);\n   }\n\n   @Override\n   public void writeObject(ByteBuffer buffer, Object object) throws IOException {\n       Inet4Address address = (Inet4Address)object;\n       buffer.put(address.getAddress());\n   }\n}\n")),Object(i.b)("p",null,"So now you've got this serializer, and you don't know what to do with\nit. Well, you need to register it to a class, and what other class would\nyou want to register it to, than Inet4Address?"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"Serializer.registerClass(Inet4Address.class, new Inet4AddressSerializer());\n")),Object(i.b)("p",null,"And now you can use the Inet4Address anywhere in a Message! Now we'll\ntest this Serializer, and see if we can get the IP on the other side:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'public class AddressMessage extends Message {\n  public Inet4Address addr;\n  public AddressMessage(Inet4Address addr) { this.addr = addr; }\n}\n...\nclient.send(new AddressMessage(Inet4Address.getByName("google.com")));\n')),Object(i.b)("p",null,"Results in a message being received, which prints out as:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"/66.102.13.106\n")),Object(i.b)("p",null,"And there you go, that's the end of this tutorial!"),Object(i.b)("p",null,"Next tutorial you'll learn about a simple, but powerful feature -\ncompression."))}d.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),d=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},u=function(e){var t=d(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),p=r,h=u["".concat(s,".").concat(p)]||u[p]||b[p]||i;return n?a.a.createElement(h,o({ref:t},c,{components:n})):a.a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);
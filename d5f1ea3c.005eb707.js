(window.webpackJsonp=window.webpackJsonp||[]).push([[258],{397:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(1),i=n(9),r=(n(0),n(441)),s={},o={id:"jme3/advanced/networking",title:"networking",description:"This document introduces you to the SpiderMonkey networking API. You use",source:"@site/docs/jme3/advanced/networking.md",permalink:"/wikidemo/docs/jme3/advanced/networking",editUrl:"https://github.com/8keep/wikidemo/edit/master/docs/jme3/advanced/networking.md"},c=[{value:"Creating a Server",id:"creating-a-server",children:[]},{value:"Creating a Client",id:"creating-a-client",children:[]},{value:"Getting Info About a Client",id:"getting-info-about-a-client",children:[]},{value:"Creating Message Types",id:"creating-message-types",children:[]},{value:"Responding to Messages",id:"responding-to-messages",children:[{value:"ClientListener.java",id:"clientlistenerjava",children:[]},{value:"ServerListener.java",id:"serverlistenerjava",children:[]}]},{value:"Creating and Sending Messages",id:"creating-and-sending-messages",children:[]},{value:"Closing a Client",id:"closing-a-client",children:[]},{value:"Closing a Server",id:"closing-a-server",children:[]},{value:"Kicking a Client",id:"kicking-a-client",children:[]},{value:"ClientStateListener",id:"clientstatelistener",children:[]},{value:"ConnectionListener",id:"connectionlistener",children:[]},{value:"ErrorListener",id:"errorlistener",children:[]}],l={rightToc:c};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This document introduces you to the SpiderMonkey networking API. You use\nthis API when you develop games where several players compete with one\nanother in real time. A multi-player game is made up of several clients\nconnecting to a server:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"The central server (one headless SimpleApplication) coordinates the\ngame in the background.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Each player runs a game client (a standard SimpleApplication) and\nconnects to the central server."))),Object(r.b)("p",null,"Each Client keeps the Server informed about its player's moves and\nactions. The Server centrally maintains the game state and broadcasts\nthe state info back to all connected clients. This network\nsynchronization allows all clients to share the same game world. Each\nclient then displays the game state to one player from this player's\nperspective."),Object(r.b)("h1",{id:"spidermonkey-api-overview"},"SpiderMonkey API Overview"),Object(r.b)("p",null,"The SpiderMonkey API is a set of interfaces and helper classes in the\n\\'com.jme3.network\\' package. For most users, this package and the\n\\'message\\' package is all they need to worry about. (The \\'base\\' and\n\\'kernel\\' packages only come into play when implementing custom network\ntransports or alternate client/server protocols, which is now possible)."),Object(r.b)("p",null,"The SpiderMonkey API assists you in creating a Server, Clients, and\nMessages. Once a Server instance is created and started, the Server\naccepts remote connections from Clients, and you can send and receive\nMessages. Client objects represent the client-side of the client-server\nconnection. Within the Server, these Client objects are referred to as\nHostedConnections. HostedConnections can hold application-defined\nclient-specific session attributes that the server-side listeners and\nservices can use to track player information, etc."),Object(r.b)("p",null,"+----------------------+----------------------+-----------------------+\n| Seen from the Client |                      | Seen from the Server  |\n+======================+======================+=======================+\n| com                  | ==                   | com.jme3.net          |\n| .jme3.network.Client |                      | work.HostedConnection |\n+----------------------+----------------------+-----------------------+"),Object(r.b)("p",null,"You can register several types of listeners to be notified of changes."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"MessageListeners on both the Client and the Server are notified when\nnew messages arrive. You can use MessageListeners to be notified\nabout only specific types of messages.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"ClientStateListeners inform the Client of changes in its connection\nstate, e.g. when the client gets kicked from the server.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"ConnectionListeners inform the Server about HostedConnection\narrivals and removals, e.g. if a client joins or quits.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"ErrorListeners inform the Client about network exceptions that have\nhappened, e.g. if the server crashes, the client throws a\nConnectorException, this can be picked up so that the application\ncan do something about it."))),Object(r.b)("h1",{id:"client-and-server"},"Client and Server"),Object(r.b)("h2",{id:"creating-a-server"},"Creating a Server"),Object(r.b)("p",null,'The game server is a "headless" com.jme3.app.SimpleApplication:'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public class ServerMain extends SimpleApplication {\n  public static void main(String[] args) {\n    ServerMain app = new ServerMain();\n    app.start(JmeContext.Type.Headless); // headless type for servers!\n  }\n}\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Headless")," SimpleApplication executes the simpleInitApp() method and\nruns the update loop normally. But the application does not open a\nwindow, and it does not listen to user input. This is the typical\nbehavior for a server application."))),Object(r.b)("p",null,"Create a com.jme3.network.Server in the ",Object(r.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method and\nspecify a communication port, for example 6143."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"@Override\npublic void simpleInitApp() {\n  ...\n  Server myServer = Network.createServer(6143);\n  myServer.start();\n  ...\n}\n")),Object(r.b)("p",null,"When you run this app on a host, the server is ready to accept clients.\nLet's create a client next."),Object(r.b)("h2",{id:"creating-a-client"},"Creating a Client"),Object(r.b)("p",null,"A game client is a standard com.jme3.app.SimpleApplication."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public class ClientMain extends SimpleApplication {\n  public static void main(String[] args) {\n    ClientMain app = new ClientMain();\n    app.start(JmeContext.Type.Display); // standard display type\n  }\n}\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"A standard SimpleApplication in ",Object(r.b)("inlineCode",{parentName:"p"},"Display")," mode executes the\nsimpleInitApp() method, runs the update loop, opens a window for the\nrendered video output, and listens to user input. This is the typical\nbehavior for a client application."))),Object(r.b)("p",null,"Create a com.jme3.network.Client in the ",Object(r.b)("inlineCode",{parentName:"p"},"simpleInitApp()")," method and\nspecify the servers IP address, and the same communication port as for\nthe server, here 6143."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'public void simpleInitApp() {\n   ...\n   Client myClient = Network.connectToServer("localhost", 6143);\n   myClient.start();\n   ...\n}\n')),Object(r.b)("p",null,'The server address can be in the format "localhost" or "127.0.0.1" (for\nlocal testing), or an IP address of a remote host in the format\n"123.456.78.9". In this example, we assume the server is running on the\nlocalhost.'),Object(r.b)("p",null,"When you run this client, it connects to the server."),Object(r.b)("h2",{id:"getting-info-about-a-client"},"Getting Info About a Client"),Object(r.b)("p",null,"The server refers to a connected client as\ncom.jme3.network.HostedConnection objects. The server can get info about\nclients as follows:"),Object(r.b)("p",null,"+-----------------------------------+-----------------------------------+\n| Accessor                          | Purpose                           |\n+===================================+===================================+\n| myServer.getConnections()         | Server gets a collection of all   |\n|                                   | connected HostedConnection        |\n|                                   | objects (all connected clients).  |\n+-----------------------------------+-----------------------------------+\n| myServer.getConnections().size()  | Server gets the number of all     |\n|                                   | connected HostedConnection        |\n|                                   | objects (number of clients).      |\n+-----------------------------------+-----------------------------------+\n| myServer.getConnection(0)         | Server gets the first (0), second |\n|                                   | (1), etc, connected               |\n|                                   | HostedConnection object (one      |\n|                                   | client).                          |\n+-----------------------------------+-----------------------------------+"),Object(r.b)("p",null,"Your game can define its own game data based on whatever criteria you\nwant, typically these include player ID and state. If the server needs\nto look up player/client-specific information, you can store this\ninformation directly on the HostedConnection object. The following\nexamples read and write a custom Java object ",Object(r.b)("inlineCode",{parentName:"p"},"MyState")," in the\nHostedConnection object ",Object(r.b)("inlineCode",{parentName:"p"},"conn"),":"),Object(r.b)("p",null,'+-----------------------------------+-----------------------------------+\n| Accessor                          | Purpose                           |\n+===================================+===================================+\n| conn.setAttribute( \\"MyState\\",   | Server can change an attribute of |\n| new MyState());                   | the HostedConnection.             |\n+-----------------------------------+-----------------------------------+\n| MyState state =                   | Server can read an attribute of   |\n| conn.getAttribute(\\"MyState\\");   | the HostedConnection.             |\n+-----------------------------------+-----------------------------------+'),Object(r.b)("h1",{id:"messaging"},"Messaging"),Object(r.b)("h2",{id:"creating-message-types"},"Creating Message Types"),Object(r.b)("p",null,"Each message represents data that you want to transmit between client\nand server. Common message examples include transformation updates or\ngame actions. For each message type, create a message class that extends\ncom.jme3.network.AbstractMessage. Use the \\@Serializable annotation from\n",Object(r.b)("inlineCode",{parentName:"p"},"com.jme3.network.serializing.Serializable")," and create an empty default\nconstructor. Custom constructors, fields, and methods are up to you and\ndepend on the message data that you want to transmit."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"@Serializable\npublic class HelloMessage extends AbstractMessage {\n  private String hello;       // custom message data\n  public HelloMessage() {}    // empty constructor\n  public HelloMessage(String s) { hello = s; } // custom constructor\n}\n")),Object(r.b)("p",null,"You then register message types to the\n",Object(r.b)("inlineCode",{parentName:"p"},"com.jme3.network.serializing.Serializer")," only on the server.\nSpiderMonkey has an automatic registering mechanism that will register\nthe messages on the client the first time it connects to the server."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Serializer.registerClass(HelloMessage.class);\n")),Object(r.b)("p",null,"::: {.warning}\nMessages must be registered after server creation, and before it's\nstarted. NOT before the server is created.\n:::"),Object(r.b)("p",null,"For this example, we have a simple message initialization method."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public void initializeSerializables() {\n    Serializer.registerClass(NetworkMessage.class);\n    Serializer.registerClass(PosAndDirMessage.class);\n    Serializer.registerClass(PosMessage.class);\n}\n")),Object(r.b)("p",null,"The method is is referencing message classes that reside in a jar\navailable to both the client and server. We then call this method from\n",Object(r.b)("inlineCode",{parentName:"p"},"simpleInitApp")," after creating but BEFORE starting the server as shown."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"@Override\npublic void simpleInitApp() {\n\n    ...\n        Server myServer = Network.createServer(6143);\n        initializeSerializables();\n        server.start();\n    ...\n}\n")),Object(r.b)("p",null,"Note that the automatic serialization setup is optional... but on by\ndefault. If your game does not follow these setup guidelines and is\notherwise too complicated to fix, it's simply a matter of removing\n(unregistering) the serialization service\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jMonkeyEngine/jmonkeyengine/blob/1c37d5a92dad24b586cc2e0200c0baecd0e907df/jme3-networking/src/main/java/com/jme3/network/service/serializer/ServerSerializerRegistrationsService.java#L48"}),"ServerSerializerRegistrationsService"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"ServerSerializerRegistrationsService ssr = server.getServices().getService( ServerSerializerRegistrationsService.class );\nserver.getServices().removeService( ssr );\n")),Object(r.b)("p",null,"Then you can do every little thing yourself in exactly the same order by\nregistering messages on both the client and server."),Object(r.b)("p",null,"It's highly recommend you use automatic serialization though."),Object(r.b)("h2",{id:"responding-to-messages"},"Responding to Messages"),Object(r.b)("p",null,"After a Message was received, a Listener responds to it. The listener\ncan access fields of the message, and send messages back, start new\nthreads, etc. There are two listeners, one on the server, one on the\nclient. For each message type, you implement the responses in either\nListeners' ",Object(r.b)("inlineCode",{parentName:"p"},"messageReceived()")," method."),Object(r.b)("h3",{id:"clientlistenerjava"},"ClientListener.java"),Object(r.b)("p",null,"Create one ClientListener.java and make it extend\n",Object(r.b)("inlineCode",{parentName:"p"},"com.jme3.network.MessageListener"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'public class ClientListener implements MessageListener<Client> {\n  public void messageReceived(Client source, Message message) {\n    if (message instanceof HelloMessage) {\n      // do something with the message\n      HelloMessage helloMessage = (HelloMessage) message;\n      System.out.println("Client #"+source.getId()+" received: \'"+helloMessage.getSomething()+"\'");\n    } // else...\n  }\n}\n')),Object(r.b)("p",null,"For each message type, register a client listener to the client."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"myClient.addMessageListener(new ClientListener(), HelloMessage.class);\n")),Object(r.b)("h3",{id:"serverlistenerjava"},"ServerListener.java"),Object(r.b)("p",null,"Create one ServerListener.java and make it extend\n",Object(r.b)("inlineCode",{parentName:"p"},"com.jme3.network.MessageListener"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'public class ServerListener implements MessageListener<HostedConnection> {\n  public void messageReceived(HostedConnection source, Message message) {\n    if (message instanceof HelloMessage) {\n      // do something with the message\n      HelloMessage helloMessage = (HelloMessage) message;\n      System.out.println("Server received \'" +helloMessage.getSomething() +"\' from client #"+source.getId());\n    } // else....\n  }\n}\n')),Object(r.b)("p",null,"For each message type, register a server listener to the server:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"myServer.addMessageListener(new ServerListener(), HelloMessage.class);\n")),Object(r.b)("h2",{id:"creating-and-sending-messages"},"Creating and Sending Messages"),Object(r.b)("p",null,"Let's create a new message of type HelloMessage:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'Message message = new HelloMessage("Hello World!");\n')),Object(r.b)("p",null,"Now the client can send this message to the server:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"myClient.send(message);\n")),Object(r.b)("p",null,"Or the server can broadcast this message to all HostedConnection\n(clients):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'Message message = new HelloMessage("Welcome!");\nmyServer.broadcast(message);\n')),Object(r.b)("p",null,"Or the server can send the message to a specific subset of clients (e.g.\nto HostedConnection conn1, conn2, and conn3):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"myServer.broadcast( Filters.in( conn1, conn2, conn3 ), message );\n")),Object(r.b)("p",null,"Or the server can send the message to all but a few selected clients\n(e.g. to all HostedConnections but conn4):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"myServer.broadcast( Filters.notEqualTo( conn4 ), message );\n")),Object(r.b)("p",null,"The last two broadcasting methods use com.jme3.network.Filters to select\na subset of recipients. If you know the exact list of recipients, always\nsend the messages directly to them using the Filters; avoid flooding the\nnetwork with unnecessary broadcasts to all."),Object(r.b)("h1",{id:"identification-and-rejection"},"Identification and Rejection"),Object(r.b)("p",null,"The ID of the Client and HostedConnection are the same at both ends of a\nconnection. The ID is given out authoritatively by the Server."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"... myClient.getId() ...\n")),Object(r.b)("p",null,"A server has a game version and game name property. Each client expects\nto communicate with a server with a certain game name and version. Test\nfirst whether the game name matches, and then whether game version\nmatches, before sending any messages! If they do not match, SpiderMoney\nwill reject it for you, you have no choice in the mater. This is so the\nclient and server can avoid miscommunication."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Typically, your networked game defines its own attributes (such as\nplayer ID) based on whatever criteria you want. If you want to look up\nplayer/client-specific information beyond the game version, you can set\nthis information directly on the Client/HostedConnection object (see\nGetting Info About a Client)."))),Object(r.b)("h1",{id:"closing-clients-and-server-cleanly"},"Closing Clients and Server Cleanly"),Object(r.b)("h2",{id:"closing-a-client"},"Closing a Client"),Object(r.b)("p",null,"You must override the client's destroy() method to close the connection\ncleanly when the player quits the client:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  @Override\n  public void destroy() {\n      ... // custom code\n      myClient.close();\n      super.destroy();\n  }\n")),Object(r.b)("h2",{id:"closing-a-server"},"Closing a Server"),Object(r.b)("p",null,"You must override the server's destroy() method to close the connection\nwhen the server quits:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  @Override\n  public void destroy() {\n      ... // custom code\n      myServer.close();\n      super.destroy();\n  }\n")),Object(r.b)("h2",{id:"kicking-a-client"},"Kicking a Client"),Object(r.b)("p",null,'The server can kick a HostedConnection to make it disconnect. You should\nprovide a String with further info (an explanation to the user what\nhappened, e.g. "Shutting" down for maintenance) for the server to send\nalong. This info message can be used (displayed to the user) by a\nClientStateListener. (See below)'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'conn.close("We kick cheaters.");\n')),Object(r.b)("h1",{id:"listening-to-connection-notification"},"Listening to Connection Notification"),Object(r.b)("p",null,"The server and clients are notified about connection changes."),Object(r.b)("h2",{id:"clientstatelistener"},"ClientStateListener"),Object(r.b)("p",null,"The com.jme3.network.ClientStateListener notifies the Client when the\nClient has fully connected to the server (including any internal\nhandshaking), and when the Client is kicked (disconnected) from the\nserver."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"The ClientStateListener when it receives a network exception applies the\ndefault close action. This just stops the client and you'll have to\nbuild around it so your application knows what to do. If you need more\ncontrol when a network exception happens and the client closes, you may\nwant to investigate in a ErrorListener."))),Object(r.b)("p",null,"+-----------------------------------+-----------------------------------+\n| ClientStateListener interface     | Purpose                           |\n| method                            |                                   |\n+===================================+===================================+\n| public void                       | Implement here what happens as    |\n| clientConnected(Client c){}       | soon as this client has fully     |\n|                                   | connected to the server.          |\n+-----------------------------------+-----------------------------------+\n| public void                       | Implement here what happens after |\n| clientDisconnected(Client c,      | the server kicks this client. For |\n| DisconnectInfo info){}            | example, display the              |\n|                                   | DisconnectInfo to the user.       |\n+-----------------------------------+-----------------------------------+"),Object(r.b)("p",null,"First implement the ClientStateListener interface in the Client class.\nThen register it to myClient in MyGameClient's simpleInitApp() method:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"myClient.addClientStateListener(this);\n")),Object(r.b)("h2",{id:"connectionlistener"},"ConnectionListener"),Object(r.b)("p",null,"The com.jme3.network.ConnectionListener notifies the Server whenever new\nHostedConnections (clients) come and go. The listener notifies the\nserver after the Client connection is fully established (including any\ninternal handshaking)."),Object(r.b)("p",null,"+-----------------------------------+-----------------------------------+\n| ConnectionListener interface      | Purpose                           |\n| method                            |                                   |\n+===================================+===================================+\n| public void                       | Implemenent here what happens     |\n| connectionAdded(Server s,         | after a new HostedConnection has  |\n| HostedConnection c){}             | joined the Server.                |\n+-----------------------------------+-----------------------------------+\n| public void                       | Implement here what happens after |\n| connectionRemoved(Server s,       | a HostedConnection has left. E.g. |\n| HostedConnection c){}             | a player has quit the game and    |\n|                                   | the server removes his character. |\n+-----------------------------------+-----------------------------------+"),Object(r.b)("p",null,"First implement the ConnectionListener interface in the Server class.\nThen register it to myServer in MyGameServer's simpleInitApp() method."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"myServer.addConnectionListener(this);\n")),Object(r.b)("h2",{id:"errorlistener"},"ErrorListener"),Object(r.b)("p",null,"The com.jme3.network.ErrorListener is a listener for when network\nexception happens. This listener is built so that you can override the\ndefault actions when a network exception happens."),Object(r.b)("p",null,"::: {.important}\nIf you intend on using the default network mechanics, ",Object(r.b)("strong",{parentName:"p"},"don't")," use\nthis! If you do override this, make sure you add a mechanic that can\nclose the client otherwise your client will get stuck open and cause\nerrors.\n:::"),Object(r.b)("p",null,"+-----------------------------------+-----------------------------------+\n| ErrorListener interface method    | Purpose                           |\n+===================================+===================================+\n| public void handleError(Client c, | Implemenent here what happens     |\n| Throwable t){}                    | after a exception affects the     |\n|                                   | network .                         |\n+-----------------------------------+-----------------------------------+"),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This interface was built for the client and server, but the code has\nnever been put on the server to handle this listener."))),Object(r.b)("p",null,"First implement the ErrorListener interface in the client class. Then\nyou need to register it to myClient in MyGameClients's simpleInitApp()\nmethod."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"myClient.addErrorListener(this);\n")),Object(r.b)("p",null,"In the class that implements the ErrorListener, a method would of been\nadded call handleError(Client s, Throwable t). Inside this method to get\nyou started, you going to want to listen for an error. To do this you're\ngoing to want a bit of code like this."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"if(t instanceof exception) {\n     //Add your own code here\n}\n")),Object(r.b)("p",null,"Replace ",Object(r.b)("strong",{parentName:"p"},"exception")," part in the ",Object(r.b)("strong",{parentName:"p"},"if")," statement for the type of\nexception that you would like it to handle."),Object(r.b)("h1",{id:"udp-versus-tcp"},"UDP versus TCP"),Object(r.b)("p",null,"SpiderMonkey supports both UDP (unreliable, fast) and TCP (reliable,\nslow) transport of messages."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"message1.setReliable(true); // TCP\nmessage2.setReliable(false); // UDP\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Choose reliable and slow transport for messages, if you want to make\ncertain the message is delivered (resent) when lost, and if the\norder of a series of messages is relevant. E.g. game actions such as\n"1". wield weapon, 2. attack, 3. dodge.')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Choose unreliable and fast transport for messages if the next\nmessage makes any previously delayed or lost message obsolete and\nsynchronizes the state again. E.g. a series of new locations while\nwalking."))),Object(r.b)("h1",{id:"important-use-multi-threading"},"Important: Use Multi-Threading"),Object(r.b)("p",null,"::: {.important}\n",Object(r.b)("strong",{parentName:"p"},"You cannot modify the scenegraph directly from the network thread.")," A\ncommon example for such a modification is when you synchronize the\nplayer's position in the scene. You have to use Java Multithreading.\n:::"),Object(r.b)("p",null,"Multithreading means that you create a Callable. A Callable is a Java\nclass representing any (possibly time-intensive) self-contained task\nthat has an impact on the scene graph (such as positioning the player).\nYou enqueue the Callable in the Executor of the client's OpenGL thread.\nThe Callable ensures to executes the modification in sync with the\nupdate loop."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"app.enqueue(callable);\n")),Object(r.b)("p",null,"Learn more about using\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../../jme3/advanced/multithreading"}),"multithreading")," in jME3 here."),Object(r.b)("p",null,"For general advice, see the articles ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking"}),"MultiPlayer\nNetworking"),"\nand ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.valvesoftware.com/wiki/Latency_Compensating_Methods_in_Client/Server_In-game_Protocol_Design_and_Optimization"}),"Latency Compensating Methods in Client/Server In-game Protocol\nDesign and\nOptimization"),"\nby the Valve Developer Community."),Object(r.b)("h1",{id:"troubleshooting"},"Troubleshooting"),Object(r.b)("p",null,"If you have set up a server in your home network, and the game clients\ncannot reach the server from the outside, it's time to learn about ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://portforward.com/"}),"port\nforwarding"),"."))}b.isMDXComponent=!0},441:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),b=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},p=function(e){var t=b(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=b(n),m=a,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||r;return n?i.a.createElement(h,o({ref:t},l,{components:n})):i.a.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<r;l++)s[l]=n[l];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);